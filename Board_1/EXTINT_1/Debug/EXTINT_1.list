
EXTINT_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080033cc  080033cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080033dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00004a0c  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004a1c  20004a1c  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019f65  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003157  00000000  00000000  00039fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b544  00000000  00000000  0003d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00048640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  00049468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000077ad  00000000  00000000  0004a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006242  00000000  00000000  00051e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005809f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000029a4  00000000  00000000  0005811c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032d0 	.word	0x080032d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080032d0 	.word	0x080032d0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f81b 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f002 fe24 	bl	8003150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f002 fde2 	bl	80030d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20004930 	.word	0x20004930
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20004930 	.word	0x20004930

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfad      	iteet	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfb5      	itete	lt
 80005ae:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005c4:	2800      	cmp	r0, #0
 80005c6:	db08      	blt.n	80005da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c8:	0942      	lsrs	r2, r0, #5
 80005ca:	2301      	movs	r3, #1
 80005cc:	f000 001f 	and.w	r0, r0, #31
 80005d0:	fa03 f000 	lsl.w	r0, r3, r0
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <HAL_NVIC_EnableIRQ+0x18>)
 80005d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000798 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005ec:	4a68      	ldr	r2, [pc, #416]	; (8000790 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005ee:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800079c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005f2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005f4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80005f6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005f8:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80005fa:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005fc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80005fe:	42ac      	cmp	r4, r5
 8000600:	f040 80b0 	bne.w	8000764 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000604:	684c      	ldr	r4, [r1, #4]
 8000606:	f024 0c10 	bic.w	ip, r4, #16
 800060a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800060e:	2e01      	cmp	r6, #1
 8000610:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000614:	d812      	bhi.n	800063c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000616:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000618:	2603      	movs	r6, #3
 800061a:	fa06 f60e 	lsl.w	r6, r6, lr
 800061e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000622:	68ce      	ldr	r6, [r1, #12]
 8000624:	fa06 f60e 	lsl.w	r6, r6, lr
 8000628:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800062a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800062c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800062e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000632:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000636:	409e      	lsls	r6, r3
 8000638:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800063a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800063c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800063e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000640:	fa06 f60e 	lsl.w	r6, r6, lr
 8000644:	43f6      	mvns	r6, r6
 8000646:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800064a:	688f      	ldr	r7, [r1, #8]
 800064c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000650:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000654:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000658:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800065a:	d116      	bne.n	800068a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800065c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000660:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000664:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000668:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800066c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000670:	f04f 0c0f 	mov.w	ip, #15
 8000674:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000678:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800067c:	690f      	ldr	r7, [r1, #16]
 800067e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000682:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000686:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800068a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800068c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800068e:	f004 0703 	and.w	r7, r4, #3
 8000692:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000696:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800069a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800069c:	00e6      	lsls	r6, r4, #3
 800069e:	d561      	bpl.n	8000764 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	f04f 0b00 	mov.w	fp, #0
 80006a4:	f8cd b00c 	str.w	fp, [sp, #12]
 80006a8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ac:	4e39      	ldr	r6, [pc, #228]	; (8000794 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006b2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006b6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006ba:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006be:	9703      	str	r7, [sp, #12]
 80006c0:	9f03      	ldr	r7, [sp, #12]
 80006c2:	f023 0703 	bic.w	r7, r3, #3
 80006c6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006ca:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006ce:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006d2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006da:	f04f 0e0f 	mov.w	lr, #15
 80006de:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006e4:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e8:	d043      	beq.n	8000772 <HAL_GPIO_Init+0x192>
 80006ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006ee:	42b0      	cmp	r0, r6
 80006f0:	d041      	beq.n	8000776 <HAL_GPIO_Init+0x196>
 80006f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006f6:	42b0      	cmp	r0, r6
 80006f8:	d03f      	beq.n	800077a <HAL_GPIO_Init+0x19a>
 80006fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006fe:	42b0      	cmp	r0, r6
 8000700:	d03d      	beq.n	800077e <HAL_GPIO_Init+0x19e>
 8000702:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000706:	42b0      	cmp	r0, r6
 8000708:	d03b      	beq.n	8000782 <HAL_GPIO_Init+0x1a2>
 800070a:	4548      	cmp	r0, r9
 800070c:	d03b      	beq.n	8000786 <HAL_GPIO_Init+0x1a6>
 800070e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000712:	42b0      	cmp	r0, r6
 8000714:	d039      	beq.n	800078a <HAL_GPIO_Init+0x1aa>
 8000716:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800071a:	42b0      	cmp	r0, r6
 800071c:	bf14      	ite	ne
 800071e:	2608      	movne	r6, #8
 8000720:	2607      	moveq	r6, #7
 8000722:	fa06 f60c 	lsl.w	r6, r6, ip
 8000726:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800072a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800072c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800072e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000730:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000734:	bf0c      	ite	eq
 8000736:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000738:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800073a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800073c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800073e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000742:	bf0c      	ite	eq
 8000744:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000746:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000748:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800074a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000750:	bf0c      	ite	eq
 8000752:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000754:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000756:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000758:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800075a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800075c:	bf54      	ite	pl
 800075e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000760:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000762:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000764:	3301      	adds	r3, #1
 8000766:	2b10      	cmp	r3, #16
 8000768:	f47f af45 	bne.w	80005f6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800076c:	b005      	add	sp, #20
 800076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	465e      	mov	r6, fp
 8000774:	e7d5      	b.n	8000722 <HAL_GPIO_Init+0x142>
 8000776:	2601      	movs	r6, #1
 8000778:	e7d3      	b.n	8000722 <HAL_GPIO_Init+0x142>
 800077a:	2602      	movs	r6, #2
 800077c:	e7d1      	b.n	8000722 <HAL_GPIO_Init+0x142>
 800077e:	2603      	movs	r6, #3
 8000780:	e7cf      	b.n	8000722 <HAL_GPIO_Init+0x142>
 8000782:	2604      	movs	r6, #4
 8000784:	e7cd      	b.n	8000722 <HAL_GPIO_Init+0x142>
 8000786:	2605      	movs	r6, #5
 8000788:	e7cb      	b.n	8000722 <HAL_GPIO_Init+0x142>
 800078a:	2606      	movs	r6, #6
 800078c:	e7c9      	b.n	8000722 <HAL_GPIO_Init+0x142>
 800078e:	bf00      	nop
 8000790:	40013c00 	.word	0x40013c00
 8000794:	40020000 	.word	0x40020000
 8000798:	40023800 	.word	0x40023800
 800079c:	40021400 	.word	0x40021400

080007a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007a0:	6903      	ldr	r3, [r0, #16]
 80007a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80007a4:	bf14      	ite	ne
 80007a6:	2001      	movne	r0, #1
 80007a8:	2000      	moveq	r0, #0
 80007aa:	4770      	bx	lr

080007ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007ac:	b10a      	cbz	r2, 80007b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007ae:	6181      	str	r1, [r0, #24]
 80007b0:	4770      	bx	lr
 80007b2:	0409      	lsls	r1, r1, #16
 80007b4:	e7fb      	b.n	80007ae <HAL_GPIO_WritePin+0x2>
	...

080007b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007bc:	4604      	mov	r4, r0
 80007be:	b908      	cbnz	r0, 80007c4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80007c0:	2001      	movs	r0, #1
 80007c2:	e03f      	b.n	8000844 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007c4:	6803      	ldr	r3, [r0, #0]
 80007c6:	07dd      	lsls	r5, r3, #31
 80007c8:	d410      	bmi.n	80007ec <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007ca:	6823      	ldr	r3, [r4, #0]
 80007cc:	0798      	lsls	r0, r3, #30
 80007ce:	d45a      	bmi.n	8000886 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	071a      	lsls	r2, r3, #28
 80007d4:	f100 809c 	bmi.w	8000910 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	075b      	lsls	r3, r3, #29
 80007dc:	f100 80ba 	bmi.w	8000954 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007e0:	69a0      	ldr	r0, [r4, #24]
 80007e2:	2800      	cmp	r0, #0
 80007e4:	f040 811b 	bne.w	8000a1e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80007e8:	2000      	movs	r0, #0
 80007ea:	e02b      	b.n	8000844 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007ec:	4ba4      	ldr	r3, [pc, #656]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	f002 020c 	and.w	r2, r2, #12
 80007f4:	2a04      	cmp	r2, #4
 80007f6:	d007      	beq.n	8000808 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007fe:	2a08      	cmp	r2, #8
 8000800:	d10a      	bne.n	8000818 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	0259      	lsls	r1, r3, #9
 8000806:	d507      	bpl.n	8000818 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000808:	4b9d      	ldr	r3, [pc, #628]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	039a      	lsls	r2, r3, #14
 800080e:	d5dc      	bpl.n	80007ca <HAL_RCC_OscConfig+0x12>
 8000810:	6863      	ldr	r3, [r4, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1d9      	bne.n	80007ca <HAL_RCC_OscConfig+0x12>
 8000816:	e7d3      	b.n	80007c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000818:	6863      	ldr	r3, [r4, #4]
 800081a:	4d99      	ldr	r5, [pc, #612]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 800081c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000820:	d113      	bne.n	800084a <HAL_RCC_OscConfig+0x92>
 8000822:	682b      	ldr	r3, [r5, #0]
 8000824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000828:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800082a:	f7ff fe7f 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082e:	4d94      	ldr	r5, [pc, #592]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000830:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000832:	682b      	ldr	r3, [r5, #0]
 8000834:	039b      	lsls	r3, r3, #14
 8000836:	d4c8      	bmi.n	80007ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000838:	f7ff fe78 	bl	800052c <HAL_GetTick>
 800083c:	1b80      	subs	r0, r0, r6
 800083e:	2864      	cmp	r0, #100	; 0x64
 8000840:	d9f7      	bls.n	8000832 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000842:	2003      	movs	r0, #3
}
 8000844:	b002      	add	sp, #8
 8000846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800084e:	d104      	bne.n	800085a <HAL_RCC_OscConfig+0xa2>
 8000850:	682b      	ldr	r3, [r5, #0]
 8000852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000856:	602b      	str	r3, [r5, #0]
 8000858:	e7e3      	b.n	8000822 <HAL_RCC_OscConfig+0x6a>
 800085a:	682a      	ldr	r2, [r5, #0]
 800085c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000860:	602a      	str	r2, [r5, #0]
 8000862:	682a      	ldr	r2, [r5, #0]
 8000864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000868:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1dd      	bne.n	800082a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800086e:	f7ff fe5d 	bl	800052c <HAL_GetTick>
 8000872:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000874:	682b      	ldr	r3, [r5, #0]
 8000876:	039f      	lsls	r7, r3, #14
 8000878:	d5a7      	bpl.n	80007ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800087a:	f7ff fe57 	bl	800052c <HAL_GetTick>
 800087e:	1b80      	subs	r0, r0, r6
 8000880:	2864      	cmp	r0, #100	; 0x64
 8000882:	d9f7      	bls.n	8000874 <HAL_RCC_OscConfig+0xbc>
 8000884:	e7dd      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000886:	4b7e      	ldr	r3, [pc, #504]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	f012 0f0c 	tst.w	r2, #12
 800088e:	d007      	beq.n	80008a0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000896:	2a08      	cmp	r2, #8
 8000898:	d111      	bne.n	80008be <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	025e      	lsls	r6, r3, #9
 800089e:	d40e      	bmi.n	80008be <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008a0:	4b77      	ldr	r3, [pc, #476]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	0795      	lsls	r5, r2, #30
 80008a6:	d502      	bpl.n	80008ae <HAL_RCC_OscConfig+0xf6>
 80008a8:	68e2      	ldr	r2, [r4, #12]
 80008aa:	2a01      	cmp	r2, #1
 80008ac:	d188      	bne.n	80007c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	6921      	ldr	r1, [r4, #16]
 80008b2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008b6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008bc:	e788      	b.n	80007d0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008be:	68e2      	ldr	r2, [r4, #12]
 80008c0:	4b70      	ldr	r3, [pc, #448]	; (8000a84 <HAL_RCC_OscConfig+0x2cc>)
 80008c2:	b1b2      	cbz	r2, 80008f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008c8:	f7ff fe30 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008cc:	4d6c      	ldr	r5, [pc, #432]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	0798      	lsls	r0, r3, #30
 80008d4:	d507      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	6922      	ldr	r2, [r4, #16]
 80008da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008e2:	602b      	str	r3, [r5, #0]
 80008e4:	e774      	b.n	80007d0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008e6:	f7ff fe21 	bl	800052c <HAL_GetTick>
 80008ea:	1b80      	subs	r0, r0, r6
 80008ec:	2802      	cmp	r0, #2
 80008ee:	d9ef      	bls.n	80008d0 <HAL_RCC_OscConfig+0x118>
 80008f0:	e7a7      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80008f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f4:	f7ff fe1a 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f8:	4d61      	ldr	r5, [pc, #388]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	0799      	lsls	r1, r3, #30
 8000900:	f57f af66 	bpl.w	80007d0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000904:	f7ff fe12 	bl	800052c <HAL_GetTick>
 8000908:	1b80      	subs	r0, r0, r6
 800090a:	2802      	cmp	r0, #2
 800090c:	d9f6      	bls.n	80008fc <HAL_RCC_OscConfig+0x144>
 800090e:	e798      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000910:	6962      	ldr	r2, [r4, #20]
 8000912:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <HAL_RCC_OscConfig+0x2d0>)
 8000914:	b17a      	cbz	r2, 8000936 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800091a:	f7ff fe07 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800091e:	4d58      	ldr	r5, [pc, #352]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000920:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000922:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000924:	079f      	lsls	r7, r3, #30
 8000926:	f53f af57 	bmi.w	80007d8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800092a:	f7ff fdff 	bl	800052c <HAL_GetTick>
 800092e:	1b80      	subs	r0, r0, r6
 8000930:	2802      	cmp	r0, #2
 8000932:	d9f6      	bls.n	8000922 <HAL_RCC_OscConfig+0x16a>
 8000934:	e785      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000936:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000938:	f7ff fdf8 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800093c:	4d50      	ldr	r5, [pc, #320]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800093e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000940:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000942:	0798      	lsls	r0, r3, #30
 8000944:	f57f af48 	bpl.w	80007d8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000948:	f7ff fdf0 	bl	800052c <HAL_GetTick>
 800094c:	1b80      	subs	r0, r0, r6
 800094e:	2802      	cmp	r0, #2
 8000950:	d9f6      	bls.n	8000940 <HAL_RCC_OscConfig+0x188>
 8000952:	e776      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000954:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 8000956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000958:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800095c:	d128      	bne.n	80009b0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	9201      	str	r2, [sp, #4]
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000966:	641a      	str	r2, [r3, #64]	; 0x40
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000972:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000974:	4d45      	ldr	r5, [pc, #276]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	05d9      	lsls	r1, r3, #23
 800097a:	d51b      	bpl.n	80009b4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	4d40      	ldr	r5, [pc, #256]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 8000980:	2b01      	cmp	r3, #1
 8000982:	d127      	bne.n	80009d4 <HAL_RCC_OscConfig+0x21c>
 8000984:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800098c:	f7ff fdce 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000990:	4d3b      	ldr	r5, [pc, #236]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000992:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000994:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000998:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800099a:	079b      	lsls	r3, r3, #30
 800099c:	d539      	bpl.n	8000a12 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800099e:	2e00      	cmp	r6, #0
 80009a0:	f43f af1e 	beq.w	80007e0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009a4:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 80009a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	e717      	b.n	80007e0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80009b0:	2600      	movs	r6, #0
 80009b2:	e7df      	b.n	8000974 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdb6 	bl	800052c <HAL_GetTick>
 80009c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	05da      	lsls	r2, r3, #23
 80009c6:	d4d9      	bmi.n	800097c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009c8:	f7ff fdb0 	bl	800052c <HAL_GetTick>
 80009cc:	1bc0      	subs	r0, r0, r7
 80009ce:	2802      	cmp	r0, #2
 80009d0:	d9f7      	bls.n	80009c2 <HAL_RCC_OscConfig+0x20a>
 80009d2:	e736      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	d104      	bne.n	80009e2 <HAL_RCC_OscConfig+0x22a>
 80009d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	672b      	str	r3, [r5, #112]	; 0x70
 80009e0:	e7d0      	b.n	8000984 <HAL_RCC_OscConfig+0x1cc>
 80009e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009e4:	f022 0201 	bic.w	r2, r2, #1
 80009e8:	672a      	str	r2, [r5, #112]	; 0x70
 80009ea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009ec:	f022 0204 	bic.w	r2, r2, #4
 80009f0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1ca      	bne.n	800098c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80009f6:	f7ff fd99 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009fa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a02:	0798      	lsls	r0, r3, #30
 8000a04:	d5cb      	bpl.n	800099e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a06:	f7ff fd91 	bl	800052c <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	4540      	cmp	r0, r8
 8000a0e:	d9f7      	bls.n	8000a00 <HAL_RCC_OscConfig+0x248>
 8000a10:	e717      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a12:	f7ff fd8b 	bl	800052c <HAL_GetTick>
 8000a16:	1bc0      	subs	r0, r0, r7
 8000a18:	4540      	cmp	r0, r8
 8000a1a:	d9bd      	bls.n	8000998 <HAL_RCC_OscConfig+0x1e0>
 8000a1c:	e711      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a1e:	4d18      	ldr	r5, [pc, #96]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 8000a20:	68ab      	ldr	r3, [r5, #8]
 8000a22:	f003 030c 	and.w	r3, r3, #12
 8000a26:	2b08      	cmp	r3, #8
 8000a28:	d047      	beq.n	8000aba <HAL_RCC_OscConfig+0x302>
 8000a2a:	4e19      	ldr	r6, [pc, #100]	; (8000a90 <HAL_RCC_OscConfig+0x2d8>)
 8000a2c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a2e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a30:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a32:	d135      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a34:	f7ff fd7a 	bl	800052c <HAL_GetTick>
 8000a38:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	0199      	lsls	r1, r3, #6
 8000a3e:	d429      	bmi.n	8000a94 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a40:	6a22      	ldr	r2, [r4, #32]
 8000a42:	69e3      	ldr	r3, [r4, #28]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a48:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a54:	4c0a      	ldr	r4, [pc, #40]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a56:	0852      	lsrs	r2, r2, #1
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a5e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a60:	2301      	movs	r3, #1
 8000a62:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a64:	f7ff fd62 	bl	800052c <HAL_GetTick>
 8000a68:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	019a      	lsls	r2, r3, #6
 8000a6e:	f53f aebb 	bmi.w	80007e8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a72:	f7ff fd5b 	bl	800052c <HAL_GetTick>
 8000a76:	1b40      	subs	r0, r0, r5
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d9f6      	bls.n	8000a6a <HAL_RCC_OscConfig+0x2b2>
 8000a7c:	e6e1      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	42470000 	.word	0x42470000
 8000a88:	42470e80 	.word	0x42470e80
 8000a8c:	40007000 	.word	0x40007000
 8000a90:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a94:	f7ff fd4a 	bl	800052c <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	2802      	cmp	r0, #2
 8000a9c:	d9cd      	bls.n	8000a3a <HAL_RCC_OscConfig+0x282>
 8000a9e:	e6d0      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fd44 	bl	800052c <HAL_GetTick>
 8000aa4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	019b      	lsls	r3, r3, #6
 8000aaa:	f57f ae9d 	bpl.w	80007e8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aae:	f7ff fd3d 	bl	800052c <HAL_GetTick>
 8000ab2:	1b00      	subs	r0, r0, r4
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d9f6      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x2ee>
 8000ab8:	e6c3      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000aba:	2801      	cmp	r0, #1
 8000abc:	f43f aec2 	beq.w	8000844 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000ac0:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ac2:	69e3      	ldr	r3, [r4, #28]
 8000ac4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	f47f ae79 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
 8000ace:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ad0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	f47f ae73 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ada:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000adc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ae0:	4003      	ands	r3, r0
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	f47f ae6c 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ae8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000aea:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000aee:	4293      	cmp	r3, r2
 8000af0:	f47f ae66 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000af4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000af6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000afa:	1ac0      	subs	r0, r0, r3
 8000afc:	bf18      	it	ne
 8000afe:	2001      	movne	r0, #1
 8000b00:	e6a0      	b.n	8000844 <HAL_RCC_OscConfig+0x8c>
 8000b02:	bf00      	nop

08000b04 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b04:	4913      	ldr	r1, [pc, #76]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b08:	688b      	ldr	r3, [r1, #8]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d003      	beq.n	8000b1a <HAL_RCC_GetSysClockFreq+0x16>
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d003      	beq.n	8000b1e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b16:	4810      	ldr	r0, [pc, #64]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b18:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x58>)
 8000b1c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b1e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b20:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b22:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b24:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b28:	bf14      	ite	ne
 8000b2a:	480c      	ldrne	r0, [pc, #48]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2c:	480a      	ldreq	r0, [pc, #40]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b32:	bf18      	it	ne
 8000b34:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3a:	fba1 0100 	umull	r0, r1, r1, r0
 8000b3e:	f7ff fb47 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b52:	bd08      	pop	{r3, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	00f42400 	.word	0x00f42400
 8000b5c:	007a1200 	.word	0x007a1200

08000b60 <HAL_RCC_ClockConfig>:
{
 8000b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b64:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b66:	4604      	mov	r4, r0
 8000b68:	b910      	cbnz	r0, 8000b70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b70:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <HAL_RCC_ClockConfig+0x124>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	f002 020f 	and.w	r2, r2, #15
 8000b78:	428a      	cmp	r2, r1
 8000b7a:	d329      	bcc.n	8000bd0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b7c:	6821      	ldr	r1, [r4, #0]
 8000b7e:	078f      	lsls	r7, r1, #30
 8000b80:	d42e      	bmi.n	8000be0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b82:	07c8      	lsls	r0, r1, #31
 8000b84:	d441      	bmi.n	8000c0a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <HAL_RCC_ClockConfig+0x124>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f002 020f 	and.w	r2, r2, #15
 8000b8e:	4295      	cmp	r5, r2
 8000b90:	d367      	bcc.n	8000c62 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	0751      	lsls	r1, r2, #29
 8000b96:	d46d      	bmi.n	8000c74 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b98:	0713      	lsls	r3, r2, #28
 8000b9a:	d507      	bpl.n	8000bac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b9c:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000b9e:	6921      	ldr	r1, [r4, #16]
 8000ba0:	6893      	ldr	r3, [r2, #8]
 8000ba2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ba6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000baa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bac:	f7ff ffaa 	bl	8000b04 <HAL_RCC_GetSysClockFreq>
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000bb2:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <HAL_RCC_ClockConfig+0x12c>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bba:	5cd3      	ldrb	r3, [r2, r3]
 8000bbc:	40d8      	lsrs	r0, r3
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <HAL_RCC_ClockConfig+0x130>)
 8000bc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000bc2:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <HAL_RCC_ClockConfig+0x134>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	f002 fac3 	bl	8003150 <HAL_InitTick>
  return HAL_OK;
 8000bca:	2000      	movs	r0, #0
 8000bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bd0:	b2ca      	uxtb	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	d1c5      	bne.n	8000b6a <HAL_RCC_ClockConfig+0xa>
 8000bde:	e7cd      	b.n	8000b7c <HAL_RCC_ClockConfig+0x1c>
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000be6:	bf1e      	ittt	ne
 8000be8:	689a      	ldrne	r2, [r3, #8]
 8000bea:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bee:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bf2:	bf42      	ittt	mi
 8000bf4:	689a      	ldrmi	r2, [r3, #8]
 8000bf6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bfa:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	68a0      	ldr	r0, [r4, #8]
 8000c00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c04:	4302      	orrs	r2, r0
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	e7bb      	b.n	8000b82 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c0a:	6862      	ldr	r2, [r4, #4]
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c0e:	2a01      	cmp	r2, #1
 8000c10:	d11d      	bne.n	8000c4e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c18:	d0a7      	beq.n	8000b6a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c1a:	4e1b      	ldr	r6, [pc, #108]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c1c:	68b3      	ldr	r3, [r6, #8]
 8000c1e:	f023 0303 	bic.w	r3, r3, #3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c26:	f7ff fc81 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c2a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c2e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c30:	68b3      	ldr	r3, [r6, #8]
 8000c32:	6862      	ldr	r2, [r4, #4]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c3c:	d0a3      	beq.n	8000b86 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3e:	f7ff fc75 	bl	800052c <HAL_GetTick>
 8000c42:	1bc0      	subs	r0, r0, r7
 8000c44:	4540      	cmp	r0, r8
 8000c46:	d9f3      	bls.n	8000c30 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000c48:	2003      	movs	r0, #3
}
 8000c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c4e:	1e91      	subs	r1, r2, #2
 8000c50:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c52:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c54:	d802      	bhi.n	8000c5c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c5a:	e7dd      	b.n	8000c18 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5c:	f013 0f02 	tst.w	r3, #2
 8000c60:	e7da      	b.n	8000c18 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c62:	b2ea      	uxtb	r2, r5
 8000c64:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	429d      	cmp	r5, r3
 8000c6e:	f47f af7c 	bne.w	8000b6a <HAL_RCC_ClockConfig+0xa>
 8000c72:	e78e      	b.n	8000b92 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c74:	4904      	ldr	r1, [pc, #16]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c76:	68e0      	ldr	r0, [r4, #12]
 8000c78:	688b      	ldr	r3, [r1, #8]
 8000c7a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c7e:	4303      	orrs	r3, r0
 8000c80:	608b      	str	r3, [r1, #8]
 8000c82:	e789      	b.n	8000b98 <HAL_RCC_ClockConfig+0x38>
 8000c84:	40023c00 	.word	0x40023c00
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	080033b1 	.word	0x080033b1
 8000c90:	2000000c 	.word	0x2000000c
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ca6:	6810      	ldr	r0, [r2, #0]
}
 8000ca8:	40d8      	lsrs	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	080033c1 	.word	0x080033c1
 8000cb4:	2000000c 	.word	0x2000000c

08000cb8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_RCC_GetClockConfig+0x34>)
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000ccc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000cd4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cde:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_RCC_GetClockConfig+0x38>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 030f 	and.w	r3, r3, #15
 8000ce8:	600b      	str	r3, [r1, #0]
 8000cea:	4770      	bx	lr
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000cf4:	6803      	ldr	r3, [r0, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d04:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000d06:	bf1e      	ittt	ne
 8000d08:	681a      	ldrne	r2, [r3, #0]
 8000d0a:	f042 0201 	orrne.w	r2, r2, #1
 8000d0e:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000d10:	2000      	movs	r0, #0
 8000d12:	4770      	bx	lr

08000d14 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d14:	4770      	bx	lr

08000d16 <HAL_TIM_IC_CaptureCallback>:
 8000d16:	4770      	bx	lr

08000d18 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d18:	4770      	bx	lr

08000d1a <HAL_TIM_TriggerCallback>:
 8000d1a:	4770      	bx	lr

08000d1c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d1c:	6803      	ldr	r3, [r0, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	0791      	lsls	r1, r2, #30
{
 8000d22:	b510      	push	{r4, lr}
 8000d24:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d26:	d50e      	bpl.n	8000d46 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	0792      	lsls	r2, r2, #30
 8000d2c:	d50b      	bpl.n	8000d46 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d2e:	f06f 0202 	mvn.w	r2, #2
 8000d32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d34:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d36:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d38:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d3a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d3c:	d077      	beq.n	8000e2e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000d3e:	f7ff ffea 	bl	8000d16 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d42:	2300      	movs	r3, #0
 8000d44:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	0750      	lsls	r0, r2, #29
 8000d4c:	d510      	bpl.n	8000d70 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	0751      	lsls	r1, r2, #29
 8000d52:	d50d      	bpl.n	8000d70 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d54:	f06f 0204 	mvn.w	r2, #4
 8000d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d5a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d5c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d5e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d62:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d66:	d068      	beq.n	8000e3a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d68:	f7ff ffd5 	bl	8000d16 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	691a      	ldr	r2, [r3, #16]
 8000d74:	0712      	lsls	r2, r2, #28
 8000d76:	d50f      	bpl.n	8000d98 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	0710      	lsls	r0, r2, #28
 8000d7c:	d50c      	bpl.n	8000d98 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d7e:	f06f 0208 	mvn.w	r2, #8
 8000d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d84:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d86:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d88:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d8a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d8c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d8e:	d05a      	beq.n	8000e46 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d90:	f7ff ffc1 	bl	8000d16 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d94:	2300      	movs	r3, #0
 8000d96:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	06d2      	lsls	r2, r2, #27
 8000d9e:	d510      	bpl.n	8000dc2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	06d0      	lsls	r0, r2, #27
 8000da4:	d50d      	bpl.n	8000dc2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000da6:	f06f 0210 	mvn.w	r2, #16
 8000daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dac:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dae:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000db0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000db4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000db6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000db8:	d04b      	beq.n	8000e52 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dba:	f7ff ffac 	bl	8000d16 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	07d1      	lsls	r1, r2, #31
 8000dc8:	d508      	bpl.n	8000ddc <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	07d2      	lsls	r2, r2, #31
 8000dce:	d505      	bpl.n	8000ddc <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000dd0:	f06f 0201 	mvn.w	r2, #1
 8000dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f002 f970 	bl	80030bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	0610      	lsls	r0, r2, #24
 8000de2:	d508      	bpl.n	8000df6 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	0611      	lsls	r1, r2, #24
 8000de8:	d505      	bpl.n	8000df6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000dea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000df0:	4620      	mov	r0, r4
 8000df2:	f000 f8f8 	bl	8000fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	0652      	lsls	r2, r2, #25
 8000dfc:	d508      	bpl.n	8000e10 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	0650      	lsls	r0, r2, #25
 8000e02:	d505      	bpl.n	8000e10 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff ff85 	bl	8000d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	0691      	lsls	r1, r2, #26
 8000e16:	d522      	bpl.n	8000e5e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	0692      	lsls	r2, r2, #26
 8000e1c:	d51f      	bpl.n	8000e5e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e1e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000e22:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e24:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000e2a:	f000 b8db 	b.w	8000fe4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e2e:	f7ff ff71 	bl	8000d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ff70 	bl	8000d18 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e38:	e783      	b.n	8000d42 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e3a:	f7ff ff6b 	bl	8000d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f7ff ff6a 	bl	8000d18 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e44:	e792      	b.n	8000d6c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e46:	f7ff ff65 	bl	8000d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f7ff ff64 	bl	8000d18 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e50:	e7a0      	b.n	8000d94 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e52:	f7ff ff5f 	bl	8000d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff ff5e 	bl	8000d18 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e5c:	e7af      	b.n	8000dbe <HAL_TIM_IRQHandler+0xa2>
 8000e5e:	bd10      	pop	{r4, pc}

08000e60 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e60:	4a30      	ldr	r2, [pc, #192]	; (8000f24 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000e62:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d012      	beq.n	8000e8e <TIM_Base_SetConfig+0x2e>
 8000e68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e6c:	d00f      	beq.n	8000e8e <TIM_Base_SetConfig+0x2e>
 8000e6e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d00b      	beq.n	8000e8e <TIM_Base_SetConfig+0x2e>
 8000e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e7a:	4290      	cmp	r0, r2
 8000e7c:	d007      	beq.n	8000e8e <TIM_Base_SetConfig+0x2e>
 8000e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d003      	beq.n	8000e8e <TIM_Base_SetConfig+0x2e>
 8000e86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e8a:	4290      	cmp	r0, r2
 8000e8c:	d119      	bne.n	8000ec2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e8e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e94:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <TIM_Base_SetConfig+0xc4>)
 8000e98:	4290      	cmp	r0, r2
 8000e9a:	d029      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000e9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ea0:	d026      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000ea2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d022      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eae:	4290      	cmp	r0, r2
 8000eb0:	d01e      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000eb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb6:	4290      	cmp	r0, r2
 8000eb8:	d01a      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000eba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ebe:	4290      	cmp	r0, r2
 8000ec0:	d016      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <TIM_Base_SetConfig+0xc8>)
 8000ec4:	4290      	cmp	r0, r2
 8000ec6:	d013      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000ec8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ecc:	4290      	cmp	r0, r2
 8000ece:	d00f      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ed4:	4290      	cmp	r0, r2
 8000ed6:	d00b      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000ed8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000edc:	4290      	cmp	r0, r2
 8000ede:	d007      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee4:	4290      	cmp	r0, r2
 8000ee6:	d003      	beq.n	8000ef0 <TIM_Base_SetConfig+0x90>
 8000ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eec:	4290      	cmp	r0, r2
 8000eee:	d103      	bne.n	8000ef8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ef0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ef6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ef8:	694a      	ldr	r2, [r1, #20]
 8000efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000efe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000f00:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f02:	688b      	ldr	r3, [r1, #8]
 8000f04:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000f06:	680b      	ldr	r3, [r1, #0]
 8000f08:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <TIM_Base_SetConfig+0xc4>)
 8000f0c:	4298      	cmp	r0, r3
 8000f0e:	d003      	beq.n	8000f18 <TIM_Base_SetConfig+0xb8>
 8000f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f14:	4298      	cmp	r0, r3
 8000f16:	d101      	bne.n	8000f1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000f18:	690b      	ldr	r3, [r1, #16]
 8000f1a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	6143      	str	r3, [r0, #20]
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40014000 	.word	0x40014000

08000f2c <HAL_TIM_Base_Init>:
{
 8000f2c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000f2e:	4604      	mov	r4, r0
 8000f30:	b1a0      	cbz	r0, 8000f5c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f3a:	b91b      	cbnz	r3, 8000f44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f40:	f002 f8e8 	bl	8003114 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f44:	2302      	movs	r3, #2
 8000f46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f4a:	6820      	ldr	r0, [r4, #0]
 8000f4c:	1d21      	adds	r1, r4, #4
 8000f4e:	f7ff ff87 	bl	8000e60 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f58:	2000      	movs	r0, #0
 8000f5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f5c:	2001      	movs	r0, #1
}
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000f60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f64:	2b01      	cmp	r3, #1
{
 8000f66:	b530      	push	{r4, r5, lr}
 8000f68:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000f6c:	d035      	beq.n	8000fda <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000f72:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000f74:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8000f76:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000f78:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8000f7c:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000f7e:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8000f80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000f84:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000f86:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f88:	4c15      	ldr	r4, [pc, #84]	; (8000fe0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8000f8a:	42a3      	cmp	r3, r4
 8000f8c:	d01a      	beq.n	8000fc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8000f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f92:	d017      	beq.n	8000fc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8000f94:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d013      	beq.n	8000fc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8000f9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fa0:	42a3      	cmp	r3, r4
 8000fa2:	d00f      	beq.n	8000fc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8000fa4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fa8:	42a3      	cmp	r3, r4
 8000faa:	d00b      	beq.n	8000fc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8000fac:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8000fb0:	42a3      	cmp	r3, r4
 8000fb2:	d007      	beq.n	8000fc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8000fb4:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d003      	beq.n	8000fc4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8000fbc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8000fc0:	42a3      	cmp	r3, r4
 8000fc2:	d104      	bne.n	8000fce <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fc4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8000fc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fca:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8000fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000fda:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000fdc:	bd30      	pop	{r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <HAL_TIMEx_CommutCallback>:
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000fe6:	4770      	bx	lr

08000fe8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8000fe8:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8000fea:	f001 ff29 	bl	8002e40 <pvTimerGetTimerID>

  if (callb != NULL) {
 8000fee:	b120      	cbz	r0, 8000ffa <TimerCallback+0x12>
    callb->func (callb->arg);
 8000ff0:	6803      	ldr	r3, [r0, #0]
 8000ff2:	6840      	ldr	r0, [r0, #4]
  }
}
 8000ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
 8000ff8:	4718      	bx	r3
 8000ffa:	bd10      	pop	{r4, pc}

08000ffc <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000ffc:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8001000:	b113      	cbz	r3, 8001008 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8001002:	f06f 0005 	mvn.w	r0, #5
 8001006:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001008:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f8      	bne.n	8001002 <osKernelInitialize+0x6>
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <osKernelInitialize+0x34>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	2802      	cmp	r0, #2
 8001016:	d106      	bne.n	8001026 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001018:	f3ef 8311 	mrs	r3, BASEPRI
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f0      	bne.n	8001002 <osKernelInitialize+0x6>
      stat = osError;
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001024:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8001026:	2800      	cmp	r0, #0
 8001028:	d1fa      	bne.n	8001020 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	4770      	bx	lr
 8001030:	20000288 	.word	0x20000288

08001034 <osKernelStart>:
osStatus_t osKernelStart (void) {
 8001034:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001036:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800103a:	b113      	cbz	r3, 8001042 <osKernelStart+0xe>
    stat = osErrorISR;
 800103c:	f06f 0005 	mvn.w	r0, #5
 8001040:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001042:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8001046:	2c00      	cmp	r4, #0
 8001048:	d1f8      	bne.n	800103c <osKernelStart+0x8>
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <osKernelStart+0x3c>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	2a02      	cmp	r2, #2
 8001050:	d106      	bne.n	8001060 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001052:	f3ef 8311 	mrs	r3, BASEPRI
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <osKernelStart+0x8>
      stat = osError;
 800105a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800105e:	bd10      	pop	{r4, pc}
    if (KernelState == osKernelReady) {
 8001060:	2a01      	cmp	r2, #1
 8001062:	d1fa      	bne.n	800105a <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8001064:	2202      	movs	r2, #2
 8001066:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001068:	f001 f96e 	bl	8002348 <vTaskStartScheduler>
      stat = osOK;
 800106c:	4620      	mov	r0, r4
 800106e:	bd10      	pop	{r4, pc}
 8001070:	20000288 	.word	0x20000288

08001074 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	b087      	sub	sp, #28
 8001078:	4614      	mov	r4, r2
  hTask = NULL;
 800107a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800107c:	460b      	mov	r3, r1
  hTask = NULL;
 800107e:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001080:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8001084:	bb72      	cbnz	r2, 80010e4 <osThreadNew+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001086:	f3ef 8210 	mrs	r2, PRIMASK
 800108a:	bb5a      	cbnz	r2, 80010e4 <osThreadNew+0x70>
 800108c:	4a28      	ldr	r2, [pc, #160]	; (8001130 <osThreadNew+0xbc>)
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	2a02      	cmp	r2, #2
 8001092:	d102      	bne.n	800109a <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001094:	f3ef 8211 	mrs	r2, BASEPRI
 8001098:	bb22      	cbnz	r2, 80010e4 <osThreadNew+0x70>
 800109a:	b318      	cbz	r0, 80010e4 <osThreadNew+0x70>
    empty = '\0';
 800109c:	2200      	movs	r2, #0
 800109e:	f88d 2013 	strb.w	r2, [sp, #19]
    if (attr != NULL) {
 80010a2:	2c00      	cmp	r4, #0
 80010a4:	d03c      	beq.n	8001120 <osThreadNew+0xac>
      if (attr->name != NULL) {
 80010a6:	6821      	ldr	r1, [r4, #0]
 80010a8:	b909      	cbnz	r1, 80010ae <osThreadNew+0x3a>
    name  = &empty;
 80010aa:	f10d 0113 	add.w	r1, sp, #19
      if (attr->priority != osPriorityNone) {
 80010ae:	69a5      	ldr	r5, [r4, #24]
 80010b0:	2d00      	cmp	r5, #0
 80010b2:	bf08      	it	eq
 80010b4:	2518      	moveq	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80010b6:	1e6a      	subs	r2, r5, #1
 80010b8:	2a37      	cmp	r2, #55	; 0x37
 80010ba:	462f      	mov	r7, r5
 80010bc:	d835      	bhi.n	800112a <osThreadNew+0xb6>
 80010be:	6862      	ldr	r2, [r4, #4]
 80010c0:	07d2      	lsls	r2, r2, #31
 80010c2:	d432      	bmi.n	800112a <osThreadNew+0xb6>
      if (attr->stack_size > 0U) {
 80010c4:	6966      	ldr	r6, [r4, #20]
 80010c6:	b186      	cbz	r6, 80010ea <osThreadNew+0x76>
        stack = attr->stack_size / sizeof(StackType_t);
 80010c8:	08b2      	lsrs	r2, r6, #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80010ca:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80010ce:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80010d2:	f1be 0f00 	cmp.w	lr, #0
 80010d6:	d00a      	beq.n	80010ee <osThreadNew+0x7a>
 80010d8:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 80010dc:	d902      	bls.n	80010e4 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80010de:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80010e0:	b104      	cbz	r4, 80010e4 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80010e2:	b9ae      	cbnz	r6, 8001110 <osThreadNew+0x9c>
  return ((osThreadId_t)hTask);
 80010e4:	9805      	ldr	r0, [sp, #20]
}
 80010e6:	b007      	add	sp, #28
 80010e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	e7ed      	b.n	80010ca <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80010ee:	f1bc 0f00 	cmp.w	ip, #0
 80010f2:	d1f7      	bne.n	80010e4 <osThreadNew+0x70>
      if (mem == 0) {
 80010f4:	6924      	ldr	r4, [r4, #16]
 80010f6:	2c00      	cmp	r4, #0
 80010f8:	d1f4      	bne.n	80010e4 <osThreadNew+0x70>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80010fa:	ac05      	add	r4, sp, #20
 80010fc:	9401      	str	r4, [sp, #4]
 80010fe:	9700      	str	r7, [sp, #0]
 8001100:	b292      	uxth	r2, r2
 8001102:	f001 f8f4 	bl	80022ee <xTaskCreate>
 8001106:	2801      	cmp	r0, #1
          hTask = NULL;
 8001108:	bf1c      	itt	ne
 800110a:	2300      	movne	r3, #0
 800110c:	9305      	strne	r3, [sp, #20]
 800110e:	e7e9      	b.n	80010e4 <osThreadNew+0x70>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001110:	f8cd e008 	str.w	lr, [sp, #8]
 8001114:	9401      	str	r4, [sp, #4]
 8001116:	9500      	str	r5, [sp, #0]
 8001118:	f001 f8b2 	bl	8002280 <xTaskCreateStatic>
 800111c:	9005      	str	r0, [sp, #20]
 800111e:	e7e1      	b.n	80010e4 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8001120:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8001122:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 8001124:	f10d 0113 	add.w	r1, sp, #19
 8001128:	e7e7      	b.n	80010fa <osThreadNew+0x86>
        return (NULL);
 800112a:	2000      	movs	r0, #0
 800112c:	e7db      	b.n	80010e6 <osThreadNew+0x72>
 800112e:	bf00      	nop
 8001130:	20000288 	.word	0x20000288

08001134 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8001134:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001136:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800113a:	b113      	cbz	r3, 8001142 <osDelay+0xe>
    stat = osErrorISR;
 800113c:	f06f 0005 	mvn.w	r0, #5
 8001140:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001142:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f8      	bne.n	800113c <osDelay+0x8>
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <osDelay+0x30>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d103      	bne.n	800115a <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001152:	f3ef 8311 	mrs	r3, BASEPRI
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <osDelay+0x8>
    if (ticks != 0U) {
 800115a:	b110      	cbz	r0, 8001162 <osDelay+0x2e>
      vTaskDelay(ticks);
 800115c:	f001 fa96 	bl	800268c <vTaskDelay>
    stat = osOK;
 8001160:	2000      	movs	r0, #0
}
 8001162:	bd08      	pop	{r3, pc}
 8001164:	20000288 	.word	0x20000288

08001168 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8001168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800116a:	4606      	mov	r6, r0
 800116c:	460d      	mov	r5, r1
 800116e:	4617      	mov	r7, r2
 8001170:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001172:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8001176:	b113      	cbz	r3, 800117e <osTimerNew+0x16>
  hTimer = NULL;
 8001178:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 800117a:	b003      	add	sp, #12
 800117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800117e:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (func != NULL)) {
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f8      	bne.n	8001178 <osTimerNew+0x10>
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <osTimerNew+0x78>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d103      	bne.n	8001196 <osTimerNew+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800118e:	f3ef 8311 	mrs	r3, BASEPRI
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <osTimerNew+0x10>
 8001196:	2e00      	cmp	r6, #0
 8001198:	d0ee      	beq.n	8001178 <osTimerNew+0x10>
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800119a:	2008      	movs	r0, #8
 800119c:	f000 fab2 	bl	8001704 <pvPortMalloc>
    if (callb != NULL) {
 80011a0:	4603      	mov	r3, r0
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d0e8      	beq.n	8001178 <osTimerNew+0x10>
      if (type == osTimerOnce) {
 80011a6:	1c2a      	adds	r2, r5, #0
      callb->arg  = argument;
 80011a8:	e880 00c0 	stmia.w	r0, {r6, r7}
      if (type == osTimerOnce) {
 80011ac:	bf18      	it	ne
 80011ae:	2201      	movne	r2, #1
      if (attr != NULL) {
 80011b0:	b1a4      	cbz	r4, 80011dc <osTimerNew+0x74>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80011b2:	68a1      	ldr	r1, [r4, #8]
        if (attr->name != NULL) {
 80011b4:	6820      	ldr	r0, [r4, #0]
 80011b6:	68e4      	ldr	r4, [r4, #12]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80011b8:	b141      	cbz	r1, 80011cc <osTimerNew+0x64>
 80011ba:	2c2f      	cmp	r4, #47	; 0x2f
 80011bc:	d9dc      	bls.n	8001178 <osTimerNew+0x10>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80011be:	9101      	str	r1, [sp, #4]
 80011c0:	4908      	ldr	r1, [pc, #32]	; (80011e4 <osTimerNew+0x7c>)
 80011c2:	9100      	str	r1, [sp, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	f001 fca2 	bl	8002b0e <xTimerCreateStatic>
 80011ca:	e7d6      	b.n	800117a <osTimerNew+0x12>
        if (mem == 0) {
 80011cc:	2c00      	cmp	r4, #0
 80011ce:	d1d3      	bne.n	8001178 <osTimerNew+0x10>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80011d0:	4904      	ldr	r1, [pc, #16]	; (80011e4 <osTimerNew+0x7c>)
 80011d2:	9100      	str	r1, [sp, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	f001 fc73 	bl	8002ac0 <xTimerCreate>
  return ((osTimerId_t)hTimer);
 80011da:	e7ce      	b.n	800117a <osTimerNew+0x12>
      name = NULL;
 80011dc:	4620      	mov	r0, r4
 80011de:	e7f7      	b.n	80011d0 <osTimerNew+0x68>
 80011e0:	20000288 	.word	0x20000288
 80011e4:	08000fe9 	.word	0x08000fe9

080011e8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80011e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011ea:	460e      	mov	r6, r1
 80011ec:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80011ee:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80011f2:	b11b      	cbz	r3, 80011fc <osSemaphoreNew+0x14>
          hSemaphore = xSemaphoreCreateBinary();
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
 80011f4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80011f6:	4620      	mov	r0, r4
 80011f8:	b002      	add	sp, #8
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011fc:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f7      	bne.n	80011f4 <osSemaphoreNew+0xc>
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <osSemaphoreNew+0xac>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d103      	bne.n	8001214 <osSemaphoreNew+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800120c:	f3ef 8311 	mrs	r3, BASEPRI
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ef      	bne.n	80011f4 <osSemaphoreNew+0xc>
 8001214:	2800      	cmp	r0, #0
 8001216:	d0ed      	beq.n	80011f4 <osSemaphoreNew+0xc>
 8001218:	42b0      	cmp	r0, r6
 800121a:	d3eb      	bcc.n	80011f4 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800121c:	b17d      	cbz	r5, 800123e <osSemaphoreNew+0x56>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800121e:	68ab      	ldr	r3, [r5, #8]
 8001220:	68ea      	ldr	r2, [r5, #12]
 8001222:	b153      	cbz	r3, 800123a <osSemaphoreNew+0x52>
 8001224:	2a4f      	cmp	r2, #79	; 0x4f
 8001226:	d9e5      	bls.n	80011f4 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8001228:	2801      	cmp	r0, #1
 800122a:	d010      	beq.n	800124e <osSemaphoreNew+0x66>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800122c:	461a      	mov	r2, r3
 800122e:	4631      	mov	r1, r6
 8001230:	f000 fc6e 	bl	8001b10 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8001234:	4604      	mov	r4, r0
 8001236:	bb30      	cbnz	r0, 8001286 <osSemaphoreNew+0x9e>
 8001238:	e7dc      	b.n	80011f4 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800123a:	2a00      	cmp	r2, #0
 800123c:	d1da      	bne.n	80011f4 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800123e:	2801      	cmp	r0, #1
 8001240:	d11a      	bne.n	8001278 <osSemaphoreNew+0x90>
          hSemaphore = xSemaphoreCreateBinary();
 8001242:	2203      	movs	r2, #3
 8001244:	2100      	movs	r1, #0
 8001246:	2001      	movs	r0, #1
 8001248:	f000 fc3b 	bl	8001ac2 <xQueueGenericCreate>
 800124c:	e005      	b.n	800125a <osSemaphoreNew+0x72>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800124e:	2203      	movs	r2, #3
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	4611      	mov	r1, r2
 8001256:	f000 fbe7 	bl	8001a28 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800125a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800125c:	2800      	cmp	r0, #0
 800125e:	d0c9      	beq.n	80011f4 <osSemaphoreNew+0xc>
 8001260:	b186      	cbz	r6, 8001284 <osSemaphoreNew+0x9c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001262:	2300      	movs	r3, #0
 8001264:	461a      	mov	r2, r3
 8001266:	4619      	mov	r1, r3
 8001268:	f000 fc92 	bl	8001b90 <xQueueGenericSend>
 800126c:	2801      	cmp	r0, #1
 800126e:	d009      	beq.n	8001284 <osSemaphoreNew+0x9c>
            vSemaphoreDelete (hSemaphore);
 8001270:	4620      	mov	r0, r4
 8001272:	f000 fe6f 	bl	8001f54 <vQueueDelete>
 8001276:	e7bd      	b.n	80011f4 <osSemaphoreNew+0xc>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001278:	4631      	mov	r1, r6
 800127a:	f000 fc6b 	bl	8001b54 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800127e:	4604      	mov	r4, r0
 8001280:	2800      	cmp	r0, #0
 8001282:	d0b7      	beq.n	80011f4 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8001284:	b125      	cbz	r5, 8001290 <osSemaphoreNew+0xa8>
          name = attr->name;
 8001286:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8001288:	4620      	mov	r0, r4
 800128a:	f000 fe3d 	bl	8001f08 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800128e:	e7b2      	b.n	80011f6 <osSemaphoreNew+0xe>
          name = NULL;
 8001290:	4629      	mov	r1, r5
 8001292:	e7f9      	b.n	8001288 <osSemaphoreNew+0xa0>
 8001294:	20000288 	.word	0x20000288

08001298 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <vApplicationGetIdleTaskMemory+0x10>)
 800129a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <vApplicationGetIdleTaskMemory+0x14>)
 800129e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2000022c 	.word	0x2000022c
 80012ac:	2000002c 	.word	0x2000002c

080012b0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <vApplicationGetTimerTaskMemory+0x10>)
 80012b2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <vApplicationGetTimerTaskMemory+0x14>)
 80012b6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80012b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4770      	bx	lr
 80012c0:	2000068c 	.word	0x2000068c
 80012c4:	2000028c 	.word	0x2000028c

080012c8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012c8:	f100 0308 	add.w	r3, r0, #8
 80012cc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80012ce:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012d2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012d4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012d6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80012d8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012da:	6003      	str	r3, [r0, #0]
 80012dc:	4770      	bx	lr

080012de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	6103      	str	r3, [r0, #16]
 80012e2:	4770      	bx	lr

080012e4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80012e4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80012e6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80012f0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80012f2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80012f4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80012f6:	3301      	adds	r3, #1
 80012f8:	6003      	str	r3, [r0, #0]
 80012fa:	4770      	bx	lr

080012fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80012fc:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80012fe:	1c53      	adds	r3, r2, #1
{
 8001300:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001302:	d10a      	bne.n	800131a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001304:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800130a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800130c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800130e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001310:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001312:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001314:	3301      	adds	r3, #1
 8001316:	6003      	str	r3, [r0, #0]
 8001318:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800131a:	f100 0308 	add.w	r3, r0, #8
 800131e:	685c      	ldr	r4, [r3, #4]
 8001320:	6825      	ldr	r5, [r4, #0]
 8001322:	42aa      	cmp	r2, r5
 8001324:	d3ef      	bcc.n	8001306 <vListInsert+0xa>
 8001326:	4623      	mov	r3, r4
 8001328:	e7f9      	b.n	800131e <vListInsert+0x22>

0800132a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800132a:	6841      	ldr	r1, [r0, #4]
 800132c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800132e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001330:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001332:	6882      	ldr	r2, [r0, #8]
 8001334:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800133a:	bf08      	it	eq
 800133c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800133e:	2200      	movs	r2, #0
 8001340:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	3a01      	subs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001348:	6818      	ldr	r0, [r3, #0]
}
 800134a:	4770      	bx	lr

0800134c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800134c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <prvTaskExitError+0x3c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	d008      	beq.n	800136c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800135a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	e7fe      	b.n	800136a <prvTaskExitError+0x1e>
 800136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001370:	f383 8811 	msr	BASEPRI, r3
 8001374:	f3bf 8f6f 	isb	sy
 8001378:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800137c:	9b01      	ldr	r3, [sp, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0fc      	beq.n	800137c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001382:	b002      	add	sp, #8
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008

0800138c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <prvPortStartFirstTask+0x24>)
 800138e:	6800      	ldr	r0, [r0, #0]
 8001390:	6800      	ldr	r0, [r0, #0]
 8001392:	f380 8808 	msr	MSP, r0
 8001396:	f04f 0000 	mov.w	r0, #0
 800139a:	f380 8814 	msr	CONTROL, r0
 800139e:	b662      	cpsie	i
 80013a0:	b661      	cpsie	f
 80013a2:	f3bf 8f4f 	dsb	sy
 80013a6:	f3bf 8f6f 	isb	sy
 80013aa:	df00      	svc	0
 80013ac:	bf00      	nop
 80013ae:	0000      	.short	0x0000
 80013b0:	e000ed08 	.word	0xe000ed08

080013b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80013b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80013c4 <vPortEnableVFP+0x10>
 80013b8:	6801      	ldr	r1, [r0, #0]
 80013ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80013be:	6001      	str	r1, [r0, #0]
 80013c0:	4770      	bx	lr
 80013c2:	0000      	.short	0x0000
 80013c4:	e000ed88 	.word	0xe000ed88

080013c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80013c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <pxPortInitialiseStack+0x28>)
 80013d2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80013d6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80013da:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80013de:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80013e2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80013e6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80013ea:	3844      	subs	r0, #68	; 0x44
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	0800134d 	.word	0x0800134d
	...

08001400 <SVC_Handler>:
	__asm volatile (
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <pxCurrentTCBConst2>)
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	6808      	ldr	r0, [r1, #0]
 8001406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800140a:	f380 8809 	msr	PSP, r0
 800140e:	f3bf 8f6f 	isb	sy
 8001412:	f04f 0000 	mov.w	r0, #0
 8001416:	f380 8811 	msr	BASEPRI, r0
 800141a:	4770      	bx	lr
 800141c:	f3af 8000 	nop.w

08001420 <pxCurrentTCBConst2>:
 8001420:	20004308 	.word	0x20004308

08001424 <vPortEnterCritical>:
 8001424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001428:	f383 8811 	msr	BASEPRI, r3
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <vPortEnterCritical+0x3c>)
 8001436:	6813      	ldr	r3, [r2, #0]
 8001438:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800143a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800143c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800143e:	d10d      	bne.n	800145c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <vPortEnterCritical+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001448:	d008      	beq.n	800145c <vPortEnterCritical+0x38>
 800144a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144e:	f383 8811 	msr	BASEPRI, r3
 8001452:	f3bf 8f6f 	isb	sy
 8001456:	f3bf 8f4f 	dsb	sy
 800145a:	e7fe      	b.n	800145a <vPortEnterCritical+0x36>
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	e000ed04 	.word	0xe000ed04

08001468 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001468:	4a08      	ldr	r2, [pc, #32]	; (800148c <vPortExitCritical+0x24>)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	b943      	cbnz	r3, 8001480 <vPortExitCritical+0x18>
 800146e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001472:	f383 8811 	msr	BASEPRI, r3
 8001476:	f3bf 8f6f 	isb	sy
 800147a:	f3bf 8f4f 	dsb	sy
 800147e:	e7fe      	b.n	800147e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001480:	3b01      	subs	r3, #1
 8001482:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001484:	b90b      	cbnz	r3, 800148a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001486:	f383 8811 	msr	BASEPRI, r3
 800148a:	4770      	bx	lr
 800148c:	20000008 	.word	0x20000008

08001490 <PendSV_Handler>:
	__asm volatile
 8001490:	f3ef 8009 	mrs	r0, PSP
 8001494:	f3bf 8f6f 	isb	sy
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <pxCurrentTCBConst>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f01e 0f10 	tst.w	lr, #16
 80014a0:	bf08      	it	eq
 80014a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80014a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014aa:	6010      	str	r0, [r2, #0]
 80014ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80014b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80014b4:	f380 8811 	msr	BASEPRI, r0
 80014b8:	f3bf 8f4f 	dsb	sy
 80014bc:	f3bf 8f6f 	isb	sy
 80014c0:	f001 f908 	bl	80026d4 <vTaskSwitchContext>
 80014c4:	f04f 0000 	mov.w	r0, #0
 80014c8:	f380 8811 	msr	BASEPRI, r0
 80014cc:	bc09      	pop	{r0, r3}
 80014ce:	6819      	ldr	r1, [r3, #0]
 80014d0:	6808      	ldr	r0, [r1, #0]
 80014d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d6:	f01e 0f10 	tst.w	lr, #16
 80014da:	bf08      	it	eq
 80014dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80014e0:	f380 8809 	msr	PSP, r0
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	f3af 8000 	nop.w

080014f0 <pxCurrentTCBConst>:
 80014f0:	20004308 	.word	0x20004308

080014f4 <SysTick_Handler>:
{
 80014f4:	b508      	push	{r3, lr}
	__asm volatile
 80014f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fa:	f383 8811 	msr	BASEPRI, r3
 80014fe:	f3bf 8f6f 	isb	sy
 8001502:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001506:	f000 ff71 	bl	80023ec <xTaskIncrementTick>
 800150a:	b118      	cbz	r0, 8001514 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <SysTick_Handler+0x28>)
 800150e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001512:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001514:	2300      	movs	r3, #0
 8001516:	f383 8811 	msr	BASEPRI, r3
 800151a:	bd08      	pop	{r3, pc}
 800151c:	e000ed04 	.word	0xe000ed04

08001520 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001522:	4909      	ldr	r1, [pc, #36]	; (8001548 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001524:	2300      	movs	r3, #0
 8001526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001528:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <vPortSetupTimerInterrupt+0x2c>)
 800152c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	4906      	ldr	r1, [pc, #24]	; (8001550 <vPortSetupTimerInterrupt+0x30>)
 8001538:	3b01      	subs	r3, #1
 800153a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800153c:	2307      	movs	r3, #7
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010
 8001548:	e000e018 	.word	0xe000e018
 800154c:	2000000c 	.word	0x2000000c
 8001550:	e000e014 	.word	0xe000e014

08001554 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <xPortStartScheduler+0xe8>)
 8001556:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <xPortStartScheduler+0xec>)
{
 8001558:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800155a:	6819      	ldr	r1, [r3, #0]
 800155c:	4291      	cmp	r1, r2
 800155e:	d108      	bne.n	8001572 <xPortStartScheduler+0x1e>
	__asm volatile
 8001560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001564:	f383 8811 	msr	BASEPRI, r3
 8001568:	f3bf 8f6f 	isb	sy
 800156c:	f3bf 8f4f 	dsb	sy
 8001570:	e7fe      	b.n	8001570 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <xPortStartScheduler+0xf0>)
 8001576:	429a      	cmp	r2, r3
 8001578:	d108      	bne.n	800158c <xPortStartScheduler+0x38>
 800157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	e7fe      	b.n	800158a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800158c:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <xPortStartScheduler+0xf4>)
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001594:	22ff      	movs	r2, #255	; 0xff
 8001596:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001598:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80015a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015aa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <xPortStartScheduler+0xfc>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015b2:	2100      	movs	r1, #0
 80015b4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80015b8:	0600      	lsls	r0, r0, #24
 80015ba:	f102 34ff 	add.w	r4, r2, #4294967295
 80015be:	d40d      	bmi.n	80015dc <xPortStartScheduler+0x88>
 80015c0:	b101      	cbz	r1, 80015c4 <xPortStartScheduler+0x70>
 80015c2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2a03      	cmp	r2, #3
 80015c8:	d011      	beq.n	80015ee <xPortStartScheduler+0x9a>
 80015ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ce:	f383 8811 	msr	BASEPRI, r3
 80015d2:	f3bf 8f6f 	isb	sy
 80015d6:	f3bf 8f4f 	dsb	sy
 80015da:	e7fe      	b.n	80015da <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80015dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80015e0:	0052      	lsls	r2, r2, #1
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f88d 2003 	strb.w	r2, [sp, #3]
 80015e8:	2101      	movs	r1, #1
 80015ea:	4622      	mov	r2, r4
 80015ec:	e7e2      	b.n	80015b4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015ee:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80015f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80015f4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80015f6:	9b01      	ldr	r3, [sp, #4]
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <xPortStartScheduler+0xf4>)
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <xPortStartScheduler+0x100>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001606:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800160e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001610:	f7ff ff86 	bl	8001520 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <xPortStartScheduler+0x104>)
 8001616:	2400      	movs	r4, #0
 8001618:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800161a:	f7ff fecb 	bl	80013b4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <xPortStartScheduler+0x108>)
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001626:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001628:	f7ff feb0 	bl	800138c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800162c:	f001 f852 	bl	80026d4 <vTaskSwitchContext>
	prvTaskExitError();
 8001630:	f7ff fe8c 	bl	800134c <prvTaskExitError>
}
 8001634:	4620      	mov	r0, r4
 8001636:	b002      	add	sp, #8
 8001638:	bd10      	pop	{r4, pc}
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	410fc271 	.word	0x410fc271
 8001644:	410fc270 	.word	0x410fc270
 8001648:	e000e400 	.word	0xe000e400
 800164c:	200006e8 	.word	0x200006e8
 8001650:	200006ec 	.word	0x200006ec
 8001654:	e000ed20 	.word	0xe000ed20
 8001658:	20000008 	.word	0x20000008
 800165c:	e000ef34 	.word	0xe000ef34

08001660 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001660:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d90e      	bls.n	8001686 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <vPortValidateInterruptPriority+0x4c>)
 800166a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800166c:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <vPortValidateInterruptPriority+0x50>)
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d908      	bls.n	8001686 <vPortValidateInterruptPriority+0x26>
 8001674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	e7fe      	b.n	8001684 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <vPortValidateInterruptPriority+0x54>)
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <vPortValidateInterruptPriority+0x58>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001692:	4293      	cmp	r3, r2
 8001694:	d908      	bls.n	80016a8 <vPortValidateInterruptPriority+0x48>
 8001696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169a:	f383 8811 	msr	BASEPRI, r3
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	f3bf 8f4f 	dsb	sy
 80016a6:	e7fe      	b.n	80016a6 <vPortValidateInterruptPriority+0x46>
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e3f0 	.word	0xe000e3f0
 80016b0:	200006e8 	.word	0x200006e8
 80016b4:	e000ed0c 	.word	0xe000ed0c
 80016b8:	200006ec 	.word	0x200006ec

080016bc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80016bc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <prvInsertBlockIntoFreeList+0x40>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4282      	cmp	r2, r0
 80016c4:	d318      	bcc.n	80016f8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80016c6:	685c      	ldr	r4, [r3, #4]
 80016c8:	1919      	adds	r1, r3, r4
 80016ca:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80016cc:	bf01      	itttt	eq
 80016ce:	6841      	ldreq	r1, [r0, #4]
 80016d0:	4618      	moveq	r0, r3
 80016d2:	1909      	addeq	r1, r1, r4
 80016d4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80016d6:	6844      	ldr	r4, [r0, #4]
 80016d8:	1901      	adds	r1, r0, r4
 80016da:	428a      	cmp	r2, r1
 80016dc:	d107      	bne.n	80016ee <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <prvInsertBlockIntoFreeList+0x44>)
 80016e0:	6809      	ldr	r1, [r1, #0]
 80016e2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016e4:	bf1f      	itttt	ne
 80016e6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80016e8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016ea:	1909      	addne	r1, r1, r4
 80016ec:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80016ee:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80016f0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80016f2:	bf18      	it	ne
 80016f4:	6018      	strne	r0, [r3, #0]
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	4613      	mov	r3, r2
 80016fa:	e7e1      	b.n	80016c0 <prvInsertBlockIntoFreeList+0x4>
 80016fc:	20004300 	.word	0x20004300
 8001700:	200006f0 	.word	0x200006f0

08001704 <pvPortMalloc>:
{
 8001704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001708:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800170a:	f000 fe61 	bl	80023d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800170e:	493e      	ldr	r1, [pc, #248]	; (8001808 <pvPortMalloc+0x104>)
 8001710:	4d3e      	ldr	r5, [pc, #248]	; (800180c <pvPortMalloc+0x108>)
 8001712:	680b      	ldr	r3, [r1, #0]
 8001714:	bb0b      	cbnz	r3, 800175a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001716:	4a3e      	ldr	r2, [pc, #248]	; (8001810 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001718:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800171a:	bf1f      	itttt	ne
 800171c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800171e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001722:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001726:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001728:	bf14      	ite	ne
 800172a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800172c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001730:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001732:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001734:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001738:	4e36      	ldr	r6, [pc, #216]	; (8001814 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800173a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800173c:	2000      	movs	r0, #0
 800173e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001740:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001742:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001744:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001746:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001748:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800174a:	4b33      	ldr	r3, [pc, #204]	; (8001818 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800174c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800174e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <pvPortMalloc+0x118>)
 8001752:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001758:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800175a:	682f      	ldr	r7, [r5, #0]
 800175c:	4227      	tst	r7, r4
 800175e:	d116      	bne.n	800178e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001760:	2c00      	cmp	r4, #0
 8001762:	d041      	beq.n	80017e8 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001764:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001768:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800176a:	bf1c      	itt	ne
 800176c:	f023 0307 	bicne.w	r3, r3, #7
 8001770:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001772:	b163      	cbz	r3, 800178e <pvPortMalloc+0x8a>
 8001774:	4a29      	ldr	r2, [pc, #164]	; (800181c <pvPortMalloc+0x118>)
 8001776:	6816      	ldr	r6, [r2, #0]
 8001778:	42b3      	cmp	r3, r6
 800177a:	4690      	mov	r8, r2
 800177c:	d807      	bhi.n	800178e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800177e:	4a25      	ldr	r2, [pc, #148]	; (8001814 <pvPortMalloc+0x110>)
 8001780:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001782:	6868      	ldr	r0, [r5, #4]
 8001784:	4283      	cmp	r3, r0
 8001786:	d804      	bhi.n	8001792 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001788:	6809      	ldr	r1, [r1, #0]
 800178a:	428d      	cmp	r5, r1
 800178c:	d107      	bne.n	800179e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800178e:	2400      	movs	r4, #0
 8001790:	e02a      	b.n	80017e8 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001792:	682c      	ldr	r4, [r5, #0]
 8001794:	2c00      	cmp	r4, #0
 8001796:	d0f7      	beq.n	8001788 <pvPortMalloc+0x84>
 8001798:	462a      	mov	r2, r5
 800179a:	4625      	mov	r5, r4
 800179c:	e7f1      	b.n	8001782 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800179e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017a0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017a2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017a4:	1ac2      	subs	r2, r0, r3
 80017a6:	2a10      	cmp	r2, #16
 80017a8:	d90f      	bls.n	80017ca <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017aa:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ac:	0741      	lsls	r1, r0, #29
 80017ae:	d008      	beq.n	80017c2 <pvPortMalloc+0xbe>
 80017b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b4:	f383 8811 	msr	BASEPRI, r3
 80017b8:	f3bf 8f6f 	isb	sy
 80017bc:	f3bf 8f4f 	dsb	sy
 80017c0:	e7fe      	b.n	80017c0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80017c2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80017c4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80017c6:	f7ff ff79 	bl	80016bc <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017ca:	4913      	ldr	r1, [pc, #76]	; (8001818 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017cc:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017ce:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017d0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017d2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017d4:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80017d6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017da:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80017de:	bf38      	it	cc
 80017e0:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017e2:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017e4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80017e6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80017e8:	f000 fe90 	bl	800250c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ec:	0763      	lsls	r3, r4, #29
 80017ee:	d008      	beq.n	8001802 <pvPortMalloc+0xfe>
 80017f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	e7fe      	b.n	8001800 <pvPortMalloc+0xfc>
}
 8001802:	4620      	mov	r0, r4
 8001804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001808:	200006f0 	.word	0x200006f0
 800180c:	200042f4 	.word	0x200042f4
 8001810:	200006f4 	.word	0x200006f4
 8001814:	20004300 	.word	0x20004300
 8001818:	200042fc 	.word	0x200042fc
 800181c:	200042f8 	.word	0x200042f8

08001820 <vPortFree>:
{
 8001820:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001822:	4604      	mov	r4, r0
 8001824:	b370      	cbz	r0, 8001884 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <vPortFree+0x68>)
 8001828:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	4213      	tst	r3, r2
 8001830:	d108      	bne.n	8001844 <vPortFree+0x24>
 8001832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001836:	f383 8811 	msr	BASEPRI, r3
 800183a:	f3bf 8f6f 	isb	sy
 800183e:	f3bf 8f4f 	dsb	sy
 8001842:	e7fe      	b.n	8001842 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001844:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001848:	b141      	cbz	r1, 800185c <vPortFree+0x3c>
 800184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184e:	f383 8811 	msr	BASEPRI, r3
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	e7fe      	b.n	800185a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800185c:	ea23 0302 	bic.w	r3, r3, r2
 8001860:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001864:	f000 fdb4 	bl	80023d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001868:	4a08      	ldr	r2, [pc, #32]	; (800188c <vPortFree+0x6c>)
 800186a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800186e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001870:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001874:	440b      	add	r3, r1
 8001876:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001878:	f7ff ff20 	bl	80016bc <prvInsertBlockIntoFreeList>
}
 800187c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001880:	f000 be44 	b.w	800250c <xTaskResumeAll>
 8001884:	bd10      	pop	{r4, pc}
 8001886:	bf00      	nop
 8001888:	200042f4 	.word	0x200042f4
 800188c:	200042f8 	.word	0x200042f8

08001890 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001894:	f7ff fdc6 	bl	8001424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001898:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800189a:	f7ff fde5 	bl	8001468 <vPortExitCritical>

	return xReturn;
}
 800189e:	fab4 f084 	clz	r0, r4
 80018a2:	0940      	lsrs	r0, r0, #5
 80018a4:	bd10      	pop	{r4, pc}

080018a6 <prvCopyDataToQueue>:
{
 80018a6:	b570      	push	{r4, r5, r6, lr}
 80018a8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80018ae:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018b0:	b942      	cbnz	r2, 80018c4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018b2:	6805      	ldr	r5, [r0, #0]
 80018b4:	b99d      	cbnz	r5, 80018de <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80018b6:	6840      	ldr	r0, [r0, #4]
 80018b8:	f001 f83a 	bl	8002930 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80018bc:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018be:	3601      	adds	r6, #1
 80018c0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80018c4:	b96d      	cbnz	r5, 80018e2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80018c6:	6880      	ldr	r0, [r0, #8]
 80018c8:	f001 fcee 	bl	80032a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80018cc:	68a3      	ldr	r3, [r4, #8]
 80018ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018d0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018d2:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80018d4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d301      	bcc.n	80018de <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80018de:	2000      	movs	r0, #0
 80018e0:	e7ed      	b.n	80018be <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018e2:	68c0      	ldr	r0, [r0, #12]
 80018e4:	f001 fce0 	bl	80032a8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80018e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ea:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018ec:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80018ee:	425b      	negs	r3, r3
 80018f0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018f2:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80018f4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80018f6:	bf3e      	ittt	cc
 80018f8:	6862      	ldrcc	r2, [r4, #4]
 80018fa:	189b      	addcc	r3, r3, r2
 80018fc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80018fe:	2d02      	cmp	r5, #2
 8001900:	d1ed      	bne.n	80018de <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001902:	b10e      	cbz	r6, 8001908 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001904:	3e01      	subs	r6, #1
 8001906:	e7ea      	b.n	80018de <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001908:	4630      	mov	r0, r6
 800190a:	e7d8      	b.n	80018be <prvCopyDataToQueue+0x18>

0800190c <prvCopyDataFromQueue>:
{
 800190c:	4603      	mov	r3, r0
 800190e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001912:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001914:	b162      	cbz	r2, 8001930 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001916:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001918:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800191a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800191c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800191e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001920:	bf24      	itt	cs
 8001922:	6819      	ldrcs	r1, [r3, #0]
 8001924:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001926:	68d9      	ldr	r1, [r3, #12]
}
 8001928:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800192c:	f001 bcbc 	b.w	80032a8 <memcpy>
}
 8001930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001934:	4770      	bx	lr

08001936 <prvUnlockQueue>:
{
 8001936:	b570      	push	{r4, r5, r6, lr}
 8001938:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800193a:	f7ff fd73 	bl	8001424 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800193e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001942:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001946:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001948:	2d00      	cmp	r5, #0
 800194a:	dc14      	bgt.n	8001976 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800194c:	23ff      	movs	r3, #255	; 0xff
 800194e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001952:	f7ff fd89 	bl	8001468 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001956:	f7ff fd65 	bl	8001424 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800195a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800195e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001962:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001964:	2d00      	cmp	r5, #0
 8001966:	dc12      	bgt.n	800198e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8001968:	23ff      	movs	r3, #255	; 0xff
 800196a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800196e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001972:	f7ff bd79 	b.w	8001468 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0e7      	beq.n	800194c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800197c:	4630      	mov	r0, r6
 800197e:	f000 ff1d 	bl	80027bc <xTaskRemoveFromEventList>
 8001982:	b108      	cbz	r0, 8001988 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001984:	f000 ffbe 	bl	8002904 <vTaskMissedYield>
 8001988:	3d01      	subs	r5, #1
 800198a:	b26d      	sxtb	r5, r5
 800198c:	e7dc      	b.n	8001948 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800198e:	6923      	ldr	r3, [r4, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0e9      	beq.n	8001968 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001994:	4630      	mov	r0, r6
 8001996:	f000 ff11 	bl	80027bc <xTaskRemoveFromEventList>
 800199a:	b108      	cbz	r0, 80019a0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800199c:	f000 ffb2 	bl	8002904 <vTaskMissedYield>
 80019a0:	3d01      	subs	r5, #1
 80019a2:	b26d      	sxtb	r5, r5
 80019a4:	e7de      	b.n	8001964 <prvUnlockQueue+0x2e>
	...

080019a8 <xQueueGenericReset>:
{
 80019a8:	b538      	push	{r3, r4, r5, lr}
 80019aa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80019ac:	4604      	mov	r4, r0
 80019ae:	b940      	cbnz	r0, 80019c2 <xQueueGenericReset+0x1a>
 80019b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b4:	f383 8811 	msr	BASEPRI, r3
 80019b8:	f3bf 8f6f 	isb	sy
 80019bc:	f3bf 8f4f 	dsb	sy
 80019c0:	e7fe      	b.n	80019c0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80019c2:	f7ff fd2f 	bl	8001424 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80019c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019ca:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019cc:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019ce:	4343      	muls	r3, r0
 80019d0:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80019d2:	1a1b      	subs	r3, r3, r0
 80019d4:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019d6:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80019d8:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019da:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80019dc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019de:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80019e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80019e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80019e8:	b995      	cbnz	r5, 8001a10 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019ea:	6923      	ldr	r3, [r4, #16]
 80019ec:	b163      	cbz	r3, 8001a08 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019ee:	f104 0010 	add.w	r0, r4, #16
 80019f2:	f000 fee3 	bl	80027bc <xTaskRemoveFromEventList>
 80019f6:	b138      	cbz	r0, 8001a08 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <xQueueGenericReset+0x7c>)
 80019fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001a08:	f7ff fd2e 	bl	8001468 <vPortExitCritical>
}
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a10:	f104 0010 	add.w	r0, r4, #16
 8001a14:	f7ff fc58 	bl	80012c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a1c:	f7ff fc54 	bl	80012c8 <vListInitialise>
 8001a20:	e7f2      	b.n	8001a08 <xQueueGenericReset+0x60>
 8001a22:	bf00      	nop
 8001a24:	e000ed04 	.word	0xe000ed04

08001a28 <xQueueGenericCreateStatic>:
	{
 8001a28:	b513      	push	{r0, r1, r4, lr}
 8001a2a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a2c:	b940      	cbnz	r0, 8001a40 <xQueueGenericCreateStatic+0x18>
 8001a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a32:	f383 8811 	msr	BASEPRI, r3
 8001a36:	f3bf 8f6f 	isb	sy
 8001a3a:	f3bf 8f4f 	dsb	sy
 8001a3e:	e7fe      	b.n	8001a3e <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8001a40:	b943      	cbnz	r3, 8001a54 <xQueueGenericCreateStatic+0x2c>
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	e7fe      	b.n	8001a52 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001a54:	b14a      	cbz	r2, 8001a6a <xQueueGenericCreateStatic+0x42>
 8001a56:	b9d9      	cbnz	r1, 8001a90 <xQueueGenericCreateStatic+0x68>
 8001a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	e7fe      	b.n	8001a68 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a6a:	b189      	cbz	r1, 8001a90 <xQueueGenericCreateStatic+0x68>
 8001a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	e7fe      	b.n	8001a7c <xQueueGenericCreateStatic+0x54>
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	e7fe      	b.n	8001a8e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001a90:	2350      	movs	r3, #80	; 0x50
 8001a92:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001a94:	9b01      	ldr	r3, [sp, #4]
 8001a96:	2b50      	cmp	r3, #80	; 0x50
 8001a98:	d1f1      	bne.n	8001a7e <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001a9a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a9c:	2900      	cmp	r1, #0
 8001a9e:	bf08      	it	eq
 8001aa0:	4622      	moveq	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001aa2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8001aa6:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001aa8:	6421      	str	r1, [r4, #64]	; 0x40
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001aaa:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001aac:	4619      	mov	r1, r3
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff ff7a 	bl	80019a8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001ab4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001ab8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8001abc:	4620      	mov	r0, r4
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd10      	pop	{r4, pc}

08001ac2 <xQueueGenericCreate>:
	{
 8001ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac4:	460d      	mov	r5, r1
 8001ac6:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ac8:	4606      	mov	r6, r0
 8001aca:	b940      	cbnz	r0, 8001ade <xQueueGenericCreate+0x1c>
 8001acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad0:	f383 8811 	msr	BASEPRI, r3
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	e7fe      	b.n	8001adc <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ade:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001ae0:	3050      	adds	r0, #80	; 0x50
 8001ae2:	f7ff fe0f 	bl	8001704 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	b160      	cbz	r0, 8001b04 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001af0:	b955      	cbnz	r5, 8001b08 <xQueueGenericCreate+0x46>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001af2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001af4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001af6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001af8:	2101      	movs	r1, #1
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff ff54 	bl	80019a8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001b00:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8001b04:	4620      	mov	r0, r4
 8001b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001b08:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b0c:	6003      	str	r3, [r0, #0]
 8001b0e:	e7f1      	b.n	8001af4 <xQueueGenericCreate+0x32>

08001b10 <xQueueCreateCountingSemaphoreStatic>:
	{
 8001b10:	b513      	push	{r0, r1, r4, lr}
 8001b12:	4613      	mov	r3, r2
 8001b14:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8001b16:	b940      	cbnz	r0, 8001b2a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8001b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1c:	f383 8811 	msr	BASEPRI, r3
 8001b20:	f3bf 8f6f 	isb	sy
 8001b24:	f3bf 8f4f 	dsb	sy
 8001b28:	e7fe      	b.n	8001b28 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001b2a:	4288      	cmp	r0, r1
 8001b2c:	d208      	bcs.n	8001b40 <xQueueCreateCountingSemaphoreStatic+0x30>
 8001b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b32:	f383 8811 	msr	BASEPRI, r3
 8001b36:	f3bf 8f6f 	isb	sy
 8001b3a:	f3bf 8f4f 	dsb	sy
 8001b3e:	e7fe      	b.n	8001b3e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001b40:	2202      	movs	r2, #2
 8001b42:	9200      	str	r2, [sp, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	4611      	mov	r1, r2
 8001b48:	f7ff ff6e 	bl	8001a28 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8001b4c:	b100      	cbz	r0, 8001b50 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001b4e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8001b50:	b002      	add	sp, #8
 8001b52:	bd10      	pop	{r4, pc}

08001b54 <xQueueCreateCountingSemaphore>:
	{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8001b58:	b940      	cbnz	r0, 8001b6c <xQueueCreateCountingSemaphore+0x18>
 8001b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	e7fe      	b.n	8001b6a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001b6c:	4288      	cmp	r0, r1
 8001b6e:	d208      	bcs.n	8001b82 <xQueueCreateCountingSemaphore+0x2e>
 8001b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	e7fe      	b.n	8001b80 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001b82:	2202      	movs	r2, #2
 8001b84:	2100      	movs	r1, #0
 8001b86:	f7ff ff9c 	bl	8001ac2 <xQueueGenericCreate>
		if( xHandle != NULL )
 8001b8a:	b100      	cbz	r0, 8001b8e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001b8c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8001b8e:	bd10      	pop	{r4, pc}

08001b90 <xQueueGenericSend>:
{
 8001b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b94:	4689      	mov	r9, r1
 8001b96:	9201      	str	r2, [sp, #4]
 8001b98:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	b940      	cbnz	r0, 8001bb0 <xQueueGenericSend+0x20>
 8001b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba2:	f383 8811 	msr	BASEPRI, r3
 8001ba6:	f3bf 8f6f 	isb	sy
 8001baa:	f3bf 8f4f 	dsb	sy
 8001bae:	e7fe      	b.n	8001bae <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	f040 8088 	bne.w	8001cc6 <xQueueGenericSend+0x136>
 8001bb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8084 	beq.w	8001cc6 <xQueueGenericSend+0x136>
 8001bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	e7fe      	b.n	8001bce <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bd0:	9e01      	ldr	r6, [sp, #4]
 8001bd2:	2e00      	cmp	r6, #0
 8001bd4:	f000 8082 	beq.w	8001cdc <xQueueGenericSend+0x14c>
 8001bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bdc:	f383 8811 	msr	BASEPRI, r3
 8001be0:	f3bf 8f6f 	isb	sy
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	e7fe      	b.n	8001be8 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001bea:	9d01      	ldr	r5, [sp, #4]
 8001bec:	b91d      	cbnz	r5, 8001bf6 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8001bee:	f7ff fc3b 	bl	8001468 <vPortExitCritical>
			return errQUEUE_FULL;
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	e058      	b.n	8001ca8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001bf6:	b916      	cbnz	r6, 8001bfe <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001bf8:	a802      	add	r0, sp, #8
 8001bfa:	f000 fe3b 	bl	8002874 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001bfe:	f7ff fc33 	bl	8001468 <vPortExitCritical>
		vTaskSuspendAll();
 8001c02:	f000 fbe5 	bl	80023d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c06:	f7ff fc0d 	bl	8001424 <vPortEnterCritical>
 8001c0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	bf08      	it	eq
 8001c12:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001c16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	bf08      	it	eq
 8001c1e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001c22:	f7ff fc21 	bl	8001468 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c26:	a901      	add	r1, sp, #4
 8001c28:	a802      	add	r0, sp, #8
 8001c2a:	f000 fe2f 	bl	800288c <xTaskCheckForTimeOut>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d143      	bne.n	8001cba <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001c32:	f7ff fbf7 	bl	8001424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c36:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001c38:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001c3a:	f7ff fc15 	bl	8001468 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001c3e:	42ae      	cmp	r6, r5
 8001c40:	d135      	bne.n	8001cae <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c42:	9901      	ldr	r1, [sp, #4]
 8001c44:	f104 0010 	add.w	r0, r4, #16
 8001c48:	f000 fd80 	bl	800274c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7ff fe72 	bl	8001936 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c52:	f000 fc5b 	bl	800250c <xTaskResumeAll>
 8001c56:	b938      	cbnz	r0, 8001c68 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c5c:	f8ca 3000 	str.w	r3, [sl]
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001c6a:	f7ff fbdb 	bl	8001424 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d301      	bcc.n	8001c7a <xQueueGenericSend+0xea>
 8001c76:	2f02      	cmp	r7, #2
 8001c78:	d1b7      	bne.n	8001bea <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c7a:	463a      	mov	r2, r7
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f7ff fe11 	bl	80018a6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c86:	b11b      	cbz	r3, 8001c90 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c8c:	f000 fd96 	bl	80027bc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001c90:	b138      	cbz	r0, 8001ca2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <xQueueGenericSend+0x168>)
 8001c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001ca2:	f7ff fbe1 	bl	8001468 <vPortExitCritical>
				return pdPASS;
 8001ca6:	2001      	movs	r0, #1
}
 8001ca8:	b004      	add	sp, #16
 8001caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7ff fe41 	bl	8001936 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001cb4:	f000 fc2a 	bl	800250c <xTaskResumeAll>
 8001cb8:	e7d6      	b.n	8001c68 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fe3b 	bl	8001936 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cc0:	f000 fc24 	bl	800250c <xTaskResumeAll>
 8001cc4:	e795      	b.n	8001bf2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001cc6:	2f02      	cmp	r7, #2
 8001cc8:	d102      	bne.n	8001cd0 <xQueueGenericSend+0x140>
 8001cca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10a      	bne.n	8001ce6 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cd0:	f000 fe1e 	bl	8002910 <xTaskGetSchedulerState>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	f43f af7b 	beq.w	8001bd0 <xQueueGenericSend+0x40>
 8001cda:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001cdc:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001ce0:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001cf8 <xQueueGenericSend+0x168>
 8001ce4:	e7c1      	b.n	8001c6a <xQueueGenericSend+0xda>
 8001ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cea:	f383 8811 	msr	BASEPRI, r3
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	e7fe      	b.n	8001cf6 <xQueueGenericSend+0x166>
 8001cf8:	e000ed04 	.word	0xe000ed04

08001cfc <xQueueGenericSendFromISR>:
{
 8001cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d00:	4688      	mov	r8, r1
 8001d02:	4691      	mov	r9, r2
 8001d04:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001d06:	4604      	mov	r4, r0
 8001d08:	b940      	cbnz	r0, 8001d1c <xQueueGenericSendFromISR+0x20>
 8001d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0e:	f383 8811 	msr	BASEPRI, r3
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	f3bf 8f4f 	dsb	sy
 8001d1a:	e7fe      	b.n	8001d1a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d1c:	bb09      	cbnz	r1, 8001d62 <xQueueGenericSendFromISR+0x66>
 8001d1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d20:	b1fb      	cbz	r3, 8001d62 <xQueueGenericSendFromISR+0x66>
 8001d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f3bf 8f4f 	dsb	sy
 8001d32:	e7fe      	b.n	8001d32 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d38:	f000 fd40 	bl	80027bc <xTaskRemoveFromEventList>
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d034      	beq.n	8001daa <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8001d40:	f1b9 0f00 	cmp.w	r9, #0
 8001d44:	d031      	beq.n	8001daa <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001d46:	2001      	movs	r0, #1
 8001d48:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8001d4c:	f386 8811 	msr	BASEPRI, r6
}
 8001d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001d54:	3501      	adds	r5, #1
 8001d56:	b26d      	sxtb	r5, r5
 8001d58:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8001d5c:	e025      	b.n	8001daa <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e7f4      	b.n	8001d4c <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d62:	2f02      	cmp	r7, #2
 8001d64:	d102      	bne.n	8001d6c <xQueueGenericSendFromISR+0x70>
 8001d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d120      	bne.n	8001dae <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d6c:	f7ff fc78 	bl	8001660 <vPortValidateInterruptPriority>
	__asm volatile
 8001d70:	f3ef 8611 	mrs	r6, BASEPRI
 8001d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d301      	bcc.n	8001d90 <xQueueGenericSendFromISR+0x94>
 8001d8c:	2f02      	cmp	r7, #2
 8001d8e:	d1e6      	bne.n	8001d5e <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001d90:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d94:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8001d96:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d98:	4641      	mov	r1, r8
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff fd83 	bl	80018a6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001da0:	1c6b      	adds	r3, r5, #1
 8001da2:	d1d7      	bne.n	8001d54 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1c4      	bne.n	8001d34 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8001daa:	2001      	movs	r0, #1
 8001dac:	e7ce      	b.n	8001d4c <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	e7fe      	b.n	8001dbe <xQueueGenericSendFromISR+0xc2>

08001dc0 <xQueueReceive>:
{
 8001dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	4688      	mov	r8, r1
 8001dc8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001dca:	4604      	mov	r4, r0
 8001dcc:	b940      	cbnz	r0, 8001de0 <xQueueReceive+0x20>
 8001dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd2:	f383 8811 	msr	BASEPRI, r3
 8001dd6:	f3bf 8f6f 	isb	sy
 8001dda:	f3bf 8f4f 	dsb	sy
 8001dde:	e7fe      	b.n	8001dde <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001de0:	2900      	cmp	r1, #0
 8001de2:	f040 8086 	bne.w	8001ef2 <xQueueReceive+0x132>
 8001de6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8082 	beq.w	8001ef2 <xQueueReceive+0x132>
 8001dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df2:	f383 8811 	msr	BASEPRI, r3
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	e7fe      	b.n	8001dfe <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e00:	9e01      	ldr	r6, [sp, #4]
 8001e02:	2e00      	cmp	r6, #0
 8001e04:	d07a      	beq.n	8001efc <xQueueReceive+0x13c>
 8001e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0a:	f383 8811 	msr	BASEPRI, r3
 8001e0e:	f3bf 8f6f 	isb	sy
 8001e12:	f3bf 8f4f 	dsb	sy
 8001e16:	e7fe      	b.n	8001e16 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e18:	9d01      	ldr	r5, [sp, #4]
 8001e1a:	b91d      	cbnz	r5, 8001e24 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8001e1c:	f7ff fb24 	bl	8001468 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001e20:	2000      	movs	r0, #0
 8001e22:	e052      	b.n	8001eca <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8001e24:	b916      	cbnz	r6, 8001e2c <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e26:	a802      	add	r0, sp, #8
 8001e28:	f000 fd24 	bl	8002874 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001e2c:	f7ff fb1c 	bl	8001468 <vPortExitCritical>
		vTaskSuspendAll();
 8001e30:	f000 face 	bl	80023d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e34:	f7ff faf6 	bl	8001424 <vPortEnterCritical>
 8001e38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001e3c:	2bff      	cmp	r3, #255	; 0xff
 8001e3e:	bf08      	it	eq
 8001e40:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001e44:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001e48:	2bff      	cmp	r3, #255	; 0xff
 8001e4a:	bf08      	it	eq
 8001e4c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001e50:	f7ff fb0a 	bl	8001468 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e54:	a901      	add	r1, sp, #4
 8001e56:	a802      	add	r0, sp, #8
 8001e58:	f000 fd18 	bl	800288c <xTaskCheckForTimeOut>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d13d      	bne.n	8001edc <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff fd15 	bl	8001890 <prvIsQueueEmpty>
 8001e66:	b398      	cbz	r0, 8001ed0 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e68:	9901      	ldr	r1, [sp, #4]
 8001e6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e6e:	f000 fc6d 	bl	800274c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff fd5f 	bl	8001936 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001e78:	f000 fb48 	bl	800250c <xTaskResumeAll>
 8001e7c:	b938      	cbnz	r0, 8001e8e <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8001e7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e82:	f8c9 3000 	str.w	r3, [r9]
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001e90:	f7ff fac8 	bl	8001424 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e94:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e96:	2d00      	cmp	r5, #0
 8001e98:	d0be      	beq.n	8001e18 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e9a:	4641      	mov	r1, r8
 8001e9c:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001e9e:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ea0:	f7ff fd34 	bl	800190c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ea4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ea6:	6923      	ldr	r3, [r4, #16]
 8001ea8:	b163      	cbz	r3, 8001ec4 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001eaa:	f104 0010 	add.w	r0, r4, #16
 8001eae:	f000 fc85 	bl	80027bc <xTaskRemoveFromEventList>
 8001eb2:	b138      	cbz	r0, 8001ec4 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <xQueueReceive+0x144>)
 8001eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001ec4:	f7ff fad0 	bl	8001468 <vPortExitCritical>
				return pdPASS;
 8001ec8:	2001      	movs	r0, #1
}
 8001eca:	b005      	add	sp, #20
 8001ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fd30 	bl	8001936 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ed6:	f000 fb19 	bl	800250c <xTaskResumeAll>
 8001eda:	e7d8      	b.n	8001e8e <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8001edc:	4620      	mov	r0, r4
 8001ede:	f7ff fd2a 	bl	8001936 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ee2:	f000 fb13 	bl	800250c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff fcd2 	bl	8001890 <prvIsQueueEmpty>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d0ce      	beq.n	8001e8e <xQueueReceive+0xce>
 8001ef0:	e796      	b.n	8001e20 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ef2:	f000 fd0d 	bl	8002910 <xTaskGetSchedulerState>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d082      	beq.n	8001e00 <xQueueReceive+0x40>
 8001efa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001efc:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001efe:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8001f04 <xQueueReceive+0x144>
 8001f02:	e7c5      	b.n	8001e90 <xQueueReceive+0xd0>
 8001f04:	e000ed04 	.word	0xe000ed04

08001f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f08:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001f0a:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f0c:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001f0e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8001f12:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8001f16:	b91d      	cbnz	r5, 8001f20 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001f18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001f1c:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001f1e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f20:	3301      	adds	r3, #1
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d1f3      	bne.n	8001f0e <vQueueAddToRegistry+0x6>
 8001f26:	bd30      	pop	{r4, r5, pc}
 8001f28:	20004934 	.word	0x20004934

08001f2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8001f2c:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f30:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001f32:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001f36:	684c      	ldr	r4, [r1, #4]
 8001f38:	4284      	cmp	r4, r0
 8001f3a:	d104      	bne.n	8001f46 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001f42:	6048      	str	r0, [r1, #4]
				break;
 8001f44:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f46:	3301      	adds	r3, #1
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d1f2      	bne.n	8001f32 <vQueueUnregisterQueue+0x6>
 8001f4c:	bd10      	pop	{r4, pc}
 8001f4e:	bf00      	nop
 8001f50:	20004934 	.word	0x20004934

08001f54 <vQueueDelete>:
{
 8001f54:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8001f56:	4604      	mov	r4, r0
 8001f58:	b940      	cbnz	r0, 8001f6c <vQueueDelete+0x18>
 8001f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5e:	f383 8811 	msr	BASEPRI, r3
 8001f62:	f3bf 8f6f 	isb	sy
 8001f66:	f3bf 8f4f 	dsb	sy
 8001f6a:	e7fe      	b.n	8001f6a <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8001f6c:	f7ff ffde 	bl	8001f2c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8001f70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001f74:	b923      	cbnz	r3, 8001f80 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8001f76:	4620      	mov	r0, r4
}
 8001f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8001f7c:	f7ff bc50 	b.w	8001820 <vPortFree>
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f82:	b570      	push	{r4, r5, r6, lr}
 8001f84:	4604      	mov	r4, r0
 8001f86:	460d      	mov	r5, r1
 8001f88:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001f8a:	f7ff fa4b 	bl	8001424 <vPortEnterCritical>
 8001f8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	bf04      	itt	eq
 8001f96:	2300      	moveq	r3, #0
 8001f98:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8001f9c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001fa0:	2bff      	cmp	r3, #255	; 0xff
 8001fa2:	bf04      	itt	eq
 8001fa4:	2300      	moveq	r3, #0
 8001fa6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8001faa:	f7ff fa5d 	bl	8001468 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001fae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fb0:	b92b      	cbnz	r3, 8001fbe <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001fb2:	4632      	mov	r2, r6
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001fba:	f000 fbe1 	bl	8002780 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001fbe:	4620      	mov	r0, r4
	}
 8001fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8001fc4:	f7ff bcb7 	b.w	8001936 <prvUnlockQueue>

08001fc8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fcc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001fce:	f7ff fa29 	bl	8001424 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8001fd4:	4d2e      	ldr	r5, [pc, #184]	; (8002090 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4f2e      	ldr	r7, [pc, #184]	; (8002094 <prvAddNewTaskToReadyList+0xcc>)
 8001fda:	3201      	adds	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001fde:	682e      	ldr	r6, [r5, #0]
 8001fe0:	2e00      	cmp	r6, #0
 8001fe2:	d147      	bne.n	8002074 <prvAddNewTaskToReadyList+0xac>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001fe4:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d11d      	bne.n	8002028 <prvAddNewTaskToReadyList+0x60>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fec:	19b8      	adds	r0, r7, r6
 8001fee:	3614      	adds	r6, #20
 8001ff0:	f7ff f96a 	bl	80012c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ff4:	f5b6 6f8c 	cmp.w	r6, #1120	; 0x460
 8001ff8:	d1f8      	bne.n	8001fec <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ffa:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80020c0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8001ffe:	4e26      	ldr	r6, [pc, #152]	; (8002098 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8002000:	4640      	mov	r0, r8
 8002002:	f7ff f961 	bl	80012c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002006:	4630      	mov	r0, r6
 8002008:	f7ff f95e 	bl	80012c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800200c:	4823      	ldr	r0, [pc, #140]	; (800209c <prvAddNewTaskToReadyList+0xd4>)
 800200e:	f7ff f95b 	bl	80012c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002012:	4823      	ldr	r0, [pc, #140]	; (80020a0 <prvAddNewTaskToReadyList+0xd8>)
 8002014:	f7ff f958 	bl	80012c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002018:	4822      	ldr	r0, [pc, #136]	; (80020a4 <prvAddNewTaskToReadyList+0xdc>)
 800201a:	f7ff f955 	bl	80012c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <prvAddNewTaskToReadyList+0xe0>)
 8002020:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002024:	4b21      	ldr	r3, [pc, #132]	; (80020ac <prvAddNewTaskToReadyList+0xe4>)
 8002026:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8002028:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <prvAddNewTaskToReadyList+0xe8>)
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002030:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002032:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002038:	2014      	movs	r0, #20
 800203a:	428b      	cmp	r3, r1
 800203c:	fb00 7003 	mla	r0, r0, r3, r7
 8002040:	f104 0104 	add.w	r1, r4, #4
 8002044:	bf88      	it	hi
 8002046:	6013      	strhi	r3, [r2, #0]
 8002048:	f7ff f94c 	bl	80012e4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800204c:	f7ff fa0c 	bl	8001468 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <prvAddNewTaskToReadyList+0xf0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b163      	cbz	r3, 8002070 <prvAddNewTaskToReadyList+0xa8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002056:	682b      	ldr	r3, [r5, #0]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <prvAddNewTaskToReadyList+0xa8>
			taskYIELD_IF_USING_PREEMPTION();
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <prvAddNewTaskToReadyList+0xf4>)
 8002062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <prvAddNewTaskToReadyList+0xf0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1d5      	bne.n	8002028 <prvAddNewTaskToReadyList+0x60>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002082:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002084:	bf98      	it	ls
 8002086:	602c      	strls	r4, [r5, #0]
 8002088:	e7ce      	b.n	8002028 <prvAddNewTaskToReadyList+0x60>
 800208a:	bf00      	nop
 800208c:	20004774 	.word	0x20004774
 8002090:	20004308 	.word	0x20004308
 8002094:	20004314 	.word	0x20004314
 8002098:	200047a0 	.word	0x200047a0
 800209c:	200047bc 	.word	0x200047bc
 80020a0:	200047e8 	.word	0x200047e8
 80020a4:	200047d4 	.word	0x200047d4
 80020a8:	2000430c 	.word	0x2000430c
 80020ac:	20004310 	.word	0x20004310
 80020b0:	20004784 	.word	0x20004784
 80020b4:	20004788 	.word	0x20004788
 80020b8:	200047d0 	.word	0x200047d0
 80020bc:	e000ed04 	.word	0xe000ed04
 80020c0:	2000478c 	.word	0x2000478c

080020c4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <prvResetNextTaskUnblockTime+0x1c>)
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <prvResetNextTaskUnblockTime+0x20>)
 80020cc:	b919      	cbnz	r1, 80020d6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020ce:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020da:	68d2      	ldr	r2, [r2, #12]
 80020dc:	6852      	ldr	r2, [r2, #4]
 80020de:	e7f8      	b.n	80020d2 <prvResetNextTaskUnblockTime+0xe>
 80020e0:	2000430c 	.word	0x2000430c
 80020e4:	200047b4 	.word	0x200047b4

080020e8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80020e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80020ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020f0:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80020f2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020f4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80020f6:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020f8:	21a5      	movs	r1, #165	; 0xa5
 80020fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80020fc:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020fe:	f001 f8de 	bl	80032be <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002102:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002104:	3e04      	subs	r6, #4
 8002106:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002108:	f026 0607 	bic.w	r6, r6, #7
 800210c:	1e6b      	subs	r3, r5, #1
 800210e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002112:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002114:	7859      	ldrb	r1, [r3, #1]
 8002116:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800211a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800211e:	b109      	cbz	r1, 8002124 <prvInitialiseNewTask.isra.2+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002120:	42ab      	cmp	r3, r5
 8002122:	d1f7      	bne.n	8002114 <prvInitialiseNewTask.isra.2+0x2c>
 8002124:	9d08      	ldr	r5, [sp, #32]
 8002126:	2d37      	cmp	r5, #55	; 0x37
 8002128:	bf28      	it	cs
 800212a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800212c:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8002130:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002132:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002134:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002136:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800213a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800213e:	f7ff f8ce 	bl	80012de <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002142:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002146:	f104 0018 	add.w	r0, r4, #24
 800214a:	f7ff f8c8 	bl	80012de <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800214e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002152:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002154:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002156:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002158:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800215c:	464a      	mov	r2, r9
 800215e:	4641      	mov	r1, r8
 8002160:	4630      	mov	r0, r6
 8002162:	f7ff f931 	bl	80013c8 <pxPortInitialiseStack>
 8002166:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002168:	b107      	cbz	r7, 800216c <prvInitialiseNewTask.isra.2+0x84>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800216a:	603c      	str	r4, [r7, #0]
 800216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002170 <prvDeleteTCB>:
	{
 8002170:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002172:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8002176:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002178:	b93b      	cbnz	r3, 800218a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800217a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800217c:	f7ff fb50 	bl	8001820 <vPortFree>
				vPortFree( pxTCB );
 8002180:	4620      	mov	r0, r4
	}
 8002182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002186:	f7ff bb4b 	b.w	8001820 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800218a:	2b01      	cmp	r3, #1
 800218c:	d0f9      	beq.n	8002182 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800218e:	2b02      	cmp	r3, #2
 8002190:	d008      	beq.n	80021a4 <prvDeleteTCB+0x34>
 8002192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002196:	f383 8811 	msr	BASEPRI, r3
 800219a:	f3bf 8f6f 	isb	sy
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	e7fe      	b.n	80021a2 <prvDeleteTCB+0x32>
 80021a4:	bd10      	pop	{r4, pc}
	...

080021a8 <prvIdleTask>:
{
 80021a8:	b580      	push	{r7, lr}
				taskYIELD();
 80021aa:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002208 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80021ae:	4f12      	ldr	r7, [pc, #72]	; (80021f8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021b0:	4c12      	ldr	r4, [pc, #72]	; (80021fc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80021b2:	4d13      	ldr	r5, [pc, #76]	; (8002200 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	b963      	cbnz	r3, 80021d2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <prvIdleTask+0x5c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d9f8      	bls.n	80021b2 <prvIdleTask+0xa>
				taskYIELD();
 80021c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021c4:	f8c8 3000 	str.w	r3, [r8]
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	e7ee      	b.n	80021b0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80021d2:	f7ff f927 	bl	8001424 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021da:	1d30      	adds	r0, r6, #4
 80021dc:	f7ff f8a5 	bl	800132a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80021ec:	f7ff f93c 	bl	8001468 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80021f0:	4630      	mov	r0, r6
 80021f2:	f7ff ffbd 	bl	8002170 <prvDeleteTCB>
 80021f6:	e7dd      	b.n	80021b4 <prvIdleTask+0xc>
 80021f8:	200047e8 	.word	0x200047e8
 80021fc:	20004778 	.word	0x20004778
 8002200:	20004774 	.word	0x20004774
 8002204:	20004314 	.word	0x20004314
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002210:	4d16      	ldr	r5, [pc, #88]	; (800226c <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8002212:	681e      	ldr	r6, [r3, #0]
{
 8002214:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002216:	6828      	ldr	r0, [r5, #0]
 8002218:	3004      	adds	r0, #4
{
 800221a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800221c:	f7ff f885 	bl	800132a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002220:	1c63      	adds	r3, r4, #1
 8002222:	462b      	mov	r3, r5
 8002224:	d107      	bne.n	8002236 <prvAddCurrentTaskToDelayedList+0x2a>
 8002226:	b137      	cbz	r7, 8002236 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002228:	6829      	ldr	r1, [r5, #0]
 800222a:	4811      	ldr	r0, [pc, #68]	; (8002270 <prvAddCurrentTaskToDelayedList+0x64>)
 800222c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800222e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002232:	f7ff b857 	b.w	80012e4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002236:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002238:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800223a:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800223c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800223e:	d907      	bls.n	8002250 <prvAddCurrentTaskToDelayedList+0x44>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002240:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <prvAddCurrentTaskToDelayedList+0x68>)
 8002242:	6810      	ldr	r0, [r2, #0]
 8002244:	6819      	ldr	r1, [r3, #0]
}
 8002246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800224a:	3104      	adds	r1, #4
 800224c:	f7ff b856 	b.w	80012fc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002250:	4a09      	ldr	r2, [pc, #36]	; (8002278 <prvAddCurrentTaskToDelayedList+0x6c>)
 8002252:	6810      	ldr	r0, [r2, #0]
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	3104      	adds	r1, #4
 8002258:	f7ff f850 	bl	80012fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <prvAddCurrentTaskToDelayedList+0x70>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002262:	bf38      	it	cc
 8002264:	601c      	strcc	r4, [r3, #0]
 8002266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002268:	200047fc 	.word	0x200047fc
 800226c:	20004308 	.word	0x20004308
 8002270:	200047d4 	.word	0x200047d4
 8002274:	20004310 	.word	0x20004310
 8002278:	2000430c 	.word	0x2000430c
 800227c:	200047b4 	.word	0x200047b4

08002280 <xTaskCreateStatic>:
	{
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002286:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002288:	b945      	cbnz	r5, 800229c <xTaskCreateStatic+0x1c>
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	e7fe      	b.n	800229a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800229c:	b944      	cbnz	r4, 80022b0 <xTaskCreateStatic+0x30>
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	e7fe      	b.n	80022ae <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80022b0:	265c      	movs	r6, #92	; 0x5c
 80022b2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80022b4:	9e04      	ldr	r6, [sp, #16]
 80022b6:	2e5c      	cmp	r6, #92	; 0x5c
 80022b8:	d008      	beq.n	80022cc <xTaskCreateStatic+0x4c>
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	e7fe      	b.n	80022ca <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022cc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022ce:	2502      	movs	r5, #2
 80022d0:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022d4:	ad05      	add	r5, sp, #20
 80022d6:	9501      	str	r5, [sp, #4]
 80022d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80022da:	9402      	str	r4, [sp, #8]
 80022dc:	9500      	str	r5, [sp, #0]
 80022de:	f7ff ff03 	bl	80020e8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff fe70 	bl	8001fc8 <prvAddNewTaskToReadyList>
	}
 80022e8:	9805      	ldr	r0, [sp, #20]
 80022ea:	b006      	add	sp, #24
 80022ec:	bd70      	pop	{r4, r5, r6, pc}

080022ee <xTaskCreate>:
	{
 80022ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022f2:	4607      	mov	r7, r0
 80022f4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f6:	0090      	lsls	r0, r2, #2
	{
 80022f8:	4688      	mov	r8, r1
 80022fa:	4616      	mov	r6, r2
 80022fc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022fe:	f7ff fa01 	bl	8001704 <pvPortMalloc>
			if( pxStack != NULL )
 8002302:	4605      	mov	r5, r0
 8002304:	b1e8      	cbz	r0, 8002342 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002306:	205c      	movs	r0, #92	; 0x5c
 8002308:	f7ff f9fc 	bl	8001704 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800230c:	4604      	mov	r4, r0
 800230e:	b1a8      	cbz	r0, 800233c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002310:	2300      	movs	r3, #0
 8002312:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002318:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800231e:	9002      	str	r0, [sp, #8]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	4632      	mov	r2, r6
 8002324:	464b      	mov	r3, r9
 8002326:	4641      	mov	r1, r8
 8002328:	4638      	mov	r0, r7
 800232a:	f7ff fedd 	bl	80020e8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff fe4a 	bl	8001fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002334:	2001      	movs	r0, #1
	}
 8002336:	b005      	add	sp, #20
 8002338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800233c:	4628      	mov	r0, r5
 800233e:	f7ff fa6f 	bl	8001820 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002342:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002346:	e7f6      	b.n	8002336 <xTaskCreate+0x48>

08002348 <vTaskStartScheduler>:
{
 8002348:	b510      	push	{r4, lr}
 800234a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800234c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800234e:	aa07      	add	r2, sp, #28
 8002350:	a906      	add	r1, sp, #24
 8002352:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002354:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002356:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002358:	f7fe ff9e 	bl	8001298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800235c:	9b05      	ldr	r3, [sp, #20]
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	9b06      	ldr	r3, [sp, #24]
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	9400      	str	r4, [sp, #0]
 8002366:	4623      	mov	r3, r4
 8002368:	9a07      	ldr	r2, [sp, #28]
 800236a:	4914      	ldr	r1, [pc, #80]	; (80023bc <vTaskStartScheduler+0x74>)
 800236c:	4814      	ldr	r0, [pc, #80]	; (80023c0 <vTaskStartScheduler+0x78>)
 800236e:	f7ff ff87 	bl	8002280 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002372:	b9a0      	cbnz	r0, 800239e <vTaskStartScheduler+0x56>
}
 8002374:	b008      	add	sp, #32
 8002376:	bd10      	pop	{r4, pc}
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <vTaskStartScheduler+0x7c>)
 800238a:	f04f 32ff 	mov.w	r2, #4294967295
 800238e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <vTaskStartScheduler+0x80>)
 8002392:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <vTaskStartScheduler+0x84>)
 8002396:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002398:	f7ff f8dc 	bl	8001554 <xPortStartScheduler>
 800239c:	e7ea      	b.n	8002374 <vTaskStartScheduler+0x2c>
			xReturn = xTimerCreateTimerTask();
 800239e:	f000 fb5b 	bl	8002a58 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80023a2:	2801      	cmp	r0, #1
 80023a4:	d0e8      	beq.n	8002378 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023a6:	3001      	adds	r0, #1
 80023a8:	d1e4      	bne.n	8002374 <vTaskStartScheduler+0x2c>
 80023aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	e7fe      	b.n	80023ba <vTaskStartScheduler+0x72>
 80023bc:	080032e8 	.word	0x080032e8
 80023c0:	080021a9 	.word	0x080021a9
 80023c4:	200047b4 	.word	0x200047b4
 80023c8:	200047d0 	.word	0x200047d0
 80023cc:	200047fc 	.word	0x200047fc

080023d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80023d0:	4a02      	ldr	r2, [pc, #8]	; (80023dc <vTaskSuspendAll+0xc>)
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20004780 	.word	0x20004780

080023e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80023e0:	4b01      	ldr	r3, [pc, #4]	; (80023e8 <xTaskGetTickCount+0x8>)
 80023e2:	6818      	ldr	r0, [r3, #0]
}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200047fc 	.word	0x200047fc

080023ec <xTaskIncrementTick>:
{
 80023ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023f0:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <xTaskIncrementTick+0xf4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d151      	bne.n	800249c <xTaskIncrementTick+0xb0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80023f8:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <xTaskIncrementTick+0xf8>)
 80023fa:	681c      	ldr	r4, [r3, #0]
 80023fc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80023fe:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002400:	b9bc      	cbnz	r4, 8002432 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <xTaskIncrementTick+0xfc>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	b142      	cbz	r2, 800241c <xTaskIncrementTick+0x30>
 800240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	e7fe      	b.n	800241a <xTaskIncrementTick+0x2e>
 800241c:	4a33      	ldr	r2, [pc, #204]	; (80024ec <xTaskIncrementTick+0x100>)
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	6810      	ldr	r0, [r2, #0]
 8002422:	6018      	str	r0, [r3, #0]
 8002424:	6011      	str	r1, [r2, #0]
 8002426:	4a32      	ldr	r2, [pc, #200]	; (80024f0 <xTaskIncrementTick+0x104>)
 8002428:	6813      	ldr	r3, [r2, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	f7ff fe49 	bl	80020c4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002432:	4d30      	ldr	r5, [pc, #192]	; (80024f4 <xTaskIncrementTick+0x108>)
 8002434:	4f30      	ldr	r7, [pc, #192]	; (80024f8 <xTaskIncrementTick+0x10c>)
 8002436:	682b      	ldr	r3, [r5, #0]
 8002438:	429c      	cmp	r4, r3
 800243a:	f04f 0b00 	mov.w	fp, #0
 800243e:	d33c      	bcc.n	80024ba <xTaskIncrementTick+0xce>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002440:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80024e8 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8002444:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8002508 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002448:	f8d8 2000 	ldr.w	r2, [r8]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	bb62      	cbnz	r2, 80024aa <xTaskIncrementTick+0xbe>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	602a      	str	r2, [r5, #0]
					break;
 8002456:	e030      	b.n	80024ba <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002458:	f106 0a04 	add.w	sl, r6, #4
 800245c:	4650      	mov	r0, sl
 800245e:	f7fe ff64 	bl	800132a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002462:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002464:	b119      	cbz	r1, 800246e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002466:	f106 0018 	add.w	r0, r6, #24
 800246a:	f7fe ff5e 	bl	800132a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800246e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002470:	f8d9 1000 	ldr.w	r1, [r9]
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <xTaskIncrementTick+0x110>)
 8002476:	4288      	cmp	r0, r1
 8002478:	f04f 0214 	mov.w	r2, #20
 800247c:	bf88      	it	hi
 800247e:	f8c9 0000 	strhi.w	r0, [r9]
 8002482:	4651      	mov	r1, sl
 8002484:	fb02 3000 	mla	r0, r2, r0, r3
 8002488:	f7fe ff2c 	bl	80012e4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002490:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002492:	4291      	cmp	r1, r2
 8002494:	bf28      	it	cs
 8002496:	f04f 0b01 	movcs.w	fp, #1
 800249a:	e7d5      	b.n	8002448 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <xTaskIncrementTick+0x114>)
 800249e:	6813      	ldr	r3, [r2, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80024a4:	f04f 0b00 	mov.w	fp, #0
 80024a8:	e011      	b.n	80024ce <xTaskIncrementTick+0xe2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024aa:	f8d8 2000 	ldr.w	r2, [r8]
 80024ae:	68d2      	ldr	r2, [r2, #12]
 80024b0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024b2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80024b4:	428c      	cmp	r4, r1
 80024b6:	d2cf      	bcs.n	8002458 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80024b8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <xTaskIncrementTick+0x110>)
 80024be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024c0:	2214      	movs	r2, #20
 80024c2:	434a      	muls	r2, r1
 80024c4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80024c6:	2a02      	cmp	r2, #2
 80024c8:	bf28      	it	cs
 80024ca:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80024ce:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <xTaskIncrementTick+0x118>)
 80024d0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80024d2:	2a00      	cmp	r2, #0
 80024d4:	bf18      	it	ne
 80024d6:	f04f 0b01 	movne.w	fp, #1
}
 80024da:	4658      	mov	r0, fp
 80024dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e0:	20004780 	.word	0x20004780
 80024e4:	200047fc 	.word	0x200047fc
 80024e8:	2000430c 	.word	0x2000430c
 80024ec:	20004310 	.word	0x20004310
 80024f0:	200047b8 	.word	0x200047b8
 80024f4:	200047b4 	.word	0x200047b4
 80024f8:	20004308 	.word	0x20004308
 80024fc:	20004314 	.word	0x20004314
 8002500:	2000477c 	.word	0x2000477c
 8002504:	20004800 	.word	0x20004800
 8002508:	20004788 	.word	0x20004788

0800250c <xTaskResumeAll>:
{
 800250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8002510:	4c2f      	ldr	r4, [pc, #188]	; (80025d0 <xTaskResumeAll+0xc4>)
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	b943      	cbnz	r3, 8002528 <xTaskResumeAll+0x1c>
 8002516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	e7fe      	b.n	8002526 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002528:	f7fe ff7c 	bl	8001424 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002532:	6824      	ldr	r4, [r4, #0]
 8002534:	b12c      	cbz	r4, 8002542 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002536:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002538:	f7fe ff96 	bl	8001468 <vPortExitCritical>
}
 800253c:	4620      	mov	r0, r4
 800253e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <xTaskResumeAll+0xc8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f5      	beq.n	8002536 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800254a:	4e23      	ldr	r6, [pc, #140]	; (80025d8 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800254c:	4f23      	ldr	r7, [pc, #140]	; (80025dc <xTaskResumeAll+0xd0>)
 800254e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80025f0 <xTaskResumeAll+0xe4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002552:	6833      	ldr	r3, [r6, #0]
 8002554:	b9e3      	cbnz	r3, 8002590 <xTaskResumeAll+0x84>
				if( pxTCB != NULL )
 8002556:	b10c      	cbz	r4, 800255c <xTaskResumeAll+0x50>
					prvResetNextTaskUnblockTime();
 8002558:	f7ff fdb4 	bl	80020c4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800255c:	4d20      	ldr	r5, [pc, #128]	; (80025e0 <xTaskResumeAll+0xd4>)
 800255e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002560:	b144      	cbz	r4, 8002574 <xTaskResumeAll+0x68>
								xYieldPending = pdTRUE;
 8002562:	4e20      	ldr	r6, [pc, #128]	; (80025e4 <xTaskResumeAll+0xd8>)
 8002564:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002566:	f7ff ff41 	bl	80023ec <xTaskIncrementTick>
 800256a:	b100      	cbz	r0, 800256e <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 800256c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800256e:	3c01      	subs	r4, #1
 8002570:	d1f9      	bne.n	8002566 <xTaskResumeAll+0x5a>
						uxPendedTicks = 0;
 8002572:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <xTaskResumeAll+0xd8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0dc      	beq.n	8002536 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <xTaskResumeAll+0xdc>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800258c:	2401      	movs	r4, #1
 800258e:	e7d3      	b.n	8002538 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002590:	68f3      	ldr	r3, [r6, #12]
 8002592:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002594:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002596:	f104 0018 	add.w	r0, r4, #24
 800259a:	f7fe fec6 	bl	800132a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800259e:	4628      	mov	r0, r5
 80025a0:	f7fe fec3 	bl	800132a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	2014      	movs	r0, #20
 80025aa:	4293      	cmp	r3, r2
 80025ac:	fb00 8003 	mla	r0, r0, r3, r8
 80025b0:	4629      	mov	r1, r5
 80025b2:	bf88      	it	hi
 80025b4:	603b      	strhi	r3, [r7, #0]
 80025b6:	f7fe fe95 	bl	80012e4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <xTaskResumeAll+0xe0>)
 80025bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80025c4:	bf22      	ittt	cs
 80025c6:	4b07      	ldrcs	r3, [pc, #28]	; (80025e4 <xTaskResumeAll+0xd8>)
 80025c8:	2201      	movcs	r2, #1
 80025ca:	601a      	strcs	r2, [r3, #0]
 80025cc:	e7c1      	b.n	8002552 <xTaskResumeAll+0x46>
 80025ce:	bf00      	nop
 80025d0:	20004780 	.word	0x20004780
 80025d4:	20004774 	.word	0x20004774
 80025d8:	200047bc 	.word	0x200047bc
 80025dc:	20004788 	.word	0x20004788
 80025e0:	2000477c 	.word	0x2000477c
 80025e4:	20004800 	.word	0x20004800
 80025e8:	e000ed04 	.word	0xe000ed04
 80025ec:	20004308 	.word	0x20004308
 80025f0:	20004314 	.word	0x20004314

080025f4 <vTaskDelayUntil>:
	{
 80025f4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 80025f6:	b940      	cbnz	r0, 800260a <vTaskDelayUntil+0x16>
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	e7fe      	b.n	8002608 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 800260a:	b941      	cbnz	r1, 800261e <vTaskDelayUntil+0x2a>
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	e7fe      	b.n	800261c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <vTaskDelayUntil+0x8c>)
 8002620:	681c      	ldr	r4, [r3, #0]
 8002622:	b144      	cbz	r4, 8002636 <vTaskDelayUntil+0x42>
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	e7fe      	b.n	8002634 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8002636:	f7ff fecb 	bl	80023d0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800263c:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800263e:	681d      	ldr	r5, [r3, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8002640:	4295      	cmp	r5, r2
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002642:	eb01 0302 	add.w	r3, r1, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8002646:	d217      	bcs.n	8002678 <vTaskDelayUntil+0x84>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002648:	429a      	cmp	r2, r3
 800264a:	d903      	bls.n	8002654 <vTaskDelayUntil+0x60>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800264c:	429d      	cmp	r5, r3
 800264e:	bf2c      	ite	cs
 8002650:	2400      	movcs	r4, #0
 8002652:	2401      	movcc	r4, #1
			*pxPreviousWakeTime = xTimeToWake;
 8002654:	6003      	str	r3, [r0, #0]
			if( xShouldDelay != pdFALSE )
 8002656:	b11c      	cbz	r4, 8002660 <vTaskDelayUntil+0x6c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002658:	2100      	movs	r1, #0
 800265a:	1b58      	subs	r0, r3, r5
 800265c:	f7ff fdd6 	bl	800220c <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8002660:	f7ff ff54 	bl	800250c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002664:	b938      	cbnz	r0, 8002676 <vTaskDelayUntil+0x82>
			portYIELD_WITHIN_API();
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <vTaskDelayUntil+0x94>)
 8002668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002678:	429a      	cmp	r2, r3
 800267a:	d9e7      	bls.n	800264c <vTaskDelayUntil+0x58>
					xShouldDelay = pdTRUE;
 800267c:	2401      	movs	r4, #1
 800267e:	e7e9      	b.n	8002654 <vTaskDelayUntil+0x60>
 8002680:	20004780 	.word	0x20004780
 8002684:	200047fc 	.word	0x200047fc
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <vTaskDelay>:
	{
 800268c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800268e:	b940      	cbnz	r0, 80026a2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <vTaskDelay+0x40>)
 8002692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <vTaskDelay+0x44>)
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	b141      	cbz	r1, 80026ba <vTaskDelay+0x2e>
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	e7fe      	b.n	80026b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80026ba:	f7ff fe89 	bl	80023d0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026be:	f7ff fda5 	bl	800220c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80026c2:	f7ff ff23 	bl	800250c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d0e2      	beq.n	8002690 <vTaskDelay+0x4>
 80026ca:	bd08      	pop	{r3, pc}
 80026cc:	e000ed04 	.word	0xe000ed04
 80026d0:	20004780 	.word	0x20004780

080026d4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <vTaskSwitchContext+0x64>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <vTaskSwitchContext+0x68>)
{
 80026da:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026dc:	b112      	cbz	r2, 80026e4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80026e4:	4d16      	ldr	r5, [pc, #88]	; (8002740 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 80026e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <vTaskSwitchContext+0x70>)
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	2714      	movs	r7, #20
 80026ee:	4616      	mov	r6, r2
 80026f0:	fb07 f103 	mul.w	r1, r7, r3
 80026f4:	1850      	adds	r0, r2, r1
 80026f6:	5854      	ldr	r4, [r2, r1]
 80026f8:	b18c      	cbz	r4, 800271e <vTaskSwitchContext+0x4a>
 80026fa:	6844      	ldr	r4, [r0, #4]
 80026fc:	3108      	adds	r1, #8
 80026fe:	6864      	ldr	r4, [r4, #4]
 8002700:	6044      	str	r4, [r0, #4]
 8002702:	440a      	add	r2, r1
 8002704:	4294      	cmp	r4, r2
 8002706:	bf04      	itt	eq
 8002708:	6862      	ldreq	r2, [r4, #4]
 800270a:	6042      	streq	r2, [r0, #4]
 800270c:	2214      	movs	r2, #20
 800270e:	fb02 6203 	mla	r2, r2, r3, r6
 8002712:	6852      	ldr	r2, [r2, #4]
 8002714:	68d1      	ldr	r1, [r2, #12]
 8002716:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <vTaskSwitchContext+0x74>)
 8002718:	6011      	str	r1, [r2, #0]
 800271a:	602b      	str	r3, [r5, #0]
 800271c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800271e:	b943      	cbnz	r3, 8002732 <vTaskSwitchContext+0x5e>
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	e7fe      	b.n	8002730 <vTaskSwitchContext+0x5c>
 8002732:	3b01      	subs	r3, #1
 8002734:	e7dc      	b.n	80026f0 <vTaskSwitchContext+0x1c>
 8002736:	bf00      	nop
 8002738:	20004780 	.word	0x20004780
 800273c:	20004800 	.word	0x20004800
 8002740:	20004788 	.word	0x20004788
 8002744:	20004314 	.word	0x20004314
 8002748:	20004308 	.word	0x20004308

0800274c <vTaskPlaceOnEventList>:
{
 800274c:	b510      	push	{r4, lr}
 800274e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002750:	b940      	cbnz	r0, 8002764 <vTaskPlaceOnEventList+0x18>
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	e7fe      	b.n	8002762 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <vTaskPlaceOnEventList+0x30>)
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	3118      	adds	r1, #24
 800276a:	f7fe fdc7 	bl	80012fc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800276e:	4620      	mov	r0, r4
 8002770:	2101      	movs	r1, #1
}
 8002772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002776:	f7ff bd49 	b.w	800220c <prvAddCurrentTaskToDelayedList>
 800277a:	bf00      	nop
 800277c:	20004308 	.word	0x20004308

08002780 <vTaskPlaceOnEventListRestricted>:
	{
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	460d      	mov	r5, r1
 8002784:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8002786:	b940      	cbnz	r0, 800279a <vTaskPlaceOnEventListRestricted+0x1a>
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	e7fe      	b.n	8002798 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <vTaskPlaceOnEventListRestricted+0x38>)
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	3118      	adds	r1, #24
 80027a0:	f7fe fda0 	bl	80012e4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80027a4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80027a6:	4621      	mov	r1, r4
 80027a8:	bf0c      	ite	eq
 80027aa:	4628      	moveq	r0, r5
 80027ac:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80027b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80027b4:	f7ff bd2a 	b.w	800220c <prvAddCurrentTaskToDelayedList>
 80027b8:	20004308 	.word	0x20004308

080027bc <xTaskRemoveFromEventList>:
{
 80027bc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80027be:	68c3      	ldr	r3, [r0, #12]
 80027c0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80027c2:	b944      	cbnz	r4, 80027d6 <xTaskRemoveFromEventList+0x1a>
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	e7fe      	b.n	80027d4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80027d6:	f104 0518 	add.w	r5, r4, #24
 80027da:	4628      	mov	r0, r5
 80027dc:	f7fe fda5 	bl	800132a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <xTaskRemoveFromEventList+0x68>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b9db      	cbnz	r3, 800281e <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80027e6:	1d25      	adds	r5, r4, #4
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe fd9e 	bl	800132a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <xTaskRemoveFromEventList+0x6c>)
 80027f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027f2:	6811      	ldr	r1, [r2, #0]
 80027f4:	428b      	cmp	r3, r1
 80027f6:	bf88      	it	hi
 80027f8:	6013      	strhi	r3, [r2, #0]
 80027fa:	4a0c      	ldr	r2, [pc, #48]	; (800282c <xTaskRemoveFromEventList+0x70>)
 80027fc:	2014      	movs	r0, #20
 80027fe:	4629      	mov	r1, r5
 8002800:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002804:	f7fe fd6e 	bl	80012e4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <xTaskRemoveFromEventList+0x74>)
 800280a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002812:	bf83      	ittte	hi
 8002814:	4b07      	ldrhi	r3, [pc, #28]	; (8002834 <xTaskRemoveFromEventList+0x78>)
 8002816:	2001      	movhi	r0, #1
 8002818:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800281a:	2000      	movls	r0, #0
}
 800281c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800281e:	4629      	mov	r1, r5
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <xTaskRemoveFromEventList+0x7c>)
 8002822:	e7ef      	b.n	8002804 <xTaskRemoveFromEventList+0x48>
 8002824:	20004780 	.word	0x20004780
 8002828:	20004788 	.word	0x20004788
 800282c:	20004314 	.word	0x20004314
 8002830:	20004308 	.word	0x20004308
 8002834:	20004800 	.word	0x20004800
 8002838:	200047bc 	.word	0x200047bc

0800283c <vTaskSetTimeOutState>:
{
 800283c:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 800283e:	4604      	mov	r4, r0
 8002840:	b940      	cbnz	r0, 8002854 <vTaskSetTimeOutState+0x18>
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	e7fe      	b.n	8002852 <vTaskSetTimeOutState+0x16>
	taskENTER_CRITICAL();
 8002854:	f7fe fde6 	bl	8001424 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <vTaskSetTimeOutState+0x30>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <vTaskSetTimeOutState+0x34>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6063      	str	r3, [r4, #4]
}
 8002864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 8002868:	f7fe bdfe 	b.w	8001468 <vPortExitCritical>
 800286c:	200047b8 	.word	0x200047b8
 8002870:	200047fc 	.word	0x200047fc

08002874 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <vTaskInternalSetTimeOutState+0x10>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800287a:	4b03      	ldr	r3, [pc, #12]	; (8002888 <vTaskInternalSetTimeOutState+0x14>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6043      	str	r3, [r0, #4]
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	200047b8 	.word	0x200047b8
 8002888:	200047fc 	.word	0x200047fc

0800288c <xTaskCheckForTimeOut>:
{
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8002890:	4605      	mov	r5, r0
 8002892:	b940      	cbnz	r0, 80028a6 <xTaskCheckForTimeOut+0x1a>
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	e7fe      	b.n	80028a4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80028a6:	b941      	cbnz	r1, 80028ba <xTaskCheckForTimeOut+0x2e>
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	e7fe      	b.n	80028b8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80028ba:	f7fe fdb3 	bl	8001424 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028c0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80028c2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	1c58      	adds	r0, r3, #1
 80028c8:	d00e      	beq.n	80028e8 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80028ca:	480d      	ldr	r0, [pc, #52]	; (8002900 <xTaskCheckForTimeOut+0x74>)
 80028cc:	682e      	ldr	r6, [r5, #0]
 80028ce:	6800      	ldr	r0, [r0, #0]
 80028d0:	4286      	cmp	r6, r0
 80028d2:	d001      	beq.n	80028d8 <xTaskCheckForTimeOut+0x4c>
 80028d4:	428a      	cmp	r2, r1
 80028d6:	d20e      	bcs.n	80028f6 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028d8:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80028da:	429a      	cmp	r2, r3
 80028dc:	d209      	bcs.n	80028f2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80028e2:	4628      	mov	r0, r5
 80028e4:	f7ff ffc6 	bl	8002874 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80028e8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80028ea:	f7fe fdbd 	bl	8001468 <vPortExitCritical>
}
 80028ee:	4620      	mov	r0, r4
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80028f6:	2401      	movs	r4, #1
 80028f8:	e7f7      	b.n	80028ea <xTaskCheckForTimeOut+0x5e>
 80028fa:	bf00      	nop
 80028fc:	200047fc 	.word	0x200047fc
 8002900:	200047b8 	.word	0x200047b8

08002904 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002904:	4b01      	ldr	r3, [pc, #4]	; (800290c <vTaskMissedYield+0x8>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	4770      	bx	lr
 800290c:	20004800 	.word	0x20004800

08002910 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <xTaskGetSchedulerState+0x18>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b133      	cbz	r3, 8002924 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <xTaskGetSchedulerState+0x1c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800291c:	bf0c      	ite	eq
 800291e:	2002      	moveq	r0, #2
 8002920:	2000      	movne	r0, #0
 8002922:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002924:	2001      	movs	r0, #1
	}
 8002926:	4770      	bx	lr
 8002928:	200047d0 	.word	0x200047d0
 800292c:	20004780 	.word	0x20004780

08002930 <xTaskPriorityDisinherit>:
	{
 8002930:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8002932:	4604      	mov	r4, r0
 8002934:	b908      	cbnz	r0, 800293a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002936:	2000      	movs	r0, #0
 8002938:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <xTaskPriorityDisinherit+0x78>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4298      	cmp	r0, r3
 8002940:	d008      	beq.n	8002954 <xTaskPriorityDisinherit+0x24>
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	e7fe      	b.n	8002952 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002954:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002956:	b943      	cbnz	r3, 800296a <xTaskPriorityDisinherit+0x3a>
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	e7fe      	b.n	8002968 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800296a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800296c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800296e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002970:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8002972:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002974:	d0df      	beq.n	8002936 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1dd      	bne.n	8002936 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800297a:	1d05      	adds	r5, r0, #4
 800297c:	4628      	mov	r0, r5
 800297e:	f7fe fcd4 	bl	800132a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002982:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002984:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002986:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800298a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <xTaskPriorityDisinherit+0x7c>)
 800298e:	6811      	ldr	r1, [r2, #0]
 8002990:	428b      	cmp	r3, r1
 8002992:	bf88      	it	hi
 8002994:	6013      	strhi	r3, [r2, #0]
 8002996:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <xTaskPriorityDisinherit+0x80>)
 8002998:	2014      	movs	r0, #20
 800299a:	fb00 2003 	mla	r0, r0, r3, r2
 800299e:	4629      	mov	r1, r5
 80029a0:	f7fe fca0 	bl	80012e4 <vListInsertEnd>
					xReturn = pdTRUE;
 80029a4:	2001      	movs	r0, #1
	}
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	20004308 	.word	0x20004308
 80029ac:	20004788 	.word	0x20004788
 80029b0:	20004314 	.word	0x20004314

080029b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80029b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80029b6:	4c11      	ldr	r4, [pc, #68]	; (80029fc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80029b8:	f7fe fd34 	bl	8001424 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80029bc:	6825      	ldr	r5, [r4, #0]
 80029be:	b9bd      	cbnz	r5, 80029f0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80029c0:	4f0f      	ldr	r7, [pc, #60]	; (8002a00 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80029c2:	4e10      	ldr	r6, [pc, #64]	; (8002a04 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80029c4:	4638      	mov	r0, r7
 80029c6:	f7fe fc7f 	bl	80012c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80029ca:	4630      	mov	r0, r6
 80029cc:	f7fe fc7c 	bl	80012c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80029d0:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80029d4:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80029d8:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80029da:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80029dc:	200a      	movs	r0, #10
 80029de:	9500      	str	r5, [sp, #0]
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <prvCheckForValidListAndQueue+0x60>)
 80029e2:	f7ff f821 	bl	8001a28 <xQueueGenericCreateStatic>
 80029e6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80029e8:	b110      	cbz	r0, 80029f0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80029ea:	490b      	ldr	r1, [pc, #44]	; (8002a18 <prvCheckForValidListAndQueue+0x64>)
 80029ec:	f7ff fa8c 	bl	8001f08 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80029f0:	b003      	add	sp, #12
 80029f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80029f6:	f7fe bd37 	b.w	8001468 <vPortExitCritical>
 80029fa:	bf00      	nop
 80029fc:	20004928 	.word	0x20004928
 8002a00:	200048ac 	.word	0x200048ac
 8002a04:	200048c0 	.word	0x200048c0
 8002a08:	20004804 	.word	0x20004804
 8002a0c:	2000480c 	.word	0x2000480c
 8002a10:	20004808 	.word	0x20004808
 8002a14:	200048d8 	.word	0x200048d8
 8002a18:	080032ed 	.word	0x080032ed

08002a1c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8002a1c:	4291      	cmp	r1, r2
{
 8002a1e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a20:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a22:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002a24:	d80a      	bhi.n	8002a3c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	6983      	ldr	r3, [r0, #24]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20d      	bcs.n	8002a4a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <prvInsertTimerInActiveList+0x34>)
 8002a30:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	f7fe fc62 	bl	80012fc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d201      	bcs.n	8002a44 <prvInsertTimerInActiveList+0x28>
 8002a40:	4299      	cmp	r1, r3
 8002a42:	d202      	bcs.n	8002a4a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a44:	1d01      	adds	r1, r0, #4
 8002a46:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <prvInsertTimerInActiveList+0x38>)
 8002a48:	e7f3      	b.n	8002a32 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002a4a:	2001      	movs	r0, #1
}
 8002a4c:	bd08      	pop	{r3, pc}
 8002a4e:	bf00      	nop
 8002a50:	20004808 	.word	0x20004808
 8002a54:	20004804 	.word	0x20004804

08002a58 <xTimerCreateTimerTask>:
{
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002a5c:	f7ff ffaa 	bl	80029b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <xTimerCreateTimerTask+0x58>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	b943      	cbnz	r3, 8002a78 <xTimerCreateTimerTask+0x20>
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	e7fe      	b.n	8002a76 <xTimerCreateTimerTask+0x1e>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002a78:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002a7a:	aa07      	add	r2, sp, #28
 8002a7c:	a906      	add	r1, sp, #24
 8002a7e:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002a80:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002a82:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002a84:	f7fe fc14 	bl	80012b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002a88:	9b05      	ldr	r3, [sp, #20]
 8002a8a:	9302      	str	r3, [sp, #8]
 8002a8c:	9b06      	ldr	r3, [sp, #24]
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	2302      	movs	r3, #2
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	9a07      	ldr	r2, [sp, #28]
 8002a96:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <xTimerCreateTimerTask+0x5c>)
 8002a98:	4807      	ldr	r0, [pc, #28]	; (8002ab8 <xTimerCreateTimerTask+0x60>)
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	f7ff fbf0 	bl	8002280 <xTaskCreateStatic>
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <xTimerCreateTimerTask+0x64>)
 8002aa2:	6018      	str	r0, [r3, #0]
	configASSERT( xReturn );
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d0de      	beq.n	8002a66 <xTimerCreateTimerTask+0xe>
}
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	b008      	add	sp, #32
 8002aac:	bd10      	pop	{r4, pc}
 8002aae:	bf00      	nop
 8002ab0:	20004928 	.word	0x20004928
 8002ab4:	080032f2 	.word	0x080032f2
 8002ab8:	08002c5d 	.word	0x08002c5d
 8002abc:	2000492c 	.word	0x2000492c

08002ac0 <xTimerCreate>:
	{
 8002ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac4:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002ac6:	2030      	movs	r0, #48	; 0x30
	{
 8002ac8:	460d      	mov	r5, r1
 8002aca:	4617      	mov	r7, r2
 8002acc:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002ace:	f7fe fe19 	bl	8001704 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	b1c0      	cbz	r0, 8002b08 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002ad6:	b945      	cbnz	r5, 8002aea <xTimerCreate+0x2a>
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	e7fe      	b.n	8002ae8 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8002aea:	f7ff ff63 	bl	80029b4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002aee:	9b06      	ldr	r3, [sp, #24]
 8002af0:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8002af2:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002af6:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002af8:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002afa:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002afc:	1d20      	adds	r0, r4, #4
 8002afe:	f7fe fbee 	bl	80012de <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8002b08:	4620      	mov	r0, r4
 8002b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b0e <xTimerCreateStatic>:
	{
 8002b0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002b12:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8002b14:	2330      	movs	r3, #48	; 0x30
 8002b16:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8002b18:	9b01      	ldr	r3, [sp, #4]
	{
 8002b1a:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8002b1c:	2b30      	cmp	r3, #48	; 0x30
	{
 8002b1e:	4680      	mov	r8, r0
 8002b20:	460d      	mov	r5, r1
 8002b22:	4617      	mov	r7, r2
			configASSERT( xSize == sizeof( Timer_t ) );
 8002b24:	d008      	beq.n	8002b38 <xTimerCreateStatic+0x2a>
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	e7fe      	b.n	8002b36 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8002b38:	b944      	cbnz	r4, 8002b4c <xTimerCreateStatic+0x3e>
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	e7fe      	b.n	8002b4a <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002b4c:	b941      	cbnz	r1, 8002b60 <xTimerCreateStatic+0x52>
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	e7fe      	b.n	8002b5e <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8002b60:	f7ff ff28 	bl	80029b4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002b64:	9b08      	ldr	r3, [sp, #32]
 8002b66:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002b68:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 8002b6a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002b6e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002b70:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002b72:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002b74:	f7fe fbb3 	bl	80012de <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8002b78:	2301      	movs	r3, #1
	}
 8002b7a:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8002b7c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8002b80:	b002      	add	sp, #8
 8002b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002b88 <xTimerGenericCommand>:
{
 8002b88:	b530      	push	{r4, r5, lr}
 8002b8a:	4615      	mov	r5, r2
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8002b90:	4603      	mov	r3, r0
 8002b92:	b940      	cbnz	r0, 8002ba6 <xTimerGenericCommand+0x1e>
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	e7fe      	b.n	8002ba4 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8002ba6:	4c0d      	ldr	r4, [pc, #52]	; (8002bdc <xTimerGenericCommand+0x54>)
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	b180      	cbz	r0, 8002bce <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002bac:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002bae:	e88d 0022 	stmia.w	sp, {r1, r5}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002bb2:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002bb4:	dc0d      	bgt.n	8002bd2 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002bb6:	f7ff feab 	bl	8002910 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002bba:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002bbc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002bbe:	bf08      	it	eq
 8002bc0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	bf18      	it	ne
 8002bc6:	461a      	movne	r2, r3
 8002bc8:	4669      	mov	r1, sp
 8002bca:	f7fe ffe1 	bl	8001b90 <xQueueGenericSend>
}
 8002bce:	b005      	add	sp, #20
 8002bd0:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	4669      	mov	r1, sp
 8002bd6:	f7ff f891 	bl	8001cfc <xQueueGenericSendFromISR>
 8002bda:	e7f8      	b.n	8002bce <xTimerGenericCommand+0x46>
 8002bdc:	20004928 	.word	0x20004928

08002be0 <prvSwitchTimerLists>:
{
 8002be0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002be4:	4d1b      	ldr	r5, [pc, #108]	; (8002c54 <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002be6:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002bea:	682b      	ldr	r3, [r5, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	b932      	cbnz	r2, 8002bfe <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <prvSwitchTimerLists+0x78>)
 8002bf2:	6811      	ldr	r1, [r2, #0]
 8002bf4:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	b002      	add	sp, #8
 8002bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002bfe:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c00:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c02:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c04:	1d27      	adds	r7, r4, #4
 8002c06:	4638      	mov	r0, r7
 8002c08:	f7fe fb8f 	bl	800132a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c12:	69e3      	ldr	r3, [r4, #28]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d1e8      	bne.n	8002bea <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002c18:	69a3      	ldr	r3, [r4, #24]
 8002c1a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002c1c:	429e      	cmp	r6, r3
 8002c1e:	d206      	bcs.n	8002c2e <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002c20:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c22:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c24:	4639      	mov	r1, r7
 8002c26:	6828      	ldr	r0, [r5, #0]
 8002c28:	f7fe fb68 	bl	80012fc <vListInsert>
 8002c2c:	e7dd      	b.n	8002bea <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8cd 8000 	str.w	r8, [sp]
 8002c34:	4632      	mov	r2, r6
 8002c36:	4619      	mov	r1, r3
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7ff ffa5 	bl	8002b88 <xTimerGenericCommand>
				configASSERT( xResult );
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d1d3      	bne.n	8002bea <prvSwitchTimerLists+0xa>
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	e7fe      	b.n	8002c52 <prvSwitchTimerLists+0x72>
 8002c54:	20004804 	.word	0x20004804
 8002c58:	20004808 	.word	0x20004808

08002c5c <prvTimerTask>:
{
 8002c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002c60:	4d72      	ldr	r5, [pc, #456]	; (8002e2c <prvTimerTask+0x1d0>)
					portYIELD_WITHIN_API();
 8002c62:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8002e3c <prvTimerTask+0x1e0>
{
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002c6a:	682b      	ldr	r3, [r5, #0]
 8002c6c:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8002c70:	f1bb 0f00 	cmp.w	fp, #0
 8002c74:	d044      	beq.n	8002d00 <prvTimerTask+0xa4>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8002c7c:	f7ff fba8 	bl	80023d0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8002c80:	f7ff fbae 	bl	80023e0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <prvTimerTask+0x1d4>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8002c8a:	4682      	mov	sl, r0
 8002c8c:	461e      	mov	r6, r3
	if( xTimeNow < xLastTime )
 8002c8e:	d239      	bcs.n	8002d04 <prvTimerTask+0xa8>
 8002c90:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 8002c92:	f7ff ffa5 	bl	8002be0 <prvSwitchTimerLists>
 8002c96:	9b03      	ldr	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 8002c98:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
 8002c9a:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 8002c9e:	2c00      	cmp	r4, #0
 8002ca0:	f040 808a 	bne.w	8002db8 <prvTimerTask+0x15c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002ca4:	f1bb 0f00 	cmp.w	fp, #0
 8002ca8:	d06b      	beq.n	8002d82 <prvTimerTask+0x126>
 8002caa:	45d1      	cmp	r9, sl
 8002cac:	f200 8082 	bhi.w	8002db4 <prvTimerTask+0x158>
				( void ) xTaskResumeAll();
 8002cb0:	f7ff fc2c 	bl	800250c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cbc:	f10b 0004 	add.w	r0, fp, #4
 8002cc0:	f7fe fb33 	bl	800132a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002cc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d11d      	bne.n	8002d08 <prvTimerTask+0xac>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002ccc:	f8db 1018 	ldr.w	r1, [fp, #24]
 8002cd0:	464b      	mov	r3, r9
 8002cd2:	4652      	mov	r2, sl
 8002cd4:	4449      	add	r1, r9
 8002cd6:	4658      	mov	r0, fp
 8002cd8:	f7ff fea0 	bl	8002a1c <prvInsertTimerInActiveList>
 8002cdc:	b1a0      	cbz	r0, 8002d08 <prvTimerTask+0xac>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002cde:	9400      	str	r4, [sp, #0]
 8002ce0:	4623      	mov	r3, r4
 8002ce2:	464a      	mov	r2, r9
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	4658      	mov	r0, fp
 8002ce8:	f7ff ff4e 	bl	8002b88 <xTimerGenericCommand>
			configASSERT( xResult );
 8002cec:	b960      	cbnz	r0, 8002d08 <prvTimerTask+0xac>
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	e7fe      	b.n	8002cfe <prvTimerTask+0xa2>
		xNextExpireTime = ( TickType_t ) 0U;
 8002d00:	46d9      	mov	r9, fp
 8002d02:	e7bb      	b.n	8002c7c <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 8002d04:	2400      	movs	r4, #0
 8002d06:	e7c8      	b.n	8002c9a <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d08:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002d0c:	4658      	mov	r0, fp
 8002d0e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d10:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8002e38 <prvTimerTask+0x1dc>
 8002d14:	f8d9 0000 	ldr.w	r0, [r9]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	a904      	add	r1, sp, #16
 8002d1c:	f7ff f850 	bl	8001dc0 <xQueueReceive>
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d0a2      	beq.n	8002c6a <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002d24:	9b04      	ldr	r3, [sp, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da03      	bge.n	8002d32 <prvTimerTask+0xd6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002d2a:	9907      	ldr	r1, [sp, #28]
 8002d2c:	9806      	ldr	r0, [sp, #24]
 8002d2e:	9b05      	ldr	r3, [sp, #20]
 8002d30:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002d32:	9b04      	ldr	r3, [sp, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	dbed      	blt.n	8002d14 <prvTimerTask+0xb8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002d38:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002d3a:	6963      	ldr	r3, [r4, #20]
 8002d3c:	b113      	cbz	r3, 8002d44 <prvTimerTask+0xe8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d3e:	1d20      	adds	r0, r4, #4
 8002d40:	f7fe faf3 	bl	800132a <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8002d44:	f7ff fb4c 	bl	80023e0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002d48:	6833      	ldr	r3, [r6, #0]
 8002d4a:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8002d4c:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8002d4e:	d201      	bcs.n	8002d54 <prvTimerTask+0xf8>
		prvSwitchTimerLists();
 8002d50:	f7ff ff46 	bl	8002be0 <prvSwitchTimerLists>
 8002d54:	9a04      	ldr	r2, [sp, #16]
	xLastTime = xTimeNow;
 8002d56:	f8c6 b000 	str.w	fp, [r6]
 8002d5a:	2a09      	cmp	r2, #9
 8002d5c:	d8da      	bhi.n	8002d14 <prvTimerTask+0xb8>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4093      	lsls	r3, r2
 8002d62:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8002d66:	d14e      	bne.n	8002e06 <prvTimerTask+0x1aa>
 8002d68:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8002d6c:	d127      	bne.n	8002dbe <prvTimerTask+0x162>
 8002d6e:	069b      	lsls	r3, r3, #26
 8002d70:	d5d0      	bpl.n	8002d14 <prvTimerTask+0xb8>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002d72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1cc      	bne.n	8002d14 <prvTimerTask+0xb8>
							vPortFree( pxTimer );
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7fe fd50 	bl	8001820 <vPortFree>
 8002d80:	e7c8      	b.n	8002d14 <prvTimerTask+0xb8>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <prvTimerTask+0x1d8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	fab2 f282 	clz	r2, r2
 8002d8c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <prvTimerTask+0x1dc>)
 8002d90:	eba9 010a 	sub.w	r1, r9, sl
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	f7ff f8f4 	bl	8001f82 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002d9a:	f7ff fbb7 	bl	800250c <xTaskResumeAll>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d1b6      	bne.n	8002d10 <prvTimerTask+0xb4>
					portYIELD_WITHIN_API();
 8002da2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002da6:	f8c8 3000 	str.w	r3, [r8]
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	e7ad      	b.n	8002d10 <prvTimerTask+0xb4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002db4:	4622      	mov	r2, r4
 8002db6:	e7ea      	b.n	8002d8e <prvTimerTask+0x132>
			( void ) xTaskResumeAll();
 8002db8:	f7ff fba8 	bl	800250c <xTaskResumeAll>
 8002dbc:	e7a8      	b.n	8002d10 <prvTimerTask+0xb4>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002dbe:	69a1      	ldr	r1, [r4, #24]
 8002dc0:	9b05      	ldr	r3, [sp, #20]
 8002dc2:	465a      	mov	r2, fp
 8002dc4:	4419      	add	r1, r3
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff fe28 	bl	8002a1c <prvInsertTimerInActiveList>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d0a1      	beq.n	8002d14 <prvTimerTask+0xb8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002dd6:	69e3      	ldr	r3, [r4, #28]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d19b      	bne.n	8002d14 <prvTimerTask+0xb8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002ddc:	69a2      	ldr	r2, [r4, #24]
 8002dde:	9905      	ldr	r1, [sp, #20]
 8002de0:	f8cd a000 	str.w	sl, [sp]
 8002de4:	440a      	add	r2, r1
 8002de6:	4653      	mov	r3, sl
 8002de8:	4651      	mov	r1, sl
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff fecc 	bl	8002b88 <xTimerGenericCommand>
							configASSERT( xResult );
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d18f      	bne.n	8002d14 <prvTimerTask+0xb8>
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	e7fe      	b.n	8002e04 <prvTimerTask+0x1a8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002e06:	9905      	ldr	r1, [sp, #20]
 8002e08:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002e0a:	b941      	cbnz	r1, 8002e1e <prvTimerTask+0x1c2>
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	e7fe      	b.n	8002e1c <prvTimerTask+0x1c0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002e1e:	465b      	mov	r3, fp
 8002e20:	465a      	mov	r2, fp
 8002e22:	4459      	add	r1, fp
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7ff fdf9 	bl	8002a1c <prvInsertTimerInActiveList>
 8002e2a:	e773      	b.n	8002d14 <prvTimerTask+0xb8>
 8002e2c:	20004804 	.word	0x20004804
 8002e30:	200048d4 	.word	0x200048d4
 8002e34:	20004808 	.word	0x20004808
 8002e38:	20004928 	.word	0x20004928
 8002e3c:	e000ed04 	.word	0xe000ed04

08002e40 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8002e40:	b510      	push	{r4, lr}
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8002e42:	4604      	mov	r4, r0
 8002e44:	b940      	cbnz	r0, 8002e58 <pvTimerGetTimerID+0x18>
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	e7fe      	b.n	8002e56 <pvTimerGetTimerID+0x16>

	taskENTER_CRITICAL();
 8002e58:	f7fe fae4 	bl	8001424 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8002e5c:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8002e5e:	f7fe fb03 	bl	8001468 <vPortExitCritical>

	return pvReturn;
}
 8002e62:	4620      	mov	r0, r4
 8002e64:	bd10      	pop	{r4, pc}

08002e66 <Callback01>:
  /* USER CODE END StartTask02 */
//}

/* Callback01 function */
void Callback01(void *argument)
{
 8002e66:	4770      	bx	lr

08002e68 <StartDefaultTask>:
{
 8002e68:	b508      	push	{r3, lr}
    osDelay(1);
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7fe f962 	bl	8001134 <osDelay>
 8002e70:	e7fb      	b.n	8002e6a <StartDefaultTask+0x2>
	...

08002e74 <StartTask02>:
{
 8002e74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	  	xLastWakeTime = xTaskGetTickCount();
 8002e76:	f7ff fab3 	bl	80023e0 <xTaskGetTickCount>
 8002e7a:	9000      	str	r0, [sp, #0]
	  	vTaskSetTimeOutState( &xTimeOut );
 8002e7c:	4813      	ldr	r0, [pc, #76]	; (8002ecc <StartTask02+0x58>)
	  	 while((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)) ==1){
 8002e7e:	4c14      	ldr	r4, [pc, #80]	; (8002ed0 <StartTask02+0x5c>)
	  	 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8002e80:	4d14      	ldr	r5, [pc, #80]	; (8002ed4 <StartTask02+0x60>)
	  	 if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) != pdFALSE )
 8002e82:	4e12      	ldr	r6, [pc, #72]	; (8002ecc <StartTask02+0x58>)
	  	vTaskSetTimeOutState( &xTimeOut );
 8002e84:	f7ff fcda 	bl	800283c <vTaskSetTimeOutState>
	  	const TickType_t xTicksToWait=pdMS_TO_TICKS(3000 );
 8002e88:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002e8c:	9301      	str	r3, [sp, #4]
	  	 while((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)) ==1){
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7fd fc85 	bl	80007a0 <HAL_GPIO_ReadPin>
 8002e96:	2801      	cmp	r0, #1
 8002e98:	d105      	bne.n	8002ea6 <StartTask02+0x32>
	  	 if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) != pdFALSE )
 8002e9a:	a901      	add	r1, sp, #4
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f7ff fcf5 	bl	800288c <xTaskCheckForTimeOut>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d0f3      	beq.n	8002e8e <StartTask02+0x1a>
	  	 if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)) !=1){
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7fd fc79 	bl	80007a0 <HAL_GPIO_ReadPin>
 8002eae:	2801      	cmp	r0, #1
 8002eb0:	d105      	bne.n	8002ebe <StartTask02+0x4a>
	  	    vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8002eb2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002eb6:	4668      	mov	r0, sp
 8002eb8:	f7ff fb9c 	bl	80025f4 <vTaskDelayUntil>
	  	 while((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)) ==1){
 8002ebc:	e7e7      	b.n	8002e8e <StartTask02+0x1a>
	  	 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f7fd fc71 	bl	80007ac <HAL_GPIO_WritePin>
 8002eca:	e7f2      	b.n	8002eb2 <StartTask02+0x3e>
 8002ecc:	20004978 	.word	0x20004978
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020c00 	.word	0x40020c00

08002ed8 <SystemClock_Config>:
{
 8002ed8:	b530      	push	{r4, r5, lr}
 8002eda:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002edc:	2230      	movs	r2, #48	; 0x30
 8002ede:	2100      	movs	r1, #0
 8002ee0:	a808      	add	r0, sp, #32
 8002ee2:	f000 f9ec 	bl	80032be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2214      	movs	r2, #20
 8002eea:	a803      	add	r0, sp, #12
 8002eec:	f000 f9e7 	bl	80032be <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	2500      	movs	r5, #0
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <SystemClock_Config+0x8c>)
 8002ef4:	9501      	str	r5, [sp, #4]
 8002ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <SystemClock_Config+0x90>)
 8002f0a:	9502      	str	r5, [sp, #8]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f26:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f2c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002f32:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f34:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002f36:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f38:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f3e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f40:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f42:	f7fd fc39 	bl	80007b8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f46:	230f      	movs	r3, #15
 8002f48:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f4a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f50:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f52:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f54:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f56:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002f58:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f5a:	f7fd fe01 	bl	8000b60 <HAL_RCC_ClockConfig>
}
 8002f5e:	b015      	add	sp, #84	; 0x54
 8002f60:	bd30      	pop	{r4, r5, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40007000 	.word	0x40007000

08002f6c <main>:
{
 8002f6c:	b500      	push	{lr}
 8002f6e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002f70:	f7fd fab6 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8002f74:	f7ff ffb0 	bl	8002ed8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	2214      	movs	r2, #20
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	a803      	add	r0, sp, #12
 8002f7e:	f000 f99e 	bl	80032be <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f82:	2400      	movs	r4, #0
 8002f84:	4b3a      	ldr	r3, [pc, #232]	; (8003070 <main+0x104>)
 8002f86:	9400      	str	r4, [sp, #0]
 8002f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002f8a:	483a      	ldr	r0, [pc, #232]	; (8003074 <main+0x108>)
  htim6.Instance = TIM6;
 8002f8c:	4d3a      	ldr	r5, [pc, #232]	; (8003078 <main+0x10c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
 8002f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f96:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002f9a:	9200      	str	r2, [sp, #0]
 8002f9c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	9401      	str	r4, [sp, #4]
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002faa:	f002 0201 	and.w	r2, r2, #1
 8002fae:	9201      	str	r2, [sp, #4]
 8002fb0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb2:	9402      	str	r4, [sp, #8]
 8002fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb6:	f042 0208 	orr.w	r2, r2, #8
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002fc2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fc4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002fc6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fca:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fcc:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002fce:	f7fd fbed 	bl	80007ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fd2:	4b2a      	ldr	r3, [pc, #168]	; (800307c <main+0x110>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd4:	482a      	ldr	r0, [pc, #168]	; (8003080 <main+0x114>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fd6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fda:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fde:	f7fd faff 	bl	80005e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002fe2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fe6:	a903      	add	r1, sp, #12
 8002fe8:	4822      	ldr	r0, [pc, #136]	; (8003074 <main+0x108>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002fea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fec:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff2:	f7fd faf5 	bl	80005e0 <HAL_GPIO_Init>
  htim6.Init.Prescaler = 16;
 8002ff6:	4a23      	ldr	r2, [pc, #140]	; (8003084 <main+0x118>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff8:	9403      	str	r4, [sp, #12]
  htim6.Init.Prescaler = 16;
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003000:	4628      	mov	r0, r5
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	61ab      	str	r3, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003006:	9404      	str	r4, [sp, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003008:	60ac      	str	r4, [r5, #8]
  htim6.Init.Period = 0;
 800300a:	60ec      	str	r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800300c:	f7fd ff8e 	bl	8000f2c <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003010:	a903      	add	r1, sp, #12
 8003012:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003014:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003016:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003018:	f7fd ffa2 	bl	8000f60 <HAL_TIMEx_MasterConfigSynchronization>
  osKernelInitialize();
 800301c:	f7fd ffee 	bl	8000ffc <osKernelInitialize>
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <main+0x11c>)
 8003022:	4631      	mov	r1, r6
 8003024:	4630      	mov	r0, r6
 8003026:	f7fe f8df 	bl	80011e8 <osSemaphoreNew>
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <main+0x120>)
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 800302c:	4a18      	ldr	r2, [pc, #96]	; (8003090 <main+0x124>)
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 800302e:	6018      	str	r0, [r3, #0]
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 8003030:	2102      	movs	r1, #2
 8003032:	4608      	mov	r0, r1
 8003034:	f7fe f8d8 	bl	80011e8 <osSemaphoreNew>
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <main+0x128>)
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 800303a:	4622      	mov	r2, r4
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 800303c:	6018      	str	r0, [r3, #0]
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 800303e:	4631      	mov	r1, r6
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <main+0x12c>)
 8003042:	4816      	ldr	r0, [pc, #88]	; (800309c <main+0x130>)
 8003044:	f7fe f890 	bl	8001168 <osTimerNew>
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <main+0x134>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800304a:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <main+0x138>)
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 800304c:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800304e:	4621      	mov	r1, r4
 8003050:	4815      	ldr	r0, [pc, #84]	; (80030a8 <main+0x13c>)
 8003052:	f7fe f80f 	bl	8001074 <osThreadNew>
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <main+0x140>)
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <main+0x144>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800305a:	6018      	str	r0, [r3, #0]
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800305c:	4621      	mov	r1, r4
 800305e:	4815      	ldr	r0, [pc, #84]	; (80030b4 <main+0x148>)
 8003060:	f7fe f808 	bl	8001074 <osThreadNew>
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <main+0x14c>)
 8003066:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003068:	f7fd ffe4 	bl	8001034 <osKernelStart>
 800306c:	e7fe      	b.n	800306c <main+0x100>
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40020c00 	.word	0x40020c00
 8003078:	20004990 	.word	0x20004990
 800307c:	10110000 	.word	0x10110000
 8003080:	40020000 	.word	0x40020000
 8003084:	40001000 	.word	0x40001000
 8003088:	08003320 	.word	0x08003320
 800308c:	200049d4 	.word	0x200049d4
 8003090:	08003330 	.word	0x08003330
 8003094:	2000498c 	.word	0x2000498c
 8003098:	08003364 	.word	0x08003364
 800309c:	08002e67 	.word	0x08002e67
 80030a0:	200049d0 	.word	0x200049d0
 80030a4:	080032fc 	.word	0x080032fc
 80030a8:	08002e69 	.word	0x08002e69
 80030ac:	20004974 	.word	0x20004974
 80030b0:	08003340 	.word	0x08003340
 80030b4:	08002e75 	.word	0x08002e75
 80030b8:	20004984 	.word	0x20004984

080030bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80030bc:	6802      	ldr	r2, [r0, #0]
 80030be:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80030c4:	f7fd ba26 	b.w	8000514 <HAL_IncTick>
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000

080030d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_MspInit+0x40>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	9200      	str	r2, [sp, #0]
 80030d8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030da:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80030de:	6459      	str	r1, [r3, #68]	; 0x44
 80030e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030e2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80030e6:	9100      	str	r1, [sp, #0]
 80030e8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	9201      	str	r2, [sp, #4]
 80030ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030ee:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80030f2:	6419      	str	r1, [r3, #64]	; 0x40
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030fc:	210f      	movs	r1, #15
 80030fe:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003104:	f7fd fa2a 	bl	800055c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003108:	b003      	add	sp, #12
 800310a:	f85d fb04 	ldr.w	pc, [sp], #4
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003114:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_TIM_Base_MspInit+0x38>)
 8003118:	6802      	ldr	r2, [r0, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d113      	bne.n	8003146 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800311e:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8003122:	2200      	movs	r2, #0
 8003124:	9201      	str	r2, [sp, #4]
 8003126:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003128:	f041 0110 	orr.w	r1, r1, #16
 800312c:	6419      	str	r1, [r3, #64]	; 0x40
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	9301      	str	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003136:	2036      	movs	r0, #54	; 0x36
 8003138:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 800313a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800313c:	f7fd fa0e 	bl	800055c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003140:	2036      	movs	r0, #54	; 0x36
 8003142:	f7fd fa3f 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003146:	b003      	add	sp, #12
 8003148:	f85d fb04 	ldr.w	pc, [sp], #4
 800314c:	40001000 	.word	0x40001000

08003150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003150:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003152:	4601      	mov	r1, r0
{
 8003154:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003156:	2200      	movs	r2, #0
 8003158:	2019      	movs	r0, #25
 800315a:	f7fd f9ff 	bl	800055c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800315e:	2019      	movs	r0, #25
 8003160:	f7fd fa30 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003164:	2500      	movs	r5, #0
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <HAL_InitTick+0x6c>)
 8003168:	9502      	str	r5, [sp, #8]
 800316a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800316c:	4c14      	ldr	r4, [pc, #80]	; (80031c0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800317c:	a901      	add	r1, sp, #4
 800317e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003180:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003182:	f7fd fd99 	bl	8000cb8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003186:	f7fd fd87 	bl	8000c98 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_InitTick+0x74>)
 800318c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800318e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003192:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003194:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_InitTick+0x78>)
 8003198:	fbb0 f0f3 	udiv	r0, r0, r3
 800319c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800319e:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80031a0:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80031a2:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a4:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80031a6:	f7fd fec1 	bl	8000f2c <HAL_TIM_Base_Init>
 80031aa:	b920      	cbnz	r0, 80031b6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7fd fda1 	bl	8000cf4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80031b2:	b009      	add	sp, #36	; 0x24
 80031b4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80031b6:	2001      	movs	r0, #1
 80031b8:	e7fb      	b.n	80031b2 <HAL_InitTick+0x62>
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	200049dc 	.word	0x200049dc
 80031c4:	40010000 	.word	0x40010000
 80031c8:	000f4240 	.word	0x000f4240

080031cc <NMI_Handler>:
 80031cc:	4770      	bx	lr

080031ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ce:	e7fe      	b.n	80031ce <HardFault_Handler>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	e7fe      	b.n	80031d0 <MemManage_Handler>

080031d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d2:	e7fe      	b.n	80031d2 <BusFault_Handler>

080031d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d4:	e7fe      	b.n	80031d4 <UsageFault_Handler>

080031d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d6:	4770      	bx	lr

080031d8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031d8:	4801      	ldr	r0, [pc, #4]	; (80031e0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80031da:	f7fd bd9f 	b.w	8000d1c <HAL_TIM_IRQHandler>
 80031de:	bf00      	nop
 80031e0:	200049dc 	.word	0x200049dc

080031e4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031e4:	4801      	ldr	r0, [pc, #4]	; (80031ec <TIM6_DAC_IRQHandler+0x8>)
 80031e6:	f7fd bd99 	b.w	8000d1c <HAL_TIM_IRQHandler>
 80031ea:	bf00      	nop
 80031ec:	20004990 	.word	0x20004990

080031f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <SystemInit+0x18>)
 80031f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031f6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80031fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800320c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003212:	e003      	b.n	800321c <LoopCopyDataInit>

08003214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800321a:	3104      	adds	r1, #4

0800321c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003224:	d3f6      	bcc.n	8003214 <CopyDataInit>
  ldr  r2, =_sbss
 8003226:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003228:	e002      	b.n	8003230 <LoopFillZerobss>

0800322a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800322a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800322c:	f842 3b04 	str.w	r3, [r2], #4

08003230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003234:	d3f9      	bcc.n	800322a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003236:	f7ff ffdb 	bl	80031f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800323a:	f000 f811 	bl	8003260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323e:	f7ff fe95 	bl	8002f6c <main>
  bx  lr    
 8003242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003248:	080033dc 	.word	0x080033dc
  ldr  r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003250:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003254:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003258:	20004a1c 	.word	0x20004a1c

0800325c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC_IRQHandler>
	...

08003260 <__libc_init_array>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	4e0d      	ldr	r6, [pc, #52]	; (8003298 <__libc_init_array+0x38>)
 8003264:	4c0d      	ldr	r4, [pc, #52]	; (800329c <__libc_init_array+0x3c>)
 8003266:	1ba4      	subs	r4, r4, r6
 8003268:	10a4      	asrs	r4, r4, #2
 800326a:	2500      	movs	r5, #0
 800326c:	42a5      	cmp	r5, r4
 800326e:	d109      	bne.n	8003284 <__libc_init_array+0x24>
 8003270:	4e0b      	ldr	r6, [pc, #44]	; (80032a0 <__libc_init_array+0x40>)
 8003272:	4c0c      	ldr	r4, [pc, #48]	; (80032a4 <__libc_init_array+0x44>)
 8003274:	f000 f82c 	bl	80032d0 <_init>
 8003278:	1ba4      	subs	r4, r4, r6
 800327a:	10a4      	asrs	r4, r4, #2
 800327c:	2500      	movs	r5, #0
 800327e:	42a5      	cmp	r5, r4
 8003280:	d105      	bne.n	800328e <__libc_init_array+0x2e>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003288:	4798      	blx	r3
 800328a:	3501      	adds	r5, #1
 800328c:	e7ee      	b.n	800326c <__libc_init_array+0xc>
 800328e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003292:	4798      	blx	r3
 8003294:	3501      	adds	r5, #1
 8003296:	e7f2      	b.n	800327e <__libc_init_array+0x1e>
 8003298:	080033d4 	.word	0x080033d4
 800329c:	080033d4 	.word	0x080033d4
 80032a0:	080033d4 	.word	0x080033d4
 80032a4:	080033d8 	.word	0x080033d8

080032a8 <memcpy>:
 80032a8:	b510      	push	{r4, lr}
 80032aa:	1e43      	subs	r3, r0, #1
 80032ac:	440a      	add	r2, r1
 80032ae:	4291      	cmp	r1, r2
 80032b0:	d100      	bne.n	80032b4 <memcpy+0xc>
 80032b2:	bd10      	pop	{r4, pc}
 80032b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032bc:	e7f7      	b.n	80032ae <memcpy+0x6>

080032be <memset>:
 80032be:	4402      	add	r2, r0
 80032c0:	4603      	mov	r3, r0
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d100      	bne.n	80032c8 <memset+0xa>
 80032c6:	4770      	bx	lr
 80032c8:	f803 1b01 	strb.w	r1, [r3], #1
 80032cc:	e7f9      	b.n	80032c2 <memset+0x4>
	...

080032d0 <_init>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	bf00      	nop
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr

080032dc <_fini>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr
