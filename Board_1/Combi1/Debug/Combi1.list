
Combi1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800509c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00004c68  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004c78  20004c78  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020ea3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000040b7  00000000  00000000  00040ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ea45  00000000  00000000  00044f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001280  00000000  00000000  000539e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00054c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009ec2  00000000  00000000  00056418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007b89  00000000  00000000  000602da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00067e63  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003848  00000000  00000000  00067ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f08 	.word	0x08004f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004f08 	.word	0x08004f08

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b97a 	b.w	8000cb0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	468c      	mov	ip, r1
 80009da:	460d      	mov	r5, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	9e08      	ldr	r6, [sp, #32]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d151      	bne.n	8000a88 <__udivmoddi4+0xb4>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d96d      	bls.n	8000ac6 <__udivmoddi4+0xf2>
 80009ea:	fab2 fe82 	clz	lr, r2
 80009ee:	f1be 0f00 	cmp.w	lr, #0
 80009f2:	d00b      	beq.n	8000a0c <__udivmoddi4+0x38>
 80009f4:	f1ce 0c20 	rsb	ip, lr, #32
 80009f8:	fa01 f50e 	lsl.w	r5, r1, lr
 80009fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a04:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a08:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a0c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a10:	0c25      	lsrs	r5, r4, #16
 8000a12:	fbbc f8fa 	udiv	r8, ip, sl
 8000a16:	fa1f f987 	uxth.w	r9, r7
 8000a1a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a1e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a22:	fb08 f309 	mul.w	r3, r8, r9
 8000a26:	42ab      	cmp	r3, r5
 8000a28:	d90a      	bls.n	8000a40 <__udivmoddi4+0x6c>
 8000a2a:	19ed      	adds	r5, r5, r7
 8000a2c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a30:	f080 8123 	bcs.w	8000c7a <__udivmoddi4+0x2a6>
 8000a34:	42ab      	cmp	r3, r5
 8000a36:	f240 8120 	bls.w	8000c7a <__udivmoddi4+0x2a6>
 8000a3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3e:	443d      	add	r5, r7
 8000a40:	1aed      	subs	r5, r5, r3
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a48:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a50:	fb00 f909 	mul.w	r9, r0, r9
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x98>
 8000a58:	19e4      	adds	r4, r4, r7
 8000a5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a5e:	f080 810a 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000a62:	45a1      	cmp	r9, r4
 8000a64:	f240 8107 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	443c      	add	r4, r7
 8000a6c:	eba4 0409 	sub.w	r4, r4, r9
 8000a70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a74:	2100      	movs	r1, #0
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d061      	beq.n	8000b3e <__udivmoddi4+0x16a>
 8000a7a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a7e:	2300      	movs	r3, #0
 8000a80:	6034      	str	r4, [r6, #0]
 8000a82:	6073      	str	r3, [r6, #4]
 8000a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d907      	bls.n	8000a9c <__udivmoddi4+0xc8>
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d054      	beq.n	8000b3a <__udivmoddi4+0x166>
 8000a90:	2100      	movs	r1, #0
 8000a92:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a96:	4608      	mov	r0, r1
 8000a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9c:	fab3 f183 	clz	r1, r3
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	f040 808e 	bne.w	8000bc2 <__udivmoddi4+0x1ee>
 8000aa6:	42ab      	cmp	r3, r5
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xdc>
 8000aaa:	4282      	cmp	r2, r0
 8000aac:	f200 80fa 	bhi.w	8000ca4 <__udivmoddi4+0x2d0>
 8000ab0:	1a84      	subs	r4, r0, r2
 8000ab2:	eb65 0503 	sbc.w	r5, r5, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	46ac      	mov	ip, r5
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d03f      	beq.n	8000b3e <__udivmoddi4+0x16a>
 8000abe:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	b912      	cbnz	r2, 8000ace <__udivmoddi4+0xfa>
 8000ac8:	2701      	movs	r7, #1
 8000aca:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ace:	fab7 fe87 	clz	lr, r7
 8000ad2:	f1be 0f00 	cmp.w	lr, #0
 8000ad6:	d134      	bne.n	8000b42 <__udivmoddi4+0x16e>
 8000ad8:	1beb      	subs	r3, r5, r7
 8000ada:	0c3a      	lsrs	r2, r7, #16
 8000adc:	fa1f fc87 	uxth.w	ip, r7
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ae6:	0c25      	lsrs	r5, r4, #16
 8000ae8:	fb02 3318 	mls	r3, r2, r8, r3
 8000aec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000af0:	fb0c f308 	mul.w	r3, ip, r8
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x134>
 8000af8:	19ed      	adds	r5, r5, r7
 8000afa:	f108 30ff 	add.w	r0, r8, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x132>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	f200 80d1 	bhi.w	8000ca8 <__udivmoddi4+0x2d4>
 8000b06:	4680      	mov	r8, r0
 8000b08:	1aed      	subs	r5, r5, r3
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b10:	fb02 5510 	mls	r5, r2, r0, r5
 8000b14:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b18:	fb0c fc00 	mul.w	ip, ip, r0
 8000b1c:	45a4      	cmp	ip, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x15c>
 8000b20:	19e4      	adds	r4, r4, r7
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x15a>
 8000b28:	45a4      	cmp	ip, r4
 8000b2a:	f200 80b8 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 040c 	sub.w	r4, r4, ip
 8000b34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b38:	e79d      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000b3a:	4631      	mov	r1, r6
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	f1ce 0420 	rsb	r4, lr, #32
 8000b46:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b4a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b4e:	fa20 f804 	lsr.w	r8, r0, r4
 8000b52:	0c3a      	lsrs	r2, r7, #16
 8000b54:	fa25 f404 	lsr.w	r4, r5, r4
 8000b58:	ea48 0803 	orr.w	r8, r8, r3
 8000b5c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b60:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b64:	fb02 4411 	mls	r4, r2, r1, r4
 8000b68:	fa1f fc87 	uxth.w	ip, r7
 8000b6c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b70:	fb01 f30c 	mul.w	r3, r1, ip
 8000b74:	42ab      	cmp	r3, r5
 8000b76:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x1bc>
 8000b7c:	19ed      	adds	r5, r5, r7
 8000b7e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b82:	f080 808a 	bcs.w	8000c9a <__udivmoddi4+0x2c6>
 8000b86:	42ab      	cmp	r3, r5
 8000b88:	f240 8087 	bls.w	8000c9a <__udivmoddi4+0x2c6>
 8000b8c:	3902      	subs	r1, #2
 8000b8e:	443d      	add	r5, r7
 8000b90:	1aeb      	subs	r3, r5, r3
 8000b92:	fa1f f588 	uxth.w	r5, r8
 8000b96:	fbb3 f0f2 	udiv	r0, r3, r2
 8000b9a:	fb02 3310 	mls	r3, r2, r0, r3
 8000b9e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ba2:	fb00 f30c 	mul.w	r3, r0, ip
 8000ba6:	42ab      	cmp	r3, r5
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x1e6>
 8000baa:	19ed      	adds	r5, r5, r7
 8000bac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bb0:	d26f      	bcs.n	8000c92 <__udivmoddi4+0x2be>
 8000bb2:	42ab      	cmp	r3, r5
 8000bb4:	d96d      	bls.n	8000c92 <__udivmoddi4+0x2be>
 8000bb6:	3802      	subs	r0, #2
 8000bb8:	443d      	add	r5, r7
 8000bba:	1aeb      	subs	r3, r5, r3
 8000bbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc0:	e78f      	b.n	8000ae2 <__udivmoddi4+0x10e>
 8000bc2:	f1c1 0720 	rsb	r7, r1, #32
 8000bc6:	fa22 f807 	lsr.w	r8, r2, r7
 8000bca:	408b      	lsls	r3, r1
 8000bcc:	fa05 f401 	lsl.w	r4, r5, r1
 8000bd0:	ea48 0303 	orr.w	r3, r8, r3
 8000bd4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bd8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bdc:	40fd      	lsrs	r5, r7
 8000bde:	ea4e 0e04 	orr.w	lr, lr, r4
 8000be2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000be6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000bea:	fb0c 5519 	mls	r5, ip, r9, r5
 8000bee:	fa1f f883 	uxth.w	r8, r3
 8000bf2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bf6:	fb09 f408 	mul.w	r4, r9, r8
 8000bfa:	42ac      	cmp	r4, r5
 8000bfc:	fa02 f201 	lsl.w	r2, r2, r1
 8000c00:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x244>
 8000c06:	18ed      	adds	r5, r5, r3
 8000c08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c0c:	d243      	bcs.n	8000c96 <__udivmoddi4+0x2c2>
 8000c0e:	42ac      	cmp	r4, r5
 8000c10:	d941      	bls.n	8000c96 <__udivmoddi4+0x2c2>
 8000c12:	f1a9 0902 	sub.w	r9, r9, #2
 8000c16:	441d      	add	r5, r3
 8000c18:	1b2d      	subs	r5, r5, r4
 8000c1a:	fa1f fe8e 	uxth.w	lr, lr
 8000c1e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c22:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c26:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c2a:	fb00 f808 	mul.w	r8, r0, r8
 8000c2e:	45a0      	cmp	r8, r4
 8000c30:	d907      	bls.n	8000c42 <__udivmoddi4+0x26e>
 8000c32:	18e4      	adds	r4, r4, r3
 8000c34:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c38:	d229      	bcs.n	8000c8e <__udivmoddi4+0x2ba>
 8000c3a:	45a0      	cmp	r8, r4
 8000c3c:	d927      	bls.n	8000c8e <__udivmoddi4+0x2ba>
 8000c3e:	3802      	subs	r0, #2
 8000c40:	441c      	add	r4, r3
 8000c42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c46:	eba4 0408 	sub.w	r4, r4, r8
 8000c4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c4e:	454c      	cmp	r4, r9
 8000c50:	46c6      	mov	lr, r8
 8000c52:	464d      	mov	r5, r9
 8000c54:	d315      	bcc.n	8000c82 <__udivmoddi4+0x2ae>
 8000c56:	d012      	beq.n	8000c7e <__udivmoddi4+0x2aa>
 8000c58:	b156      	cbz	r6, 8000c70 <__udivmoddi4+0x29c>
 8000c5a:	ebba 030e 	subs.w	r3, sl, lr
 8000c5e:	eb64 0405 	sbc.w	r4, r4, r5
 8000c62:	fa04 f707 	lsl.w	r7, r4, r7
 8000c66:	40cb      	lsrs	r3, r1
 8000c68:	431f      	orrs	r7, r3
 8000c6a:	40cc      	lsrs	r4, r1
 8000c6c:	6037      	str	r7, [r6, #0]
 8000c6e:	6074      	str	r4, [r6, #4]
 8000c70:	2100      	movs	r1, #0
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	4618      	mov	r0, r3
 8000c78:	e6f8      	b.n	8000a6c <__udivmoddi4+0x98>
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	e6e0      	b.n	8000a40 <__udivmoddi4+0x6c>
 8000c7e:	45c2      	cmp	sl, r8
 8000c80:	d2ea      	bcs.n	8000c58 <__udivmoddi4+0x284>
 8000c82:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c86:	eb69 0503 	sbc.w	r5, r9, r3
 8000c8a:	3801      	subs	r0, #1
 8000c8c:	e7e4      	b.n	8000c58 <__udivmoddi4+0x284>
 8000c8e:	4628      	mov	r0, r5
 8000c90:	e7d7      	b.n	8000c42 <__udivmoddi4+0x26e>
 8000c92:	4640      	mov	r0, r8
 8000c94:	e791      	b.n	8000bba <__udivmoddi4+0x1e6>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e7be      	b.n	8000c18 <__udivmoddi4+0x244>
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	e778      	b.n	8000b90 <__udivmoddi4+0x1bc>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	e745      	b.n	8000b30 <__udivmoddi4+0x15c>
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e708      	b.n	8000aba <__udivmoddi4+0xe6>
 8000ca8:	f1a8 0802 	sub.w	r8, r8, #2
 8000cac:	443d      	add	r5, r7
 8000cae:	e72b      	b.n	8000b08 <__udivmoddi4+0x134>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x30>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cbe:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cc6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 fc71 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f004 f840 	bl	8004d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f003 ff08 	bl	8004af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	bd08      	pop	{r3, pc}
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ce8:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <HAL_IncTick+0x10>)
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <HAL_IncTick+0x14>)
 8000cec:	6811      	ldr	r1, [r2, #0]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	440b      	add	r3, r1
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20004934 	.word	0x20004934
 8000cfc:	20000000 	.word	0x20000000

08000d00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d00:	4b01      	ldr	r3, [pc, #4]	; (8000d08 <HAL_GetTick+0x8>)
 8000d02:	6818      	ldr	r0, [r3, #0]
}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20004934 	.word	0x20004934

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fff6 	bl	8000d00 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d14:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	bf1c      	itt	ne
 8000d18:	4b05      	ldrne	r3, [pc, #20]	; (8000d30 <HAL_Delay+0x24>)
 8000d1a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	bf18      	it	ne
 8000d20:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d22:	f7ff ffed 	bl	8000d00 <HAL_GetTick>
 8000d26:	1b40      	subs	r0, r0, r5
 8000d28:	4284      	cmp	r4, r0
 8000d2a:	d8fa      	bhi.n	8000d22 <HAL_Delay+0x16>
  {
  }
}
 8000d2c:	bd38      	pop	{r3, r4, r5, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000000 	.word	0x20000000

08000d34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d34:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d36:	4604      	mov	r4, r0
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	f000 809b 	beq.w	8000e74 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d3e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000d40:	b925      	cbnz	r5, 8000d4c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d42:	f003 fef7 	bl	8004b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d46:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d48:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d4e:	06db      	lsls	r3, r3, #27
 8000d50:	f100 808e 	bmi.w	8000e70 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d5a:	f023 0302 	bic.w	r3, r3, #2
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000d64:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <HAL_ADC_Init+0x144>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000d6c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	6861      	ldr	r1, [r4, #4]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d76:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d78:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d8a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d8c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d8e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d92:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d9a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d9c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000daa:	4934      	ldr	r1, [pc, #208]	; (8000e7c <HAL_ADC_Init+0x148>)
 8000dac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dae:	428a      	cmp	r2, r1
 8000db0:	d052      	beq.n	8000e58 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000db2:	6899      	ldr	r1, [r3, #8]
 8000db4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000db8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000dba:	6899      	ldr	r1, [r3, #8]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dc0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000dc2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dce:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000dd0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000dd2:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000dd4:	f022 0202 	bic.w	r2, r2, #2
 8000dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000de0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000de2:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d03e      	beq.n	8000e68 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000dea:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dec:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000dfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	3901      	subs	r1, #1
 8000e00:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e04:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e08:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e12:	3901      	subs	r1, #1
 8000e14:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e1a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e1c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000e2c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e2e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e30:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e38:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e3a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e3c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e40:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e42:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000e50:	2300      	movs	r3, #0
 8000e52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000e56:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e66:	e7b2      	b.n	8000dce <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e6e:	e7c9      	b.n	8000e04 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000e70:	2001      	movs	r0, #1
 8000e72:	e7ed      	b.n	8000e50 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000e74:	2001      	movs	r0, #1
}
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
 8000e78:	40012300 	.word	0x40012300
 8000e7c:	0f000001 	.word	0x0f000001

08000e80 <HAL_ADC_Start_DMA>:
{
 8000e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e82:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8000e84:	2200      	movs	r2, #0
 8000e86:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000e88:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000e8c:	2a01      	cmp	r2, #1
{
 8000e8e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000e90:	d077      	beq.n	8000f82 <HAL_ADC_Start_DMA+0x102>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e92:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e9a:	68aa      	ldr	r2, [r5, #8]
 8000e9c:	07d0      	lsls	r0, r2, #31
 8000e9e:	d505      	bpl.n	8000eac <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ea0:	68aa      	ldr	r2, [r5, #8]
 8000ea2:	07d2      	lsls	r2, r2, #31
 8000ea4:	d415      	bmi.n	8000ed2 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8000ea6:	2000      	movs	r0, #0
}
 8000ea8:	b003      	add	sp, #12
 8000eaa:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000eac:	68aa      	ldr	r2, [r5, #8]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb4:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <HAL_ADC_Start_DMA+0x108>)
 8000eb6:	6810      	ldr	r0, [r2, #0]
 8000eb8:	4a34      	ldr	r2, [pc, #208]	; (8000f8c <HAL_ADC_Start_DMA+0x10c>)
 8000eba:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ebe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000ec2:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8000ec4:	9a01      	ldr	r2, [sp, #4]
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d0ea      	beq.n	8000ea0 <HAL_ADC_Start_DMA+0x20>
      counter--;
 8000eca:	9a01      	ldr	r2, [sp, #4]
 8000ecc:	3a01      	subs	r2, #1
 8000ece:	9201      	str	r2, [sp, #4]
 8000ed0:	e7f8      	b.n	8000ec4 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8000ed2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000ed4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000ed8:	f020 0001 	bic.w	r0, r0, #1
 8000edc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000ee0:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ee2:	686a      	ldr	r2, [r5, #4]
 8000ee4:	0550      	lsls	r0, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ee6:	bf41      	itttt	mi
 8000ee8:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 8000eea:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000eee:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000ef2:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ef6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000efc:	bf1c      	itt	ne
 8000efe:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000f00:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000f04:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8000f06:	2200      	movs	r2, #0
 8000f08:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f0c:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <HAL_ADC_Start_DMA+0x110>)
 8000f0e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <HAL_ADC_Start_DMA+0x114>)
 8000f12:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f14:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <HAL_ADC_Start_DMA+0x118>)
 8000f16:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f18:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f1c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f1e:	686a      	ldr	r2, [r5, #4]
 8000f20:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f24:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f26:	68aa      	ldr	r2, [r5, #8]
 8000f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f2c:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f2e:	460a      	mov	r2, r1
 8000f30:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000f34:	f000 fc28 	bl	8001788 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f38:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <HAL_ADC_Start_DMA+0x11c>)
 8000f3a:	4919      	ldr	r1, [pc, #100]	; (8000fa0 <HAL_ADC_Start_DMA+0x120>)
 8000f3c:	6853      	ldr	r3, [r2, #4]
 8000f3e:	f013 0f1f 	tst.w	r3, #31
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	d11a      	bne.n	8000f7c <HAL_ADC_Start_DMA+0xfc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d006      	beq.n	8000f58 <HAL_ADC_Start_DMA+0xd8>
 8000f4a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d10b      	bne.n	8000f6a <HAL_ADC_Start_DMA+0xea>
 8000f52:	6852      	ldr	r2, [r2, #4]
 8000f54:	06d2      	lsls	r2, r2, #27
 8000f56:	d1a6      	bne.n	8000ea6 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f58:	6898      	ldr	r0, [r3, #8]
 8000f5a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000f5e:	d1a2      	bne.n	8000ea6 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	e79e      	b.n	8000ea8 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <HAL_ADC_Start_DMA+0x124>)
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d19a      	bne.n	8000ea6 <HAL_ADC_Start_DMA+0x26>
 8000f70:	6852      	ldr	r2, [r2, #4]
 8000f72:	f002 021f 	and.w	r2, r2, #31
 8000f76:	2a0f      	cmp	r2, #15
 8000f78:	d9ee      	bls.n	8000f58 <HAL_ADC_Start_DMA+0xd8>
 8000f7a:	e794      	b.n	8000ea6 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d192      	bne.n	8000ea6 <HAL_ADC_Start_DMA+0x26>
 8000f80:	e7ea      	b.n	8000f58 <HAL_ADC_Start_DMA+0xd8>
  __HAL_LOCK(hadc);
 8000f82:	2002      	movs	r0, #2
 8000f84:	e790      	b.n	8000ea8 <HAL_ADC_Start_DMA+0x28>
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	000f4240 	.word	0x000f4240
 8000f90:	080010ff 	.word	0x080010ff
 8000f94:	08000fb3 	.word	0x08000fb3
 8000f98:	080010e9 	.word	0x080010e9
 8000f9c:	40012300 	.word	0x40012300
 8000fa0:	40012000 	.word	0x40012000
 8000fa4:	40012200 	.word	0x40012200

08000fa8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000fa8:	6803      	ldr	r3, [r0, #0]
 8000faa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000fac:	4770      	bx	lr

08000fae <HAL_ADC_ConvCpltCallback>:
 8000fae:	4770      	bx	lr

08000fb0 <HAL_ADC_ConvHalfCpltCallback>:
 8000fb0:	4770      	bx	lr

08000fb2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fb2:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fb4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000fb6:	f7ff fffb 	bl	8000fb0 <HAL_ADC_ConvHalfCpltCallback>
 8000fba:	bd08      	pop	{r3, pc}

08000fbc <HAL_ADC_LevelOutOfWindowCallback>:
 8000fbc:	4770      	bx	lr

08000fbe <HAL_ADC_ErrorCallback>:
{
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_ADC_IRQHandler>:
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000fc2:	6803      	ldr	r3, [r0, #0]
 8000fc4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000fc6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000fc8:	078d      	lsls	r5, r1, #30
{
 8000fca:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8000fcc:	d52b      	bpl.n	8001026 <HAL_ADC_IRQHandler+0x66>
 8000fce:	0690      	lsls	r0, r2, #26
 8000fd0:	d529      	bpl.n	8001026 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fd4:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fd6:	bf5e      	ittt	pl
 8000fd8:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000fda:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000fde:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000fe6:	d117      	bne.n	8001018 <HAL_ADC_IRQHandler+0x58>
 8000fe8:	7e22      	ldrb	r2, [r4, #24]
 8000fea:	b9aa      	cbnz	r2, 8001018 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fee:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000ff2:	d002      	beq.n	8000ffa <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ff4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ff6:	0552      	lsls	r2, r2, #21
 8000ff8:	d40e      	bmi.n	8001018 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	f022 0220 	bic.w	r2, r2, #32
 8001000:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001008:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800100a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800100c:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800100e:	bf5e      	ittt	pl
 8001010:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001012:	f043 0301 	orrpl.w	r3, r3, #1
 8001016:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff ffc8 	bl	8000fae <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f06f 0212 	mvn.w	r2, #18
 8001024:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800102a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800102c:	074d      	lsls	r5, r1, #29
 800102e:	d532      	bpl.n	8001096 <HAL_ADC_IRQHandler+0xd6>
 8001030:	0610      	lsls	r0, r2, #24
 8001032:	d530      	bpl.n	8001096 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001034:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001036:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001038:	bf5e      	ittt	pl
 800103a:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800103c:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001040:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001048:	d11e      	bne.n	8001088 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800104a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800104c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001050:	d002      	beq.n	8001058 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001052:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001054:	0552      	lsls	r2, r2, #21
 8001056:	d417      	bmi.n	8001088 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001058:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800105a:	0555      	lsls	r5, r2, #21
 800105c:	d414      	bmi.n	8001088 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800105e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001060:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001064:	d110      	bne.n	8001088 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001066:	7e22      	ldrb	r2, [r4, #24]
 8001068:	b972      	cbnz	r2, 8001088 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001070:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001078:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800107a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800107c:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800107e:	bf5e      	ittt	pl
 8001080:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001082:	f043 0301 	orrpl.w	r3, r3, #1
 8001086:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001088:	4620      	mov	r0, r4
 800108a:	f000 f905 	bl	8001298 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	f06f 020c 	mvn.w	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800109a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800109c:	07c9      	lsls	r1, r1, #31
 800109e:	d50f      	bpl.n	80010c0 <HAL_ADC_IRQHandler+0x100>
 80010a0:	0655      	lsls	r5, r2, #25
 80010a2:	d50d      	bpl.n	80010c0 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	07d8      	lsls	r0, r3, #31
 80010a8:	d50a      	bpl.n	80010c0 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b0:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff ff82 	bl	8000fbc <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	f06f 0201 	mvn.w	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80010c4:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010c6:	0689      	lsls	r1, r1, #26
 80010c8:	d50d      	bpl.n	80010e6 <HAL_ADC_IRQHandler+0x126>
 80010ca:	0152      	lsls	r2, r2, #5
 80010cc:	d50b      	bpl.n	80010e6 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010d0:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010d4:	f042 0202 	orr.w	r2, r2, #2
 80010d8:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80010da:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010dc:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80010de:	f7ff ff6e 	bl	8000fbe <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	601d      	str	r5, [r3, #0]
 80010e6:	bd38      	pop	{r3, r4, r5, pc}

080010e8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80010ea:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80010f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010f8:	f7ff ff61 	bl	8000fbe <HAL_ADC_ErrorCallback>
 80010fc:	bd08      	pop	{r3, pc}

080010fe <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001102:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001106:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800110a:	d123      	bne.n	8001154 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800110c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6891      	ldr	r1, [r2, #8]
 8001116:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800111a:	d117      	bne.n	800114c <ADC_DMAConvCplt+0x4e>
 800111c:	7e19      	ldrb	r1, [r3, #24]
 800111e:	b9a9      	cbnz	r1, 800114c <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001120:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001122:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001126:	d002      	beq.n	800112e <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001128:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800112a:	0548      	lsls	r0, r1, #21
 800112c:	d40e      	bmi.n	800114c <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800112e:	6851      	ldr	r1, [r2, #4]
 8001130:	f021 0120 	bic.w	r1, r1, #32
 8001134:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001140:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001142:	bf5e      	ittt	pl
 8001144:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8001146:	f042 0201 	orrpl.w	r2, r2, #1
 800114a:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff2e 	bl	8000fae <HAL_ADC_ConvCpltCallback>
 8001152:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001154:	06d2      	lsls	r2, r2, #27
 8001156:	d503      	bpl.n	8001160 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff30 	bl	8000fbe <HAL_ADC_ErrorCallback>
 800115e:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	4718      	bx	r3
	...

0800116c <HAL_ADC_ConfigChannel>:
{
 800116c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001172:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001176:	2b01      	cmp	r3, #1
 8001178:	f000 8083 	beq.w	8001282 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800117c:	680d      	ldr	r5, [r1, #0]
 800117e:	6804      	ldr	r4, [r0, #0]
 8001180:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8001182:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001184:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001186:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800118a:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800118c:	d92a      	bls.n	80011e4 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800118e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001192:	68e7      	ldr	r7, [r4, #12]
 8001194:	3b1e      	subs	r3, #30
 8001196:	f04f 0e07 	mov.w	lr, #7
 800119a:	fa0e fe03 	lsl.w	lr, lr, r3
 800119e:	ea27 070e 	bic.w	r7, r7, lr
 80011a2:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011a4:	68e7      	ldr	r7, [r4, #12]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	433b      	orrs	r3, r7
 80011ac:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80011ae:	684a      	ldr	r2, [r1, #4]
 80011b0:	2a06      	cmp	r2, #6
 80011b2:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80011b6:	d825      	bhi.n	8001204 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011b8:	4413      	add	r3, r2
 80011ba:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80011bc:	1f59      	subs	r1, r3, #5
 80011be:	231f      	movs	r3, #31
 80011c0:	408b      	lsls	r3, r1
 80011c2:	ea27 0303 	bic.w	r3, r7, r3
 80011c6:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011ca:	fa06 f101 	lsl.w	r1, r6, r1
 80011ce:	4311      	orrs	r1, r2
 80011d0:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_ADC_ConfigChannel+0x11c>)
 80011d4:	429c      	cmp	r4, r3
 80011d6:	d034      	beq.n	8001242 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80011d8:	2300      	movs	r3, #0
 80011da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011de:	4618      	mov	r0, r3
}
 80011e0:	b003      	add	sp, #12
 80011e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011e4:	6927      	ldr	r7, [r4, #16]
 80011e6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80011ea:	f04f 0e07 	mov.w	lr, #7
 80011ee:	fa0e fe03 	lsl.w	lr, lr, r3
 80011f2:	ea27 070e 	bic.w	r7, r7, lr
 80011f6:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011f8:	6927      	ldr	r7, [r4, #16]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	433b      	orrs	r3, r7
 8001200:	6123      	str	r3, [r4, #16]
 8001202:	e7d4      	b.n	80011ae <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001204:	2a0c      	cmp	r2, #12
 8001206:	d80e      	bhi.n	8001226 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001208:	4413      	add	r3, r2
 800120a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800120c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001210:	231f      	movs	r3, #31
 8001212:	4093      	lsls	r3, r2
 8001214:	ea21 0303 	bic.w	r3, r1, r3
 8001218:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800121a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800121c:	fa06 f202 	lsl.w	r2, r6, r2
 8001220:	431a      	orrs	r2, r3
 8001222:	6322      	str	r2, [r4, #48]	; 0x30
 8001224:	e7d5      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001226:	4413      	add	r3, r2
 8001228:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800122a:	3b41      	subs	r3, #65	; 0x41
 800122c:	221f      	movs	r2, #31
 800122e:	409a      	lsls	r2, r3
 8001230:	ea21 0202 	bic.w	r2, r1, r2
 8001234:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001236:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001238:	fa06 f103 	lsl.w	r1, r6, r3
 800123c:	4311      	orrs	r1, r2
 800123e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001240:	e7c7      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001242:	2d12      	cmp	r5, #18
 8001244:	d104      	bne.n	8001250 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_ADC_ConfigChannel+0x120>)
 8001248:	6853      	ldr	r3, [r2, #4]
 800124a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800124e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001250:	f1a5 0310 	sub.w	r3, r5, #16
 8001254:	2b01      	cmp	r3, #1
 8001256:	d8bf      	bhi.n	80011d8 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_ADC_ConfigChannel+0x120>)
 800125a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800125c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800125e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001262:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001264:	d1b8      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_ADC_ConfigChannel+0x124>)
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_ADC_ConfigChannel+0x128>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001270:	230a      	movs	r3, #10
 8001272:	4353      	muls	r3, r2
        counter--;
 8001274:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001276:	9b01      	ldr	r3, [sp, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0ad      	beq.n	80011d8 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800127c:	9b01      	ldr	r3, [sp, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	e7f8      	b.n	8001274 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8001282:	2002      	movs	r0, #2
 8001284:	e7ac      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x74>
 8001286:	bf00      	nop
 8001288:	40012000 	.word	0x40012000
 800128c:	40012300 	.word	0x40012300
 8001290:	2000000c 	.word	0x2000000c
 8001294:	000f4240 	.word	0x000f4240

08001298 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001298:	4770      	bx	lr

0800129a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800129a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800129c:	4604      	mov	r4, r0
 800129e:	2800      	cmp	r0, #0
 80012a0:	d06e      	beq.n	8001380 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80012a6:	b90b      	cbnz	r3, 80012ac <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012a8:	f003 fc9c 	bl	8004be4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012ac:	6822      	ldr	r2, [r4, #0]
 80012ae:	6813      	ldr	r3, [r2, #0]
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b6:	f7ff fd23 	bl	8000d00 <HAL_GetTick>
 80012ba:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	0791      	lsls	r1, r2, #30
 80012c2:	d451      	bmi.n	8001368 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012cc:	f7ff fd18 	bl	8000d00 <HAL_GetTick>
 80012d0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	07d2      	lsls	r2, r2, #31
 80012d8:	d554      	bpl.n	8001384 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012da:	7e22      	ldrb	r2, [r4, #24]
 80012dc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	bf0c      	ite	eq
 80012e2:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012e6:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012ec:	7e62      	ldrb	r2, [r4, #25]
 80012ee:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	bf0c      	ite	eq
 80012f4:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012f8:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012fe:	7ea2      	ldrb	r2, [r4, #26]
 8001300:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	bf0c      	ite	eq
 8001306:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800130a:	f022 0220 	bicne.w	r2, r2, #32
 800130e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001310:	7ee2      	ldrb	r2, [r4, #27]
 8001312:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	bf0c      	ite	eq
 8001318:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800131c:	f042 0210 	orrne.w	r2, r2, #16
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001322:	7f22      	ldrb	r2, [r4, #28]
 8001324:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	bf0c      	ite	eq
 800132a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800132e:	f022 0208 	bicne.w	r2, r2, #8
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001334:	7f62      	ldrb	r2, [r4, #29]
 8001336:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	bf0c      	ite	eq
 800133c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001340:	f022 0204 	bicne.w	r2, r2, #4
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001346:	68e1      	ldr	r1, [r4, #12]
 8001348:	68a2      	ldr	r2, [r4, #8]
 800134a:	430a      	orrs	r2, r1
 800134c:	6921      	ldr	r1, [r4, #16]
 800134e:	430a      	orrs	r2, r1
 8001350:	6961      	ldr	r1, [r4, #20]
 8001352:	430a      	orrs	r2, r1
 8001354:	6861      	ldr	r1, [r4, #4]
 8001356:	3901      	subs	r1, #1
 8001358:	430a      	orrs	r2, r1
 800135a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800135c:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800135e:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001360:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001362:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001366:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001368:	f7ff fcca 	bl	8000d00 <HAL_GetTick>
 800136c:	1b40      	subs	r0, r0, r5
 800136e:	280a      	cmp	r0, #10
 8001370:	d9a4      	bls.n	80012bc <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800137a:	2305      	movs	r3, #5
 800137c:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
}
 8001382:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001384:	f7ff fcbc 	bl	8000d00 <HAL_GetTick>
 8001388:	1b40      	subs	r0, r0, r5
 800138a:	280a      	cmp	r0, #10
 800138c:	d9a1      	bls.n	80012d2 <HAL_CAN_Init+0x38>
 800138e:	e7f0      	b.n	8001372 <HAL_CAN_Init+0xd8>

08001390 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001390:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001394:	3b01      	subs	r3, #1
 8001396:	2b01      	cmp	r3, #1
{
 8001398:	b530      	push	{r4, r5, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 800139a:	d879      	bhi.n	8001490 <HAL_CAN_ConfigFilter+0x100>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800139c:	4b3f      	ldr	r3, [pc, #252]	; (800149c <HAL_CAN_ConfigFilter+0x10c>)
 800139e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013ae:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80013b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013ba:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80013bc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80013c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013c4:	6948      	ldr	r0, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013c6:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013ca:	f000 021f 	and.w	r2, r0, #31
 80013ce:	2401      	movs	r4, #1
 80013d0:	4094      	lsls	r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013d2:	43e2      	mvns	r2, r4
 80013d4:	4015      	ands	r5, r2
 80013d6:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013da:	69cd      	ldr	r5, [r1, #28]
 80013dc:	2d00      	cmp	r5, #0
 80013de:	d136      	bne.n	800144e <HAL_CAN_ConfigFilter+0xbe>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013e0:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80013e4:	4015      	ands	r5, r2
 80013e6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80013ea:	00c0      	lsls	r0, r0, #3

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013ec:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013ee:	888b      	ldrh	r3, [r1, #4]
 80013f0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80013f4:	f500 40c8 	add.w	r0, r0, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013f8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013fc:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001400:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001402:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001404:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001408:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800140c:	6988      	ldr	r0, [r1, #24]
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_CAN_ConfigFilter+0x10c>)
 8001410:	2800      	cmp	r0, #0
 8001412:	d135      	bne.n	8001480 <HAL_CAN_ConfigFilter+0xf0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001414:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001418:	4010      	ands	r0, r2
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800141a:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800141e:	6908      	ldr	r0, [r1, #16]
 8001420:	bb90      	cbnz	r0, 8001488 <HAL_CAN_ConfigFilter+0xf8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001422:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001426:	4002      	ands	r2, r0
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800142c:	6a0b      	ldr	r3, [r1, #32]
 800142e:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_CAN_ConfigFilter+0x10c>)
 8001430:	2b01      	cmp	r3, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001432:	bf02      	ittt	eq
 8001434:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 8001438:	4323      	orreq	r3, r4
 800143a:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800143e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800144a:	2000      	movs	r0, #0
 800144c:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800144e:	2d01      	cmp	r5, #1
 8001450:	d1dc      	bne.n	800140c <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001452:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001456:	4325      	orrs	r5, r4
 8001458:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800145c:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800145e:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001460:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001464:	00c3      	lsls	r3, r0, #3
 8001466:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800146a:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800146e:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001470:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001474:	688d      	ldr	r5, [r1, #8]
 8001476:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800147a:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
 800147e:	e7c5      	b.n	800140c <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001480:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001484:	4320      	orrs	r0, r4
 8001486:	e7c8      	b.n	800141a <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001488:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800148c:	4322      	orrs	r2, r4
 800148e:	e7cb      	b.n	8001428 <HAL_CAN_ConfigFilter+0x98>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001490:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001496:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001498:	2001      	movs	r0, #1
  }
}
 800149a:	bd30      	pop	{r4, r5, pc}
 800149c:	40006400 	.word	0x40006400

080014a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80014a6:	2b01      	cmp	r3, #1
{
 80014a8:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80014aa:	d11f      	bne.n	80014ec <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ac:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fc20 	bl	8000d00 <HAL_GetTick>
 80014c0:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	6858      	ldr	r0, [r3, #4]
 80014c6:	f010 0001 	ands.w	r0, r0, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014cc:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014d0:	f7ff fc16 	bl	8000d00 <HAL_GetTick>
 80014d4:	1b40      	subs	r0, r0, r5
 80014d6:	280a      	cmp	r0, #10
 80014d8:	d9f3      	bls.n	80014c2 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80014e2:	2305      	movs	r3, #5
 80014e4:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80014e8:	2001      	movs	r0, #1
  }
}
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014f2:	6243      	str	r3, [r0, #36]	; 0x24
 80014f4:	e7f8      	b.n	80014e8 <HAL_CAN_Start+0x48>

080014f6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f8:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014fc:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014fe:	3d01      	subs	r5, #1
 8001500:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001502:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8001504:	d840      	bhi.n	8001588 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001506:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 800150a:	d039      	beq.n	8001580 <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800150c:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001510:	2c03      	cmp	r4, #3
 8001512:	f04f 0501 	mov.w	r5, #1
 8001516:	d105      	bne.n	8001524 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001518:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800151a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800151e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
  }
}
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001524:	40a5      	lsls	r5, r4
 8001526:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001528:	6888      	ldr	r0, [r1, #8]
 800152a:	68cf      	ldr	r7, [r1, #12]
 800152c:	f104 0318 	add.w	r3, r4, #24
 8001530:	bb08      	cbnz	r0, 8001576 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001532:	6808      	ldr	r0, [r1, #0]
 8001534:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	0124      	lsls	r4, r4, #4
 800153c:	50f0      	str	r0, [r6, r3]
 800153e:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001540:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001542:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001544:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001548:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800154a:	bf02      	ittt	eq
 800154c:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8001550:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001554:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001558:	4434      	add	r4, r6
 800155a:	6851      	ldr	r1, [r2, #4]
 800155c:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001566:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800156a:	f042 0201 	orr.w	r2, r2, #1
 800156e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8001572:	2000      	movs	r0, #0
 8001574:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001576:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8001578:	4338      	orrs	r0, r7
 800157a:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 800157e:	e7db      	b.n	8001538 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001580:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001586:	e7ca      	b.n	800151e <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001588:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800158a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158e:	e7c6      	b.n	800151e <HAL_CAN_AddTxMessage+0x28>

08001590 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001590:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001594:	3b01      	subs	r3, #1
 8001596:	2b01      	cmp	r3, #1
 8001598:	d80c      	bhi.n	80015b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800159a:	6803      	ldr	r3, [r0, #0]
 800159c:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800159e:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80015a0:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80015a2:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80015a4:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 80015a8:	bf48      	it	mi
 80015aa:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	d502      	bpl.n	80015b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 80015b0:	3001      	adds	r0, #1
 80015b2:	4770      	bx	lr
  uint32_t freelevel = 0U;
 80015b4:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 80015b6:	4770      	bx	lr

080015b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015c0:	041b      	lsls	r3, r3, #16
 80015c2:	0c1b      	lsrs	r3, r3, #16
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	0200      	lsls	r0, r0, #8
 80015ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80015d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80015d4:	60d3      	str	r3, [r2, #12]
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b530      	push	{r4, r5, lr}
 80015e0:	68dc      	ldr	r4, [r3, #12]
 80015e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	bf28      	it	cs
 80015f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 0501 	mov.w	r5, #1
 80015f8:	fa05 f303 	lsl.w	r3, r5, r3
 80015fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001600:	bf8c      	ite	hi
 8001602:	3c03      	subhi	r4, #3
 8001604:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001606:	4019      	ands	r1, r3
 8001608:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160a:	fa05 f404 	lsl.w	r4, r5, r4
 800160e:	3c01      	subs	r4, #1
 8001610:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001612:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	ea42 0201 	orr.w	r2, r2, r1
 8001618:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	bfad      	iteet	ge
 800161e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	f000 000f 	andlt.w	r0, r0, #15
 8001626:	4b06      	ldrlt	r3, [pc, #24]	; (8001640 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	bfb5      	itete	lt
 800162e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001638:	bd30      	pop	{r4, r5, pc}
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	e000ed14 	.word	0xe000ed14

08001644 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001644:	2800      	cmp	r0, #0
 8001646:	db08      	blt.n	800165a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001648:	0942      	lsrs	r2, r0, #5
 800164a:	2301      	movs	r3, #1
 800164c:	f000 001f 	and.w	r0, r0, #31
 8001650:	fa03 f000 	lsl.w	r0, r3, r0
 8001654:	4b01      	ldr	r3, [pc, #4]	; (800165c <HAL_NVIC_EnableIRQ+0x18>)
 8001656:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100

08001660 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001660:	6803      	ldr	r3, [r0, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001668:	f023 0303 	bic.w	r3, r3, #3
 800166c:	2118      	movs	r1, #24
 800166e:	3a10      	subs	r2, #16
 8001670:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001674:	4904      	ldr	r1, [pc, #16]	; (8001688 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001676:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001678:	bf88      	it	hi
 800167a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800167c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800167e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001680:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001682:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	08004f20 	.word	0x08004f20

0800168c <HAL_DMA_Init>:
{
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff fb36 	bl	8000d00 <HAL_GetTick>
 8001694:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001696:	2c00      	cmp	r4, #0
 8001698:	d071      	beq.n	800177e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800169a:	2300      	movs	r3, #0
 800169c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80016a0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80016a8:	6813      	ldr	r3, [r2, #0]
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b0:	6821      	ldr	r1, [r4, #0]
 80016b2:	680b      	ldr	r3, [r1, #0]
 80016b4:	07d8      	lsls	r0, r3, #31
 80016b6:	d43c      	bmi.n	8001732 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80016b8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ba:	4d32      	ldr	r5, [pc, #200]	; (8001784 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016bc:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c2:	68a3      	ldr	r3, [r4, #8]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	68e2      	ldr	r2, [r4, #12]
 80016c8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ca:	6922      	ldr	r2, [r4, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	6962      	ldr	r2, [r4, #20]
 80016d0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	69e2      	ldr	r2, [r4, #28]
 80016d4:	4303      	orrs	r3, r0
 80016d6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d8:	6a22      	ldr	r2, [r4, #32]
 80016da:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016de:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016e4:	bf01      	itttt	eq
 80016e6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80016e8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80016ea:	4335      	orreq	r5, r6
 80016ec:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80016ee:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80016f0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80016f8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016fc:	d10b      	bne.n	8001716 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80016fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001700:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001702:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001704:	b13d      	cbz	r5, 8001716 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001706:	b9f8      	cbnz	r0, 8001748 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001708:	2a01      	cmp	r2, #1
 800170a:	d02d      	beq.n	8001768 <HAL_DMA_Init+0xdc>
 800170c:	d301      	bcc.n	8001712 <HAL_DMA_Init+0x86>
 800170e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001710:	d101      	bne.n	8001716 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001712:	01ea      	lsls	r2, r5, #7
 8001714:	d42b      	bmi.n	800176e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001716:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff ffa1 	bl	8001660 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001720:	233f      	movs	r3, #63	; 0x3f
 8001722:	4093      	lsls	r3, r2
 8001724:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001726:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001728:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800172c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001730:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001732:	f7ff fae5 	bl	8000d00 <HAL_GetTick>
 8001736:	1b40      	subs	r0, r0, r5
 8001738:	2805      	cmp	r0, #5
 800173a:	d9b9      	bls.n	80016b0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800173c:	2320      	movs	r3, #32
 800173e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001740:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001742:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001746:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001748:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800174c:	d113      	bne.n	8001776 <HAL_DMA_Init+0xea>
    switch (tmp)
 800174e:	2a03      	cmp	r2, #3
 8001750:	d8e1      	bhi.n	8001716 <HAL_DMA_Init+0x8a>
 8001752:	a001      	add	r0, pc, #4	; (adr r0, 8001758 <HAL_DMA_Init+0xcc>)
 8001754:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001758:	0800176f 	.word	0x0800176f
 800175c:	08001713 	.word	0x08001713
 8001760:	0800176f 	.word	0x0800176f
 8001764:	08001769 	.word	0x08001769
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001768:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800176c:	d1d3      	bne.n	8001716 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001772:	2001      	movs	r0, #1
 8001774:	e7e5      	b.n	8001742 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001776:	2a02      	cmp	r2, #2
 8001778:	d9f9      	bls.n	800176e <HAL_DMA_Init+0xe2>
 800177a:	2a03      	cmp	r2, #3
 800177c:	e7c8      	b.n	8001710 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800177e:	2001      	movs	r0, #1
 8001780:	bd70      	pop	{r4, r5, r6, pc}
 8001782:	bf00      	nop
 8001784:	f010803f 	.word	0xf010803f

08001788 <HAL_DMA_Start_IT>:
{
 8001788:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800178a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800178e:	2c01      	cmp	r4, #1
 8001790:	d032      	beq.n	80017f8 <HAL_DMA_Start_IT+0x70>
 8001792:	2401      	movs	r4, #1
 8001794:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001798:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800179e:	2c01      	cmp	r4, #1
 80017a0:	f04f 0500 	mov.w	r5, #0
 80017a4:	f04f 0402 	mov.w	r4, #2
 80017a8:	d124      	bne.n	80017f4 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80017aa:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017ae:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017b2:	6825      	ldr	r5, [r4, #0]
 80017b4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80017b8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80017ba:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017bc:	6883      	ldr	r3, [r0, #8]
 80017be:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80017c0:	bf0e      	itee	eq
 80017c2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80017c4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80017c6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80017ca:	bf08      	it	eq
 80017cc:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ce:	233f      	movs	r3, #63	; 0x3f
 80017d0:	4093      	lsls	r3, r2
 80017d2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	f043 0316 	orr.w	r3, r3, #22
 80017da:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80017dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017de:	b11b      	cbz	r3, 80017e8 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2000      	movs	r0, #0
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80017f4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80017f8:	2002      	movs	r0, #2
}
 80017fa:	bd70      	pop	{r4, r5, r6, pc}

080017fc <HAL_DMA_IRQHandler>:
{
 80017fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001802:	4b5a      	ldr	r3, [pc, #360]	; (800196c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001804:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001806:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001808:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800180a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800180c:	2208      	movs	r2, #8
 800180e:	409a      	lsls	r2, r3
 8001810:	4216      	tst	r6, r2
{
 8001812:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001814:	d00c      	beq.n	8001830 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001816:	6801      	ldr	r1, [r0, #0]
 8001818:	6808      	ldr	r0, [r1, #0]
 800181a:	0740      	lsls	r0, r0, #29
 800181c:	d508      	bpl.n	8001830 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800181e:	6808      	ldr	r0, [r1, #0]
 8001820:	f020 0004 	bic.w	r0, r0, #4
 8001824:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001826:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001828:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001830:	2201      	movs	r2, #1
 8001832:	409a      	lsls	r2, r3
 8001834:	4216      	tst	r6, r2
 8001836:	d008      	beq.n	800184a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001838:	6821      	ldr	r1, [r4, #0]
 800183a:	6949      	ldr	r1, [r1, #20]
 800183c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800183e:	bf41      	itttt	mi
 8001840:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001842:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001844:	f042 0202 	orrmi.w	r2, r2, #2
 8001848:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800184a:	2204      	movs	r2, #4
 800184c:	409a      	lsls	r2, r3
 800184e:	4216      	tst	r6, r2
 8001850:	d008      	beq.n	8001864 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001852:	6821      	ldr	r1, [r4, #0]
 8001854:	6809      	ldr	r1, [r1, #0]
 8001856:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001858:	bf41      	itttt	mi
 800185a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800185c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800185e:	f042 0204 	orrmi.w	r2, r2, #4
 8001862:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001864:	2210      	movs	r2, #16
 8001866:	409a      	lsls	r2, r3
 8001868:	4216      	tst	r6, r2
 800186a:	d010      	beq.n	800188e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	0709      	lsls	r1, r1, #28
 8001872:	d50c      	bpl.n	800188e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001874:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	0350      	lsls	r0, r2, #13
 800187a:	d535      	bpl.n	80018e8 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0319      	lsls	r1, r3, #12
 8001880:	d401      	bmi.n	8001886 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001884:	e000      	b.n	8001888 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001886:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001888:	b10b      	cbz	r3, 800188e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800188a:	4620      	mov	r0, r4
 800188c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800188e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001890:	2220      	movs	r2, #32
 8001892:	408a      	lsls	r2, r1
 8001894:	4216      	tst	r6, r2
 8001896:	d038      	beq.n	800190a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	06c6      	lsls	r6, r0, #27
 800189e:	d534      	bpl.n	800190a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018a0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018a2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80018a6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018a8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018aa:	d125      	bne.n	80018f8 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ac:	f022 0216 	bic.w	r2, r2, #22
 80018b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018bc:	b90a      	cbnz	r2, 80018c2 <HAL_DMA_IRQHandler+0xc6>
 80018be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80018c0:	b11a      	cbz	r2, 80018ca <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f022 0208 	bic.w	r2, r2, #8
 80018c8:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ca:	233f      	movs	r3, #63	; 0x3f
 80018cc:	408b      	lsls	r3, r1
 80018ce:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80018d0:	2300      	movs	r3, #0
 80018d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80018dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80018de:	b10b      	cbz	r3, 80018e4 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80018e0:	4620      	mov	r0, r4
 80018e2:	4798      	blx	r3
}
 80018e4:	b003      	add	sp, #12
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ec:	bf5e      	ittt	pl
 80018ee:	681a      	ldrpl	r2, [r3, #0]
 80018f0:	f022 0208 	bicpl.w	r2, r2, #8
 80018f4:	601a      	strpl	r2, [r3, #0]
 80018f6:	e7c4      	b.n	8001882 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f8:	0350      	lsls	r0, r2, #13
 80018fa:	d528      	bpl.n	800194e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	0319      	lsls	r1, r3, #12
 8001900:	d432      	bmi.n	8001968 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001902:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001904:	b10b      	cbz	r3, 800190a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001906:	4620      	mov	r0, r4
 8001908:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800190a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0e9      	beq.n	80018e4 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001910:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001912:	07da      	lsls	r2, r3, #31
 8001914:	d519      	bpl.n	800194a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001916:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001918:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800191a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800191e:	6813      	ldr	r3, [r2, #0]
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001926:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800192a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800192e:	9b01      	ldr	r3, [sp, #4]
 8001930:	3301      	adds	r3, #1
 8001932:	429f      	cmp	r7, r3
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	d302      	bcc.n	800193e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	07db      	lsls	r3, r3, #31
 800193c:	d4f7      	bmi.n	800192e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800193e:	2300      	movs	r3, #0
 8001940:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001944:	2301      	movs	r3, #1
 8001946:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800194a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800194c:	e7c7      	b.n	80018de <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001954:	d108      	bne.n	8001968 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	f021 0110 	bic.w	r1, r1, #16
 800195c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800195e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001960:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001964:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800196a:	e7cb      	b.n	8001904 <HAL_DMA_IRQHandler+0x108>
 800196c:	2000000c 	.word	0x2000000c

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001974:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001978:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001b28 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197c:	4a68      	ldr	r2, [pc, #416]	; (8001b20 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001b2c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001984:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001986:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001988:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800198a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800198e:	42ac      	cmp	r4, r5
 8001990:	f040 80b0 	bne.w	8001af4 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001994:	684c      	ldr	r4, [r1, #4]
 8001996:	f024 0c10 	bic.w	ip, r4, #16
 800199a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800199e:	2e01      	cmp	r6, #1
 80019a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80019a4:	d812      	bhi.n	80019cc <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80019a6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	2603      	movs	r6, #3
 80019aa:	fa06 f60e 	lsl.w	r6, r6, lr
 80019ae:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b2:	68ce      	ldr	r6, [r1, #12]
 80019b4:	fa06 f60e 	lsl.w	r6, r6, lr
 80019b8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80019ba:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80019bc:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019be:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c2:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019c6:	409e      	lsls	r6, r3
 80019c8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80019ca:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019cc:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80019ce:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d0:	fa06 f60e 	lsl.w	r6, r6, lr
 80019d4:	43f6      	mvns	r6, r6
 80019d6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019da:	688f      	ldr	r7, [r1, #8]
 80019dc:	fa07 f70e 	lsl.w	r7, r7, lr
 80019e0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80019e8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ea:	d116      	bne.n	8001a1a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80019ec:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80019f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80019f8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001a00:	f04f 0c0f 	mov.w	ip, #15
 8001a04:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001a08:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0c:	690f      	ldr	r7, [r1, #16]
 8001a0e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001a12:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001a16:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001a1a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a1e:	f004 0703 	and.w	r7, r4, #3
 8001a22:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001a26:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8001a2a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2c:	00e6      	lsls	r6, r4, #3
 8001a2e:	d561      	bpl.n	8001af4 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	f04f 0b00 	mov.w	fp, #0
 8001a34:	f8cd b00c 	str.w	fp, [sp, #12]
 8001a38:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3c:	4e39      	ldr	r6, [pc, #228]	; (8001b24 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001a42:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001a46:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001a4a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001a4e:	9703      	str	r7, [sp, #12]
 8001a50:	9f03      	ldr	r7, [sp, #12]
 8001a52:	f023 0703 	bic.w	r7, r3, #3
 8001a56:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001a5a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a62:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a66:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a6a:	f04f 0e0f 	mov.w	lr, #15
 8001a6e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a74:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a78:	d043      	beq.n	8001b02 <HAL_GPIO_Init+0x192>
 8001a7a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a7e:	42b0      	cmp	r0, r6
 8001a80:	d041      	beq.n	8001b06 <HAL_GPIO_Init+0x196>
 8001a82:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a86:	42b0      	cmp	r0, r6
 8001a88:	d03f      	beq.n	8001b0a <HAL_GPIO_Init+0x19a>
 8001a8a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a8e:	42b0      	cmp	r0, r6
 8001a90:	d03d      	beq.n	8001b0e <HAL_GPIO_Init+0x19e>
 8001a92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a96:	42b0      	cmp	r0, r6
 8001a98:	d03b      	beq.n	8001b12 <HAL_GPIO_Init+0x1a2>
 8001a9a:	4548      	cmp	r0, r9
 8001a9c:	d03b      	beq.n	8001b16 <HAL_GPIO_Init+0x1a6>
 8001a9e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001aa2:	42b0      	cmp	r0, r6
 8001aa4:	d039      	beq.n	8001b1a <HAL_GPIO_Init+0x1aa>
 8001aa6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001aaa:	42b0      	cmp	r0, r6
 8001aac:	bf14      	ite	ne
 8001aae:	2608      	movne	r6, #8
 8001ab0:	2607      	moveq	r6, #7
 8001ab2:	fa06 f60c 	lsl.w	r6, r6, ip
 8001ab6:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aba:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001abc:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001abe:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	bf0c      	ite	eq
 8001ac6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001ac8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001aca:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001acc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ace:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	bf0c      	ite	eq
 8001ad4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001ad6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001ad8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001adc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	bf0c      	ite	eq
 8001ae2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001ae4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8001ae6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001ae8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aea:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001aec:	bf54      	ite	pl
 8001aee:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001af0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8001af2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af4:	3301      	adds	r3, #1
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	f47f af45 	bne.w	8001986 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001afc:	b005      	add	sp, #20
 8001afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b02:	465e      	mov	r6, fp
 8001b04:	e7d5      	b.n	8001ab2 <HAL_GPIO_Init+0x142>
 8001b06:	2601      	movs	r6, #1
 8001b08:	e7d3      	b.n	8001ab2 <HAL_GPIO_Init+0x142>
 8001b0a:	2602      	movs	r6, #2
 8001b0c:	e7d1      	b.n	8001ab2 <HAL_GPIO_Init+0x142>
 8001b0e:	2603      	movs	r6, #3
 8001b10:	e7cf      	b.n	8001ab2 <HAL_GPIO_Init+0x142>
 8001b12:	2604      	movs	r6, #4
 8001b14:	e7cd      	b.n	8001ab2 <HAL_GPIO_Init+0x142>
 8001b16:	2605      	movs	r6, #5
 8001b18:	e7cb      	b.n	8001ab2 <HAL_GPIO_Init+0x142>
 8001b1a:	2606      	movs	r6, #6
 8001b1c:	e7c9      	b.n	8001ab2 <HAL_GPIO_Init+0x142>
 8001b1e:	bf00      	nop
 8001b20:	40013c00 	.word	0x40013c00
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40021400 	.word	0x40021400

08001b30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b30:	6903      	ldr	r3, [r0, #16]
 8001b32:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001b34:	bf14      	ite	ne
 8001b36:	2001      	movne	r0, #1
 8001b38:	2000      	moveq	r0, #0
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b3c:	b10a      	cbz	r2, 8001b42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3e:	6181      	str	r1, [r0, #24]
 8001b40:	4770      	bx	lr
 8001b42:	0409      	lsls	r1, r1, #16
 8001b44:	e7fb      	b.n	8001b3e <HAL_GPIO_WritePin+0x2>

08001b46 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001b46:	6943      	ldr	r3, [r0, #20]
 8001b48:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b4c:	bf08      	it	eq
 8001b4e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b50:	6181      	str	r1, [r0, #24]
 8001b52:	4770      	bx	lr

08001b54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b58:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001b5c:	6959      	ldr	r1, [r3, #20]
 8001b5e:	4201      	tst	r1, r0
 8001b60:	d002      	beq.n	8001b68 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b62:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b64:	f7ff fff6 	bl	8001b54 <HAL_GPIO_EXTI_Callback>
 8001b68:	bd08      	pop	{r3, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40013c00 	.word	0x40013c00

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b74:	4604      	mov	r4, r0
 8001b76:	b908      	cbnz	r0, 8001b7c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001b78:	2001      	movs	r0, #1
 8001b7a:	e03f      	b.n	8001bfc <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7c:	6803      	ldr	r3, [r0, #0]
 8001b7e:	07dd      	lsls	r5, r3, #31
 8001b80:	d410      	bmi.n	8001ba4 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	0798      	lsls	r0, r3, #30
 8001b86:	d45a      	bmi.n	8001c3e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	071a      	lsls	r2, r3, #28
 8001b8c:	f100 809c 	bmi.w	8001cc8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	075b      	lsls	r3, r3, #29
 8001b94:	f100 80ba 	bmi.w	8001d0c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	69a0      	ldr	r0, [r4, #24]
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	f040 811b 	bne.w	8001dd6 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	e02b      	b.n	8001bfc <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba4:	4ba4      	ldr	r3, [pc, #656]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	f002 020c 	and.w	r2, r2, #12
 8001bac:	2a04      	cmp	r2, #4
 8001bae:	d007      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb6:	2a08      	cmp	r2, #8
 8001bb8:	d10a      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	0259      	lsls	r1, r3, #9
 8001bbe:	d507      	bpl.n	8001bd0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	4b9d      	ldr	r3, [pc, #628]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	039a      	lsls	r2, r3, #14
 8001bc6:	d5dc      	bpl.n	8001b82 <HAL_RCC_OscConfig+0x12>
 8001bc8:	6863      	ldr	r3, [r4, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1d9      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
 8001bce:	e7d3      	b.n	8001b78 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	6863      	ldr	r3, [r4, #4]
 8001bd2:	4d99      	ldr	r5, [pc, #612]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d113      	bne.n	8001c02 <HAL_RCC_OscConfig+0x92>
 8001bda:	682b      	ldr	r3, [r5, #0]
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001be2:	f7ff f88d 	bl	8000d00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4d94      	ldr	r5, [pc, #592]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001be8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	039b      	lsls	r3, r3, #14
 8001bee:	d4c8      	bmi.n	8001b82 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff f886 	bl	8000d00 <HAL_GetTick>
 8001bf4:	1b80      	subs	r0, r0, r6
 8001bf6:	2864      	cmp	r0, #100	; 0x64
 8001bf8:	d9f7      	bls.n	8001bea <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001bfa:	2003      	movs	r0, #3
}
 8001bfc:	b002      	add	sp, #8
 8001bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c06:	d104      	bne.n	8001c12 <HAL_RCC_OscConfig+0xa2>
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0e:	602b      	str	r3, [r5, #0]
 8001c10:	e7e3      	b.n	8001bda <HAL_RCC_OscConfig+0x6a>
 8001c12:	682a      	ldr	r2, [r5, #0]
 8001c14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c18:	602a      	str	r2, [r5, #0]
 8001c1a:	682a      	ldr	r2, [r5, #0]
 8001c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c20:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1dd      	bne.n	8001be2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001c26:	f7ff f86b 	bl	8000d00 <HAL_GetTick>
 8001c2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	039f      	lsls	r7, r3, #14
 8001c30:	d5a7      	bpl.n	8001b82 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c32:	f7ff f865 	bl	8000d00 <HAL_GetTick>
 8001c36:	1b80      	subs	r0, r0, r6
 8001c38:	2864      	cmp	r0, #100	; 0x64
 8001c3a:	d9f7      	bls.n	8001c2c <HAL_RCC_OscConfig+0xbc>
 8001c3c:	e7dd      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3e:	4b7e      	ldr	r3, [pc, #504]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	f012 0f0c 	tst.w	r2, #12
 8001c46:	d007      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4e:	2a08      	cmp	r2, #8
 8001c50:	d111      	bne.n	8001c76 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	025e      	lsls	r6, r3, #9
 8001c56:	d40e      	bmi.n	8001c76 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c58:	4b77      	ldr	r3, [pc, #476]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	0795      	lsls	r5, r2, #30
 8001c5e:	d502      	bpl.n	8001c66 <HAL_RCC_OscConfig+0xf6>
 8001c60:	68e2      	ldr	r2, [r4, #12]
 8001c62:	2a01      	cmp	r2, #1
 8001c64:	d188      	bne.n	8001b78 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	6921      	ldr	r1, [r4, #16]
 8001c6a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001c6e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001c72:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c74:	e788      	b.n	8001b88 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c76:	68e2      	ldr	r2, [r4, #12]
 8001c78:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <HAL_RCC_OscConfig+0x2cc>)
 8001c7a:	b1b2      	cbz	r2, 8001caa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c80:	f7ff f83e 	bl	8000d00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	4d6c      	ldr	r5, [pc, #432]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001c86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	0798      	lsls	r0, r3, #30
 8001c8c:	d507      	bpl.n	8001c9e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	682b      	ldr	r3, [r5, #0]
 8001c90:	6922      	ldr	r2, [r4, #16]
 8001c92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c96:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c9a:	602b      	str	r3, [r5, #0]
 8001c9c:	e774      	b.n	8001b88 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f82f 	bl	8000d00 <HAL_GetTick>
 8001ca2:	1b80      	subs	r0, r0, r6
 8001ca4:	2802      	cmp	r0, #2
 8001ca6:	d9ef      	bls.n	8001c88 <HAL_RCC_OscConfig+0x118>
 8001ca8:	e7a7      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001caa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cac:	f7ff f828 	bl	8000d00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb0:	4d61      	ldr	r5, [pc, #388]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001cb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	0799      	lsls	r1, r3, #30
 8001cb8:	f57f af66 	bpl.w	8001b88 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f820 	bl	8000d00 <HAL_GetTick>
 8001cc0:	1b80      	subs	r0, r0, r6
 8001cc2:	2802      	cmp	r0, #2
 8001cc4:	d9f6      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x144>
 8001cc6:	e798      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc8:	6962      	ldr	r2, [r4, #20]
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x2d0>)
 8001ccc:	b17a      	cbz	r2, 8001cee <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f815 	bl	8000d00 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	4d58      	ldr	r5, [pc, #352]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001cd8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001cdc:	079f      	lsls	r7, r3, #30
 8001cde:	f53f af57 	bmi.w	8001b90 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce2:	f7ff f80d 	bl	8000d00 <HAL_GetTick>
 8001ce6:	1b80      	subs	r0, r0, r6
 8001ce8:	2802      	cmp	r0, #2
 8001cea:	d9f6      	bls.n	8001cda <HAL_RCC_OscConfig+0x16a>
 8001cec:	e785      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001cee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f806 	bl	8000d00 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	4d50      	ldr	r5, [pc, #320]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001cf6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001cfa:	0798      	lsls	r0, r3, #30
 8001cfc:	f57f af48 	bpl.w	8001b90 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7fe fffe 	bl	8000d00 <HAL_GetTick>
 8001d04:	1b80      	subs	r0, r0, r6
 8001d06:	2802      	cmp	r0, #2
 8001d08:	d9f6      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x188>
 8001d0a:	e776      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0c:	4b4a      	ldr	r3, [pc, #296]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d10:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001d14:	d128      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	9201      	str	r2, [sp, #4]
 8001d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d2a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	4d45      	ldr	r5, [pc, #276]	; (8001e44 <HAL_RCC_OscConfig+0x2d4>)
 8001d2e:	682b      	ldr	r3, [r5, #0]
 8001d30:	05d9      	lsls	r1, r3, #23
 8001d32:	d51b      	bpl.n	8001d6c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	68a3      	ldr	r3, [r4, #8]
 8001d36:	4d40      	ldr	r5, [pc, #256]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d127      	bne.n	8001d8c <HAL_RCC_OscConfig+0x21c>
 8001d3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d44:	f7fe ffdc 	bl	8000d00 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	4d3b      	ldr	r5, [pc, #236]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001d4a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d52:	079b      	lsls	r3, r3, #30
 8001d54:	d539      	bpl.n	8001dca <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001d56:	2e00      	cmp	r6, #0
 8001d58:	f43f af1e 	beq.w	8001b98 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5c:	4a36      	ldr	r2, [pc, #216]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001d5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	e717      	b.n	8001b98 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001d68:	2600      	movs	r6, #0
 8001d6a:	e7df      	b.n	8001d2c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001d74:	f7fe ffc4 	bl	8000d00 <HAL_GetTick>
 8001d78:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	05da      	lsls	r2, r3, #23
 8001d7e:	d4d9      	bmi.n	8001d34 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7fe ffbe 	bl	8000d00 <HAL_GetTick>
 8001d84:	1bc0      	subs	r0, r0, r7
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9f7      	bls.n	8001d7a <HAL_RCC_OscConfig+0x20a>
 8001d8a:	e736      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d104      	bne.n	8001d9a <HAL_RCC_OscConfig+0x22a>
 8001d90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	672b      	str	r3, [r5, #112]	; 0x70
 8001d98:	e7d0      	b.n	8001d3c <HAL_RCC_OscConfig+0x1cc>
 8001d9a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	672a      	str	r2, [r5, #112]	; 0x70
 8001da2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001da4:	f022 0204 	bic.w	r2, r2, #4
 8001da8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ca      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001dae:	f7fe ffa7 	bl	8000d00 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001db6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001dba:	0798      	lsls	r0, r3, #30
 8001dbc:	d5cb      	bpl.n	8001d56 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7fe ff9f 	bl	8000d00 <HAL_GetTick>
 8001dc2:	1bc0      	subs	r0, r0, r7
 8001dc4:	4540      	cmp	r0, r8
 8001dc6:	d9f7      	bls.n	8001db8 <HAL_RCC_OscConfig+0x248>
 8001dc8:	e717      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7fe ff99 	bl	8000d00 <HAL_GetTick>
 8001dce:	1bc0      	subs	r0, r0, r7
 8001dd0:	4540      	cmp	r0, r8
 8001dd2:	d9bd      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1e0>
 8001dd4:	e711      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd6:	4d18      	ldr	r5, [pc, #96]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
 8001dd8:	68ab      	ldr	r3, [r5, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d047      	beq.n	8001e72 <HAL_RCC_OscConfig+0x302>
 8001de2:	4e19      	ldr	r6, [pc, #100]	; (8001e48 <HAL_RCC_OscConfig+0x2d8>)
 8001de4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001de8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dea:	d135      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001dec:	f7fe ff88 	bl	8000d00 <HAL_GetTick>
 8001df0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	682b      	ldr	r3, [r5, #0]
 8001df4:	0199      	lsls	r1, r3, #6
 8001df6:	d429      	bmi.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001df8:	6a22      	ldr	r2, [r4, #32]
 8001dfa:	69e3      	ldr	r3, [r4, #28]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e00:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0c:	4c0a      	ldr	r4, [pc, #40]	; (8001e38 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e0e:	0852      	lsrs	r2, r2, #1
 8001e10:	3a01      	subs	r2, #1
 8001e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e16:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e18:	2301      	movs	r3, #1
 8001e1a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e1c:	f7fe ff70 	bl	8000d00 <HAL_GetTick>
 8001e20:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	019a      	lsls	r2, r3, #6
 8001e26:	f53f aebb 	bmi.w	8001ba0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7fe ff69 	bl	8000d00 <HAL_GetTick>
 8001e2e:	1b40      	subs	r0, r0, r5
 8001e30:	2802      	cmp	r0, #2
 8001e32:	d9f6      	bls.n	8001e22 <HAL_RCC_OscConfig+0x2b2>
 8001e34:	e6e1      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	42470000 	.word	0x42470000
 8001e40:	42470e80 	.word	0x42470e80
 8001e44:	40007000 	.word	0x40007000
 8001e48:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe ff58 	bl	8000d00 <HAL_GetTick>
 8001e50:	1bc0      	subs	r0, r0, r7
 8001e52:	2802      	cmp	r0, #2
 8001e54:	d9cd      	bls.n	8001df2 <HAL_RCC_OscConfig+0x282>
 8001e56:	e6d0      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff52 	bl	8000d00 <HAL_GetTick>
 8001e5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	682b      	ldr	r3, [r5, #0]
 8001e60:	019b      	lsls	r3, r3, #6
 8001e62:	f57f ae9d 	bpl.w	8001ba0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe ff4b 	bl	8000d00 <HAL_GetTick>
 8001e6a:	1b00      	subs	r0, r0, r4
 8001e6c:	2802      	cmp	r0, #2
 8001e6e:	d9f6      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2ee>
 8001e70:	e6c3      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e72:	2801      	cmp	r0, #1
 8001e74:	f43f aec2 	beq.w	8001bfc <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001e78:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	69e3      	ldr	r3, [r4, #28]
 8001e7c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f47f ae79 	bne.w	8001b78 <HAL_RCC_OscConfig+0x8>
 8001e86:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e88:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	f47f ae73 	bne.w	8001b78 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e98:	4003      	ands	r3, r0
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	f47f ae6c 	bne.w	8001b78 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ea0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ea2:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f47f ae66 	bne.w	8001b78 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001eae:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001eb2:	1ac0      	subs	r0, r0, r3
 8001eb4:	bf18      	it	ne
 8001eb6:	2001      	movne	r0, #1
 8001eb8:	e6a0      	b.n	8001bfc <HAL_RCC_OscConfig+0x8c>
 8001eba:	bf00      	nop

08001ebc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ebc:	4913      	ldr	r1, [pc, #76]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001ebe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec0:	688b      	ldr	r3, [r1, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x16>
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ece:	4810      	ldr	r0, [pc, #64]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ed0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001ed2:	4810      	ldr	r0, [pc, #64]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x58>)
 8001ed4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001edc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee0:	bf14      	ite	ne
 8001ee2:	480c      	ldrne	r0, [pc, #48]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee4:	480a      	ldreq	r0, [pc, #40]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001eea:	bf18      	it	ne
 8001eec:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	fba1 0100 	umull	r0, r1, r1, r0
 8001ef6:	f7fe fd55 	bl	80009a4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x50>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001f06:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f0a:	bd08      	pop	{r3, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	007a1200 	.word	0x007a1200

08001f18 <HAL_RCC_ClockConfig>:
{
 8001f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f1c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f1e:	4604      	mov	r4, r0
 8001f20:	b910      	cbnz	r0, 8001f28 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f22:	2001      	movs	r0, #1
 8001f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b44      	ldr	r3, [pc, #272]	; (800203c <HAL_RCC_ClockConfig+0x124>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	f002 020f 	and.w	r2, r2, #15
 8001f30:	428a      	cmp	r2, r1
 8001f32:	d329      	bcc.n	8001f88 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	6821      	ldr	r1, [r4, #0]
 8001f36:	078f      	lsls	r7, r1, #30
 8001f38:	d42e      	bmi.n	8001f98 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	07c8      	lsls	r0, r1, #31
 8001f3c:	d441      	bmi.n	8001fc2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x124>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f002 020f 	and.w	r2, r2, #15
 8001f46:	4295      	cmp	r5, r2
 8001f48:	d367      	bcc.n	800201a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4a:	6822      	ldr	r2, [r4, #0]
 8001f4c:	0751      	lsls	r1, r2, #29
 8001f4e:	d46d      	bmi.n	800202c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	0713      	lsls	r3, r2, #28
 8001f52:	d507      	bpl.n	8001f64 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f54:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <HAL_RCC_ClockConfig+0x128>)
 8001f56:	6921      	ldr	r1, [r4, #16]
 8001f58:	6893      	ldr	r3, [r2, #8]
 8001f5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f62:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f64:	f7ff ffaa 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001f68:	4b35      	ldr	r3, [pc, #212]	; (8002040 <HAL_RCC_ClockConfig+0x128>)
 8001f6a:	4a36      	ldr	r2, [pc, #216]	; (8002044 <HAL_RCC_ClockConfig+0x12c>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	40d8      	lsrs	r0, r3
 8001f76:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_ClockConfig+0x130>)
 8001f78:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001f7a:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_ClockConfig+0x134>)
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	f002 feed 	bl	8004d5c <HAL_InitTick>
  return HAL_OK;
 8001f82:	2000      	movs	r0, #0
 8001f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f88:	b2ca      	uxtb	r2, r1
 8001f8a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	4299      	cmp	r1, r3
 8001f94:	d1c5      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xa>
 8001f96:	e7cd      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1c>
 8001f98:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f9e:	bf1e      	ittt	ne
 8001fa0:	689a      	ldrne	r2, [r3, #8]
 8001fa2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001fa6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001faa:	bf42      	ittt	mi
 8001fac:	689a      	ldrmi	r2, [r3, #8]
 8001fae:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001fb2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	68a0      	ldr	r0, [r4, #8]
 8001fb8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fbc:	4302      	orrs	r2, r0
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e7bb      	b.n	8001f3a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	6862      	ldr	r2, [r4, #4]
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_RCC_ClockConfig+0x128>)
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	d11d      	bne.n	8002006 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	d0a7      	beq.n	8001f22 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4e1b      	ldr	r6, [pc, #108]	; (8002040 <HAL_RCC_ClockConfig+0x128>)
 8001fd4:	68b3      	ldr	r3, [r6, #8]
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001fde:	f7fe fe8f 	bl	8000d00 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001fe6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe8:	68b3      	ldr	r3, [r6, #8]
 8001fea:	6862      	ldr	r2, [r4, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ff4:	d0a3      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff6:	f7fe fe83 	bl	8000d00 <HAL_GetTick>
 8001ffa:	1bc0      	subs	r0, r0, r7
 8001ffc:	4540      	cmp	r0, r8
 8001ffe:	d9f3      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002000:	2003      	movs	r0, #3
}
 8002002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	1e91      	subs	r1, r2, #2
 8002008:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200c:	d802      	bhi.n	8002014 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002012:	e7dd      	b.n	8001fd0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	f013 0f02 	tst.w	r3, #2
 8002018:	e7da      	b.n	8001fd0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	b2ea      	uxtb	r2, r5
 800201c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	429d      	cmp	r5, r3
 8002026:	f47f af7c 	bne.w	8001f22 <HAL_RCC_ClockConfig+0xa>
 800202a:	e78e      	b.n	8001f4a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4904      	ldr	r1, [pc, #16]	; (8002040 <HAL_RCC_ClockConfig+0x128>)
 800202e:	68e0      	ldr	r0, [r4, #12]
 8002030:	688b      	ldr	r3, [r1, #8]
 8002032:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002036:	4303      	orrs	r3, r0
 8002038:	608b      	str	r3, [r1, #8]
 800203a:	e789      	b.n	8001f50 <HAL_RCC_ClockConfig+0x38>
 800203c:	40023c00 	.word	0x40023c00
 8002040:	40023800 	.word	0x40023800
 8002044:	08005073 	.word	0x08005073
 8002048:	2000000c 	.word	0x2000000c
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800205e:	6810      	ldr	r0, [r2, #0]
}
 8002060:	40d8      	lsrs	r0, r3
 8002062:	4770      	bx	lr
 8002064:	40023800 	.word	0x40023800
 8002068:	08005083 	.word	0x08005083
 800206c:	2000000c 	.word	0x2000000c

08002070 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800207e:	6810      	ldr	r0, [r2, #0]
}
 8002080:	40d8      	lsrs	r0, r3
 8002082:	4770      	bx	lr
 8002084:	40023800 	.word	0x40023800
 8002088:	08005083 	.word	0x08005083
 800208c:	2000000c 	.word	0x2000000c

08002090 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002090:	230f      	movs	r3, #15
 8002092:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_GetClockConfig+0x34>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	f002 0203 	and.w	r2, r2, #3
 800209c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80020a4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80020ac:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80020b6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_RCC_GetClockConfig+0x38>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	600b      	str	r3, [r1, #0]
 80020c2:	4770      	bx	lr
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40023c00 	.word	0x40023c00

080020cc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020cc:	6803      	ldr	r3, [r0, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020dc:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80020de:	bf1e      	ittt	ne
 80020e0:	681a      	ldrne	r2, [r3, #0]
 80020e2:	f042 0201 	orrne.w	r2, r2, #1
 80020e6:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80020e8:	2000      	movs	r0, #0
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_OC_DelayElapsedCallback>:
 80020ec:	4770      	bx	lr

080020ee <HAL_TIM_IC_CaptureCallback>:
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80020f0:	4770      	bx	lr

080020f2 <HAL_TIM_TriggerCallback>:
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f4:	6803      	ldr	r3, [r0, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	0791      	lsls	r1, r2, #30
{
 80020fa:	b510      	push	{r4, lr}
 80020fc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020fe:	d50e      	bpl.n	800211e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	0792      	lsls	r2, r2, #30
 8002104:	d50b      	bpl.n	800211e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002106:	f06f 0202 	mvn.w	r2, #2
 800210a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800210c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002112:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002114:	d077      	beq.n	8002206 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002116:	f7ff ffea 	bl	80020ee <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	2300      	movs	r3, #0
 800211c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	0750      	lsls	r0, r2, #29
 8002124:	d510      	bpl.n	8002148 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	0751      	lsls	r1, r2, #29
 800212a:	d50d      	bpl.n	8002148 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800212c:	f06f 0204 	mvn.w	r2, #4
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002132:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002134:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002136:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800213a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800213e:	d068      	beq.n	8002212 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002140:	f7ff ffd5 	bl	80020ee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002144:	2300      	movs	r3, #0
 8002146:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	0712      	lsls	r2, r2, #28
 800214e:	d50f      	bpl.n	8002170 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	0710      	lsls	r0, r2, #28
 8002154:	d50c      	bpl.n	8002170 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002156:	f06f 0208 	mvn.w	r2, #8
 800215a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800215c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002160:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002162:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002164:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002166:	d05a      	beq.n	800221e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002168:	f7ff ffc1 	bl	80020ee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216c:	2300      	movs	r3, #0
 800216e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	06d2      	lsls	r2, r2, #27
 8002176:	d510      	bpl.n	800219a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	06d0      	lsls	r0, r2, #27
 800217c:	d50d      	bpl.n	800219a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800217e:	f06f 0210 	mvn.w	r2, #16
 8002182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002184:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002186:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002188:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800218c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002190:	d04b      	beq.n	800222a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	f7ff ffac 	bl	80020ee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	2300      	movs	r3, #0
 8002198:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	07d1      	lsls	r1, r2, #31
 80021a0:	d508      	bpl.n	80021b4 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	07d2      	lsls	r2, r2, #31
 80021a6:	d505      	bpl.n	80021b4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a8:	f06f 0201 	mvn.w	r2, #1
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f002 fc92 	bl	8004ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	0610      	lsls	r0, r2, #24
 80021ba:	d508      	bpl.n	80021ce <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	0611      	lsls	r1, r2, #24
 80021c0:	d505      	bpl.n	80021ce <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021c8:	4620      	mov	r0, r4
 80021ca:	f000 f996 	bl	80024fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	0652      	lsls	r2, r2, #25
 80021d4:	d508      	bpl.n	80021e8 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	0650      	lsls	r0, r2, #25
 80021da:	d505      	bpl.n	80021e8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff85 	bl	80020f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	0691      	lsls	r1, r2, #26
 80021ee:	d522      	bpl.n	8002236 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	0692      	lsls	r2, r2, #26
 80021f4:	d51f      	bpl.n	8002236 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021fc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002202:	f000 b979 	b.w	80024f8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002206:	f7ff ff71 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220a:	4620      	mov	r0, r4
 800220c:	f7ff ff70 	bl	80020f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002210:	e783      	b.n	800211a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	f7ff ff6b 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff ff6a 	bl	80020f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800221c:	e792      	b.n	8002144 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	f7ff ff65 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff ff64 	bl	80020f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002228:	e7a0      	b.n	800216c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222a:	f7ff ff5f 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff5e 	bl	80020f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002234:	e7af      	b.n	8002196 <HAL_TIM_IRQHandler+0xa2>
 8002236:	bd10      	pop	{r4, pc}

08002238 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002238:	4a30      	ldr	r2, [pc, #192]	; (80022fc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800223a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800223c:	4290      	cmp	r0, r2
 800223e:	d012      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 8002240:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002244:	d00f      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 8002246:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800224a:	4290      	cmp	r0, r2
 800224c:	d00b      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 800224e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002252:	4290      	cmp	r0, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 8002256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800225a:	4290      	cmp	r0, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 800225e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002262:	4290      	cmp	r0, r2
 8002264:	d119      	bne.n	800229a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002266:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800226c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800226e:	4a23      	ldr	r2, [pc, #140]	; (80022fc <TIM_Base_SetConfig+0xc4>)
 8002270:	4290      	cmp	r0, r2
 8002272:	d029      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 8002274:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002278:	d026      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 800227a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800227e:	4290      	cmp	r0, r2
 8002280:	d022      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 8002282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002286:	4290      	cmp	r0, r2
 8002288:	d01e      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 800228a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800228e:	4290      	cmp	r0, r2
 8002290:	d01a      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 8002292:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002296:	4290      	cmp	r0, r2
 8002298:	d016      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 800229a:	4a19      	ldr	r2, [pc, #100]	; (8002300 <TIM_Base_SetConfig+0xc8>)
 800229c:	4290      	cmp	r0, r2
 800229e:	d013      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 80022a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022a4:	4290      	cmp	r0, r2
 80022a6:	d00f      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 80022a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ac:	4290      	cmp	r0, r2
 80022ae:	d00b      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 80022b0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80022b4:	4290      	cmp	r0, r2
 80022b6:	d007      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 80022b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022bc:	4290      	cmp	r0, r2
 80022be:	d003      	beq.n	80022c8 <TIM_Base_SetConfig+0x90>
 80022c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c4:	4290      	cmp	r0, r2
 80022c6:	d103      	bne.n	80022d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ce:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d0:	694a      	ldr	r2, [r1, #20]
 80022d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022d6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80022d8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022da:	688b      	ldr	r3, [r1, #8]
 80022dc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022de:	680b      	ldr	r3, [r1, #0]
 80022e0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <TIM_Base_SetConfig+0xc4>)
 80022e4:	4298      	cmp	r0, r3
 80022e6:	d003      	beq.n	80022f0 <TIM_Base_SetConfig+0xb8>
 80022e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ec:	4298      	cmp	r0, r3
 80022ee:	d101      	bne.n	80022f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f0:	690b      	ldr	r3, [r1, #16]
 80022f2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f4:	2301      	movs	r3, #1
 80022f6:	6143      	str	r3, [r0, #20]
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010000 	.word	0x40010000
 8002300:	40014000 	.word	0x40014000

08002304 <HAL_TIM_Base_Init>:
{
 8002304:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002306:	4604      	mov	r4, r0
 8002308:	b1a0      	cbz	r0, 8002334 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800230a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800230e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002312:	b91b      	cbnz	r3, 800231c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002314:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002318:	f002 fc98 	bl	8004c4c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	2302      	movs	r3, #2
 800231e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	1d21      	adds	r1, r4, #4
 8002326:	f7ff ff87 	bl	8002238 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800232a:	2301      	movs	r3, #1
 800232c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002330:	2000      	movs	r0, #0
 8002332:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002334:	2001      	movs	r0, #1
}
 8002336:	bd10      	pop	{r4, pc}

08002338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002338:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800233a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800233c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002342:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002346:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002348:	6083      	str	r3, [r0, #8]
 800234a:	bd10      	pop	{r4, pc}

0800234c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800234c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
{
 8002352:	b570      	push	{r4, r5, r6, lr}
 8002354:	4604      	mov	r4, r0
 8002356:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800235a:	d019      	beq.n	8002390 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002360:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002362:	2301      	movs	r3, #1
 8002364:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002368:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800236a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800236e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002372:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002374:	680b      	ldr	r3, [r1, #0]
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d065      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xfa>
 800237a:	d815      	bhi.n	80023a8 <HAL_TIM_ConfigClockSource+0x5c>
 800237c:	2b10      	cmp	r3, #16
 800237e:	d00c      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x4e>
 8002380:	d807      	bhi.n	8002392 <HAL_TIM_ConfigClockSource+0x46>
 8002382:	b153      	cbz	r3, 800239a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002384:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002386:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002388:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800238c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002390:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002392:	2b20      	cmp	r3, #32
 8002394:	d001      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x4e>
 8002396:	2b30      	cmp	r3, #48	; 0x30
 8002398:	d1f4      	bne.n	8002384 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800239a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800239c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80023a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023a4:	4313      	orrs	r3, r2
 80023a6:	e01a      	b.n	80023de <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80023a8:	2b60      	cmp	r3, #96	; 0x60
 80023aa:	d034      	beq.n	8002416 <HAL_TIM_ConfigClockSource+0xca>
 80023ac:	d819      	bhi.n	80023e2 <HAL_TIM_ConfigClockSource+0x96>
 80023ae:	2b50      	cmp	r3, #80	; 0x50
 80023b0:	d1e8      	bne.n	8002384 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b2:	684a      	ldr	r2, [r1, #4]
 80023b4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023b6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b8:	6a05      	ldr	r5, [r0, #32]
 80023ba:	f025 0501 	bic.w	r5, r5, #1
 80023be:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023c2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023ca:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80023ce:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80023d0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80023d2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80023d4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023da:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80023de:	6083      	str	r3, [r0, #8]
 80023e0:	e7d0      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80023e2:	2b70      	cmp	r3, #112	; 0x70
 80023e4:	d00c      	beq.n	8002400 <HAL_TIM_ConfigClockSource+0xb4>
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ea:	d1cb      	bne.n	8002384 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80023ec:	68cb      	ldr	r3, [r1, #12]
 80023ee:	684a      	ldr	r2, [r1, #4]
 80023f0:	6889      	ldr	r1, [r1, #8]
 80023f2:	f7ff ffa1 	bl	8002338 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	6893      	ldr	r3, [r2, #8]
 80023fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fe:	e008      	b.n	8002412 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002400:	68cb      	ldr	r3, [r1, #12]
 8002402:	684a      	ldr	r2, [r1, #4]
 8002404:	6889      	ldr	r1, [r1, #8]
 8002406:	f7ff ff97 	bl	8002338 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800240e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002412:	6093      	str	r3, [r2, #8]
      break;
 8002414:	e7b6      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002416:	684d      	ldr	r5, [r1, #4]
 8002418:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800241a:	6a01      	ldr	r1, [r0, #32]
 800241c:	f021 0110 	bic.w	r1, r1, #16
 8002420:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002422:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002424:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002426:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800242a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800242e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002432:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002436:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002438:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800243a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800243c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002440:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002444:	e7cb      	b.n	80023de <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002446:	684a      	ldr	r2, [r1, #4]
 8002448:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800244a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800244c:	6a05      	ldr	r5, [r0, #32]
 800244e:	f025 0501 	bic.w	r5, r5, #1
 8002452:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002454:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002456:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800245a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800245e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002462:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002464:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002466:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002468:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800246a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800246e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002472:	e7b4      	b.n	80023de <HAL_TIM_ConfigClockSource+0x92>

08002474 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002474:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
{
 800247a:	b530      	push	{r4, r5, lr}
 800247c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002480:	d035      	beq.n	80024ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002482:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002486:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002488:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800248a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800248c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8002490:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002492:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8002494:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002498:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800249a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249c:	4c15      	ldr	r4, [pc, #84]	; (80024f4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800249e:	42a3      	cmp	r3, r4
 80024a0:	d01a      	beq.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d017      	beq.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80024a8:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80024ac:	42a3      	cmp	r3, r4
 80024ae:	d013      	beq.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80024b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024b4:	42a3      	cmp	r3, r4
 80024b6:	d00f      	beq.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80024b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024bc:	42a3      	cmp	r3, r4
 80024be:	d00b      	beq.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80024c0:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80024c4:	42a3      	cmp	r3, r4
 80024c6:	d007      	beq.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80024c8:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80024cc:	42a3      	cmp	r3, r4
 80024ce:	d003      	beq.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80024d0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80024d4:	42a3      	cmp	r3, r4
 80024d6:	d104      	bne.n	80024e2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024d8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024de:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e8:	2300      	movs	r3, #0
 80024ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80024ee:	4618      	mov	r0, r3

  return HAL_OK;
}
 80024f0:	bd30      	pop	{r4, r5, pc}
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000

080024f8 <HAL_TIMEx_CommutCallback>:
 80024f8:	4770      	bx	lr

080024fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024fa:	4770      	bx	lr

080024fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024fc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024fe:	6803      	ldr	r3, [r0, #0]
 8002500:	68c1      	ldr	r1, [r0, #12]
 8002502:	691a      	ldr	r2, [r3, #16]
{
 8002504:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002506:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800250a:	430a      	orrs	r2, r1
 800250c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800250e:	6925      	ldr	r5, [r4, #16]
 8002510:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002512:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002514:	69c0      	ldr	r0, [r0, #28]
 8002516:	432a      	orrs	r2, r5
 8002518:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800251a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800251e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002520:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002524:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002526:	430a      	orrs	r2, r1
 8002528:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	69a1      	ldr	r1, [r4, #24]
 800252e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002532:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002534:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002538:	615a      	str	r2, [r3, #20]
 800253a:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800253c:	d129      	bne.n	8002592 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <UART_SetConfig+0x4e>
 8002542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002546:	4293      	cmp	r3, r2
 8002548:	d120      	bne.n	800258c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800254a:	f7ff fd91 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800254e:	6862      	ldr	r2, [r4, #4]
 8002550:	6825      	ldr	r5, [r4, #0]
 8002552:	1892      	adds	r2, r2, r2
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	f04f 0119 	mov.w	r1, #25
 800255c:	415b      	adcs	r3, r3
 800255e:	fba0 0101 	umull	r0, r1, r0, r1
 8002562:	f7fe fa1f 	bl	80009a4 <__aeabi_uldivmod>
 8002566:	2164      	movs	r1, #100	; 0x64
 8002568:	fbb0 f4f1 	udiv	r4, r0, r1
 800256c:	fb01 0314 	mls	r3, r1, r4, r0
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	3332      	adds	r3, #50	; 0x32
 8002574:	fbb3 f3f1 	udiv	r3, r3, r1
 8002578:	f003 0207 	and.w	r2, r3, #7
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002582:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002586:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002588:	60ab      	str	r3, [r5, #8]
 800258a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800258c:	f7ff fd60 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8002590:	e7dd      	b.n	800254e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002592:	4293      	cmp	r3, r2
 8002594:	d002      	beq.n	800259c <UART_SetConfig+0xa0>
 8002596:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <UART_SetConfig+0xd8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d116      	bne.n	80025ca <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800259c:	f7ff fd68 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	6825      	ldr	r5, [r4, #0]
 80025a4:	2119      	movs	r1, #25
 80025a6:	009a      	lsls	r2, r3, #2
 80025a8:	fba0 0101 	umull	r0, r1, r0, r1
 80025ac:	0f9b      	lsrs	r3, r3, #30
 80025ae:	f7fe f9f9 	bl	80009a4 <__aeabi_uldivmod>
 80025b2:	2264      	movs	r2, #100	; 0x64
 80025b4:	fbb0 f1f2 	udiv	r1, r0, r2
 80025b8:	fb02 0311 	mls	r3, r2, r1, r0
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	3332      	adds	r3, #50	; 0x32
 80025c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80025c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80025c8:	e7de      	b.n	8002588 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ca:	f7ff fd41 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 80025ce:	e7e7      	b.n	80025a0 <UART_SetConfig+0xa4>
 80025d0:	40011000 	.word	0x40011000
 80025d4:	40011400 	.word	0x40011400

080025d8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	4604      	mov	r4, r0
 80025dc:	460e      	mov	r6, r1
 80025de:	4617      	mov	r7, r2
 80025e0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e2:	6821      	ldr	r1, [r4, #0]
 80025e4:	680b      	ldr	r3, [r1, #0]
 80025e6:	ea36 0303 	bics.w	r3, r6, r3
 80025ea:	d101      	bne.n	80025f0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80025ec:	2000      	movs	r0, #0
}
 80025ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80025f0:	1c6b      	adds	r3, r5, #1
 80025f2:	d0f7      	beq.n	80025e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025f4:	b995      	cbnz	r5, 800261c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002608:	2320      	movs	r3, #32
 800260a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800260e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002612:	2300      	movs	r3, #0
 8002614:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002618:	2003      	movs	r0, #3
 800261a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800261c:	f7fe fb70 	bl	8000d00 <HAL_GetTick>
 8002620:	1bc0      	subs	r0, r0, r7
 8002622:	4285      	cmp	r5, r0
 8002624:	d2dd      	bcs.n	80025e2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002626:	e7e6      	b.n	80025f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002628 <HAL_UART_Init>:
{
 8002628:	b510      	push	{r4, lr}
  if (huart == NULL)
 800262a:	4604      	mov	r4, r0
 800262c:	b340      	cbz	r0, 8002680 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800262e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002632:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002636:	b91b      	cbnz	r3, 8002640 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002638:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800263c:	f002 fb1e 	bl	8004c7c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002640:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002642:	2324      	movs	r3, #36	; 0x24
 8002644:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002648:	68d3      	ldr	r3, [r2, #12]
 800264a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800264e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff ff53 	bl	80024fc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800265e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002666:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002670:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002672:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002674:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002676:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800267a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800267e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002680:	2001      	movs	r0, #1
}
 8002682:	bd10      	pop	{r4, pc}

08002684 <HAL_UART_Transmit>:
{
 8002684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002688:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800268a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800268e:	2b20      	cmp	r3, #32
{
 8002690:	4604      	mov	r4, r0
 8002692:	460d      	mov	r5, r1
 8002694:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002696:	d151      	bne.n	800273c <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002698:	2900      	cmp	r1, #0
 800269a:	d04c      	beq.n	8002736 <HAL_UART_Transmit+0xb2>
 800269c:	2a00      	cmp	r2, #0
 800269e:	d04a      	beq.n	8002736 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80026a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d049      	beq.n	800273c <HAL_UART_Transmit+0xb8>
 80026a8:	2301      	movs	r3, #1
 80026aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ae:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b4:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80026bc:	f7fe fb20 	bl	8000d00 <HAL_GetTick>
    huart->TxXferSize = Size;
 80026c0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80026c4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80026c6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80026ca:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80026ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b95b      	cbnz	r3, 80026ec <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026d4:	463b      	mov	r3, r7
 80026d6:	4632      	mov	r2, r6
 80026d8:	2140      	movs	r1, #64	; 0x40
 80026da:	4620      	mov	r0, r4
 80026dc:	f7ff ff7c 	bl	80025d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80026e0:	b9a0      	cbnz	r0, 800270c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80026e2:	2320      	movs	r3, #32
 80026e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80026e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80026ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026f4:	68a3      	ldr	r3, [r4, #8]
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	4632      	mov	r2, r6
 80026fc:	463b      	mov	r3, r7
 80026fe:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002702:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002704:	d10e      	bne.n	8002724 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	f7ff ff67 	bl	80025d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800270a:	b110      	cbz	r0, 8002712 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 800270c:	2003      	movs	r0, #3
 800270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002712:	882b      	ldrh	r3, [r5, #0]
 8002714:	6822      	ldr	r2, [r4, #0]
 8002716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800271c:	6923      	ldr	r3, [r4, #16]
 800271e:	b943      	cbnz	r3, 8002732 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8002720:	3502      	adds	r5, #2
 8002722:	e7d4      	b.n	80026ce <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002724:	f7ff ff58 	bl	80025d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002728:	2800      	cmp	r0, #0
 800272a:	d1ef      	bne.n	800270c <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	782a      	ldrb	r2, [r5, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	3501      	adds	r5, #1
 8002734:	e7cb      	b.n	80026ce <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800273c:	2002      	movs	r0, #2
}
 800273e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002742 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8002742:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002744:	f001 fee8 	bl	8004518 <pvTimerGetTimerID>

  if (callb != NULL) {
 8002748:	b120      	cbz	r0, 8002754 <TimerCallback+0x12>
    callb->func (callb->arg);
 800274a:	6803      	ldr	r3, [r0, #0]
 800274c:	6840      	ldr	r0, [r0, #4]
  }
}
 800274e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
 8002752:	4718      	bx	r3
 8002754:	bd10      	pop	{r4, pc}
	...

08002758 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002758:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800275c:	b113      	cbz	r3, 8002764 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800275e:	f06f 0005 	mvn.w	r0, #5
 8002762:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002764:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f8      	bne.n	800275e <osKernelInitialize+0x6>
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <osKernelInitialize+0x34>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	2802      	cmp	r0, #2
 8002772:	d106      	bne.n	8002782 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002774:	f3ef 8311 	mrs	r3, BASEPRI
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <osKernelInitialize+0x6>
      stat = osError;
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002780:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8002782:	2800      	cmp	r0, #0
 8002784:	d1fa      	bne.n	800277c <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	4770      	bx	lr
 800278c:	20000288 	.word	0x20000288

08002790 <osKernelStart>:
osStatus_t osKernelStart (void) {
 8002790:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002792:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8002796:	b113      	cbz	r3, 800279e <osKernelStart+0xe>
    stat = osErrorISR;
 8002798:	f06f 0005 	mvn.w	r0, #5
 800279c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279e:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 80027a2:	2c00      	cmp	r4, #0
 80027a4:	d1f8      	bne.n	8002798 <osKernelStart+0x8>
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <osKernelStart+0x3c>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2a02      	cmp	r2, #2
 80027ac:	d106      	bne.n	80027bc <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027ae:	f3ef 8311 	mrs	r3, BASEPRI
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <osKernelStart+0x8>
      stat = osError;
 80027b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80027ba:	bd10      	pop	{r4, pc}
    if (KernelState == osKernelReady) {
 80027bc:	2a01      	cmp	r2, #1
 80027be:	d1fa      	bne.n	80027b6 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 80027c0:	2202      	movs	r2, #2
 80027c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80027c4:	f001 f950 	bl	8003a68 <vTaskStartScheduler>
      stat = osOK;
 80027c8:	4620      	mov	r0, r4
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	20000288 	.word	0x20000288

080027d0 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d2:	b087      	sub	sp, #28
 80027d4:	4614      	mov	r4, r2
  hTask = NULL;
 80027d6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027d8:	460b      	mov	r3, r1
  hTask = NULL;
 80027da:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027dc:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 80027e0:	bb72      	cbnz	r2, 8002840 <osThreadNew+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e2:	f3ef 8210 	mrs	r2, PRIMASK
 80027e6:	bb5a      	cbnz	r2, 8002840 <osThreadNew+0x70>
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <osThreadNew+0xbc>)
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	2a02      	cmp	r2, #2
 80027ee:	d102      	bne.n	80027f6 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027f0:	f3ef 8211 	mrs	r2, BASEPRI
 80027f4:	bb22      	cbnz	r2, 8002840 <osThreadNew+0x70>
 80027f6:	b318      	cbz	r0, 8002840 <osThreadNew+0x70>
    empty = '\0';
 80027f8:	2200      	movs	r2, #0
 80027fa:	f88d 2013 	strb.w	r2, [sp, #19]
    if (attr != NULL) {
 80027fe:	2c00      	cmp	r4, #0
 8002800:	d03c      	beq.n	800287c <osThreadNew+0xac>
      if (attr->name != NULL) {
 8002802:	6821      	ldr	r1, [r4, #0]
 8002804:	b909      	cbnz	r1, 800280a <osThreadNew+0x3a>
    name  = &empty;
 8002806:	f10d 0113 	add.w	r1, sp, #19
      if (attr->priority != osPriorityNone) {
 800280a:	69a5      	ldr	r5, [r4, #24]
 800280c:	2d00      	cmp	r5, #0
 800280e:	bf08      	it	eq
 8002810:	2518      	moveq	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002812:	1e6a      	subs	r2, r5, #1
 8002814:	2a37      	cmp	r2, #55	; 0x37
 8002816:	462f      	mov	r7, r5
 8002818:	d835      	bhi.n	8002886 <osThreadNew+0xb6>
 800281a:	6862      	ldr	r2, [r4, #4]
 800281c:	07d2      	lsls	r2, r2, #31
 800281e:	d432      	bmi.n	8002886 <osThreadNew+0xb6>
      if (attr->stack_size > 0U) {
 8002820:	6966      	ldr	r6, [r4, #20]
 8002822:	b186      	cbz	r6, 8002846 <osThreadNew+0x76>
        stack = attr->stack_size / sizeof(StackType_t);
 8002824:	08b2      	lsrs	r2, r6, #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002826:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800282a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800282e:	f1be 0f00 	cmp.w	lr, #0
 8002832:	d00a      	beq.n	800284a <osThreadNew+0x7a>
 8002834:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 8002838:	d902      	bls.n	8002840 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800283a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800283c:	b104      	cbz	r4, 8002840 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800283e:	b9ae      	cbnz	r6, 800286c <osThreadNew+0x9c>
  return ((osThreadId_t)hTask);
 8002840:	9805      	ldr	r0, [sp, #20]
}
 8002842:	b007      	add	sp, #28
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	e7ed      	b.n	8002826 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800284a:	f1bc 0f00 	cmp.w	ip, #0
 800284e:	d1f7      	bne.n	8002840 <osThreadNew+0x70>
      if (mem == 0) {
 8002850:	6924      	ldr	r4, [r4, #16]
 8002852:	2c00      	cmp	r4, #0
 8002854:	d1f4      	bne.n	8002840 <osThreadNew+0x70>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002856:	ac05      	add	r4, sp, #20
 8002858:	9401      	str	r4, [sp, #4]
 800285a:	9700      	str	r7, [sp, #0]
 800285c:	b292      	uxth	r2, r2
 800285e:	f001 f8d6 	bl	8003a0e <xTaskCreate>
 8002862:	2801      	cmp	r0, #1
          hTask = NULL;
 8002864:	bf1c      	itt	ne
 8002866:	2300      	movne	r3, #0
 8002868:	9305      	strne	r3, [sp, #20]
 800286a:	e7e9      	b.n	8002840 <osThreadNew+0x70>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800286c:	f8cd e008 	str.w	lr, [sp, #8]
 8002870:	9401      	str	r4, [sp, #4]
 8002872:	9500      	str	r5, [sp, #0]
 8002874:	f001 f894 	bl	80039a0 <xTaskCreateStatic>
 8002878:	9005      	str	r0, [sp, #20]
 800287a:	e7e1      	b.n	8002840 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800287c:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800287e:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 8002880:	f10d 0113 	add.w	r1, sp, #19
 8002884:	e7e7      	b.n	8002856 <osThreadNew+0x86>
        return (NULL);
 8002886:	2000      	movs	r0, #0
 8002888:	e7db      	b.n	8002842 <osThreadNew+0x72>
 800288a:	bf00      	nop
 800288c:	20000288 	.word	0x20000288

08002890 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002892:	4606      	mov	r6, r0
 8002894:	460d      	mov	r5, r1
 8002896:	4617      	mov	r7, r2
 8002898:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800289a:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 800289e:	b113      	cbz	r3, 80028a6 <osTimerNew+0x16>
  hTimer = NULL;
 80028a0:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 80028a2:	b003      	add	sp, #12
 80028a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a6:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (func != NULL)) {
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f8      	bne.n	80028a0 <osTimerNew+0x10>
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <osTimerNew+0x78>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d103      	bne.n	80028be <osTimerNew+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028b6:	f3ef 8311 	mrs	r3, BASEPRI
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <osTimerNew+0x10>
 80028be:	2e00      	cmp	r6, #0
 80028c0:	d0ee      	beq.n	80028a0 <osTimerNew+0x10>
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80028c2:	2008      	movs	r0, #8
 80028c4:	f000 faae 	bl	8002e24 <pvPortMalloc>
    if (callb != NULL) {
 80028c8:	4603      	mov	r3, r0
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d0e8      	beq.n	80028a0 <osTimerNew+0x10>
      if (type == osTimerOnce) {
 80028ce:	1c2a      	adds	r2, r5, #0
      callb->arg  = argument;
 80028d0:	e880 00c0 	stmia.w	r0, {r6, r7}
      if (type == osTimerOnce) {
 80028d4:	bf18      	it	ne
 80028d6:	2201      	movne	r2, #1
      if (attr != NULL) {
 80028d8:	b1a4      	cbz	r4, 8002904 <osTimerNew+0x74>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80028da:	68a1      	ldr	r1, [r4, #8]
        if (attr->name != NULL) {
 80028dc:	6820      	ldr	r0, [r4, #0]
 80028de:	68e4      	ldr	r4, [r4, #12]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80028e0:	b141      	cbz	r1, 80028f4 <osTimerNew+0x64>
 80028e2:	2c2f      	cmp	r4, #47	; 0x2f
 80028e4:	d9dc      	bls.n	80028a0 <osTimerNew+0x10>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80028e6:	9101      	str	r1, [sp, #4]
 80028e8:	4908      	ldr	r1, [pc, #32]	; (800290c <osTimerNew+0x7c>)
 80028ea:	9100      	str	r1, [sp, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	f001 fc7a 	bl	80041e6 <xTimerCreateStatic>
 80028f2:	e7d6      	b.n	80028a2 <osTimerNew+0x12>
        if (mem == 0) {
 80028f4:	2c00      	cmp	r4, #0
 80028f6:	d1d3      	bne.n	80028a0 <osTimerNew+0x10>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80028f8:	4904      	ldr	r1, [pc, #16]	; (800290c <osTimerNew+0x7c>)
 80028fa:	9100      	str	r1, [sp, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	f001 fc4b 	bl	8004198 <xTimerCreate>
  return ((osTimerId_t)hTimer);
 8002902:	e7ce      	b.n	80028a2 <osTimerNew+0x12>
      name = NULL;
 8002904:	4620      	mov	r0, r4
 8002906:	e7f7      	b.n	80028f8 <osTimerNew+0x68>
 8002908:	20000288 	.word	0x20000288
 800290c:	08002743 	.word	0x08002743

08002910 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002910:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002912:	460e      	mov	r6, r1
 8002914:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002916:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800291a:	b11b      	cbz	r3, 8002924 <osSemaphoreNew+0x14>
          hSemaphore = xSemaphoreCreateBinary();
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
 800291c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800291e:	4620      	mov	r0, r4
 8002920:	b002      	add	sp, #8
 8002922:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002924:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f7      	bne.n	800291c <osSemaphoreNew+0xc>
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <osSemaphoreNew+0xac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d103      	bne.n	800293c <osSemaphoreNew+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002934:	f3ef 8311 	mrs	r3, BASEPRI
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ef      	bne.n	800291c <osSemaphoreNew+0xc>
 800293c:	2800      	cmp	r0, #0
 800293e:	d0ed      	beq.n	800291c <osSemaphoreNew+0xc>
 8002940:	42b0      	cmp	r0, r6
 8002942:	d3eb      	bcc.n	800291c <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8002944:	b17d      	cbz	r5, 8002966 <osSemaphoreNew+0x56>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002946:	68ab      	ldr	r3, [r5, #8]
 8002948:	68ea      	ldr	r2, [r5, #12]
 800294a:	b153      	cbz	r3, 8002962 <osSemaphoreNew+0x52>
 800294c:	2a4f      	cmp	r2, #79	; 0x4f
 800294e:	d9e5      	bls.n	800291c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8002950:	2801      	cmp	r0, #1
 8002952:	d010      	beq.n	8002976 <osSemaphoreNew+0x66>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002954:	461a      	mov	r2, r3
 8002956:	4631      	mov	r1, r6
 8002958:	f000 fc6a 	bl	8003230 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800295c:	4604      	mov	r4, r0
 800295e:	bb30      	cbnz	r0, 80029ae <osSemaphoreNew+0x9e>
 8002960:	e7dc      	b.n	800291c <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002962:	2a00      	cmp	r2, #0
 8002964:	d1da      	bne.n	800291c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8002966:	2801      	cmp	r0, #1
 8002968:	d11a      	bne.n	80029a0 <osSemaphoreNew+0x90>
          hSemaphore = xSemaphoreCreateBinary();
 800296a:	2203      	movs	r2, #3
 800296c:	2100      	movs	r1, #0
 800296e:	2001      	movs	r0, #1
 8002970:	f000 fc37 	bl	80031e2 <xQueueGenericCreate>
 8002974:	e005      	b.n	8002982 <osSemaphoreNew+0x72>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002976:	2203      	movs	r2, #3
 8002978:	9200      	str	r2, [sp, #0]
 800297a:	2200      	movs	r2, #0
 800297c:	4611      	mov	r1, r2
 800297e:	f000 fbe3 	bl	8003148 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8002982:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002984:	2800      	cmp	r0, #0
 8002986:	d0c9      	beq.n	800291c <osSemaphoreNew+0xc>
 8002988:	b186      	cbz	r6, 80029ac <osSemaphoreNew+0x9c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800298a:	2300      	movs	r3, #0
 800298c:	461a      	mov	r2, r3
 800298e:	4619      	mov	r1, r3
 8002990:	f000 fc8e 	bl	80032b0 <xQueueGenericSend>
 8002994:	2801      	cmp	r0, #1
 8002996:	d009      	beq.n	80029ac <osSemaphoreNew+0x9c>
            vSemaphoreDelete (hSemaphore);
 8002998:	4620      	mov	r0, r4
 800299a:	f000 fe6b 	bl	8003674 <vQueueDelete>
 800299e:	e7bd      	b.n	800291c <osSemaphoreNew+0xc>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80029a0:	4631      	mov	r1, r6
 80029a2:	f000 fc67 	bl	8003274 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80029a6:	4604      	mov	r4, r0
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d0b7      	beq.n	800291c <osSemaphoreNew+0xc>
        if (attr != NULL) {
 80029ac:	b125      	cbz	r5, 80029b8 <osSemaphoreNew+0xa8>
          name = attr->name;
 80029ae:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 80029b0:	4620      	mov	r0, r4
 80029b2:	f000 fe39 	bl	8003628 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80029b6:	e7b2      	b.n	800291e <osSemaphoreNew+0xe>
          name = NULL;
 80029b8:	4629      	mov	r1, r5
 80029ba:	e7f9      	b.n	80029b0 <osSemaphoreNew+0xa0>
 80029bc:	20000288 	.word	0x20000288

080029c0 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <vApplicationGetIdleTaskMemory+0x10>)
 80029c2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <vApplicationGetIdleTaskMemory+0x14>)
 80029c6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	2000022c 	.word	0x2000022c
 80029d4:	2000002c 	.word	0x2000002c

080029d8 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <vApplicationGetTimerTaskMemory+0x10>)
 80029da:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <vApplicationGetTimerTaskMemory+0x14>)
 80029de:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4770      	bx	lr
 80029e8:	2000068c 	.word	0x2000068c
 80029ec:	2000028c 	.word	0x2000028c

080029f0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f0:	f100 0308 	add.w	r3, r0, #8
 80029f4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029f6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029fe:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a00:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a02:	6003      	str	r3, [r0, #0]
 8002a04:	4770      	bx	lr

08002a06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	6103      	str	r3, [r0, #16]
 8002a0a:	4770      	bx	lr

08002a0c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a0c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a0e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a18:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002a1a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a1c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002a1e:	3301      	adds	r3, #1
 8002a20:	6003      	str	r3, [r0, #0]
 8002a22:	4770      	bx	lr

08002a24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a24:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a26:	1c53      	adds	r3, r2, #1
{
 8002a28:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002a2a:	d10a      	bne.n	8002a42 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a2c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a32:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a34:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a36:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002a38:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a3a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	6003      	str	r3, [r0, #0]
 8002a40:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a42:	f100 0308 	add.w	r3, r0, #8
 8002a46:	685c      	ldr	r4, [r3, #4]
 8002a48:	6825      	ldr	r5, [r4, #0]
 8002a4a:	42aa      	cmp	r2, r5
 8002a4c:	d3ef      	bcc.n	8002a2e <vListInsert+0xa>
 8002a4e:	4623      	mov	r3, r4
 8002a50:	e7f9      	b.n	8002a46 <vListInsert+0x22>

08002a52 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a52:	6841      	ldr	r1, [r0, #4]
 8002a54:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a56:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a58:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a5a:	6882      	ldr	r2, [r0, #8]
 8002a5c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a62:	bf08      	it	eq
 8002a64:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a66:	2200      	movs	r2, #0
 8002a68:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a70:	6818      	ldr	r0, [r3, #0]
}
 8002a72:	4770      	bx	lr

08002a74 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a74:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <prvTaskExitError+0x3c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	d008      	beq.n	8002a94 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	e7fe      	b.n	8002a92 <prvTaskExitError+0x1e>
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002aa4:	9b01      	ldr	r3, [sp, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0fc      	beq.n	8002aa4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002aaa:	b002      	add	sp, #8
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000008 	.word	0x20000008

08002ab4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002ab4:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <prvPortStartFirstTask+0x24>)
 8002ab6:	6800      	ldr	r0, [r0, #0]
 8002ab8:	6800      	ldr	r0, [r0, #0]
 8002aba:	f380 8808 	msr	MSP, r0
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f380 8814 	msr	CONTROL, r0
 8002ac6:	b662      	cpsie	i
 8002ac8:	b661      	cpsie	f
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	df00      	svc	0
 8002ad4:	bf00      	nop
 8002ad6:	0000      	.short	0x0000
 8002ad8:	e000ed08 	.word	0xe000ed08

08002adc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002adc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002aec <vPortEnableVFP+0x10>
 8002ae0:	6801      	ldr	r1, [r0, #0]
 8002ae2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ae6:	6001      	str	r1, [r0, #0]
 8002ae8:	4770      	bx	lr
 8002aea:	0000      	.short	0x0000
 8002aec:	e000ed88 	.word	0xe000ed88

08002af0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <pxPortInitialiseStack+0x28>)
 8002afa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002afe:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b02:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002b06:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b0a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b0e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002b12:	3844      	subs	r0, #68	; 0x44
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	08002a75 	.word	0x08002a75
 8002b1c:	00000000 	.word	0x00000000

08002b20 <SVC_Handler>:
	__asm volatile (
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <pxCurrentTCBConst2>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	6808      	ldr	r0, [r1, #0]
 8002b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2a:	f380 8809 	msr	PSP, r0
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f380 8811 	msr	BASEPRI, r0
 8002b3a:	4770      	bx	lr
 8002b3c:	f3af 8000 	nop.w

08002b40 <pxCurrentTCBConst2>:
 8002b40:	20004308 	.word	0x20004308

08002b44 <vPortEnterCritical>:
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002b54:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <vPortEnterCritical+0x3c>)
 8002b56:	6813      	ldr	r3, [r2, #0]
 8002b58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002b5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002b5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002b5e:	d10d      	bne.n	8002b7c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <vPortEnterCritical+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002b68:	d008      	beq.n	8002b7c <vPortEnterCritical+0x38>
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	e7fe      	b.n	8002b7a <vPortEnterCritical+0x36>
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000008 	.word	0x20000008
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002b88:	4a08      	ldr	r2, [pc, #32]	; (8002bac <vPortExitCritical+0x24>)
 8002b8a:	6813      	ldr	r3, [r2, #0]
 8002b8c:	b943      	cbnz	r3, 8002ba0 <vPortExitCritical+0x18>
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	e7fe      	b.n	8002b9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002ba4:	b90b      	cbnz	r3, 8002baa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	4770      	bx	lr
 8002bac:	20000008 	.word	0x20000008

08002bb0 <PendSV_Handler>:
	__asm volatile
 8002bb0:	f3ef 8009 	mrs	r0, PSP
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <pxCurrentTCBConst>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	f01e 0f10 	tst.w	lr, #16
 8002bc0:	bf08      	it	eq
 8002bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bca:	6010      	str	r0, [r2, #0]
 8002bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bd4:	f380 8811 	msr	BASEPRI, r0
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f001 f8e4 	bl	8003dac <vTaskSwitchContext>
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f380 8811 	msr	BASEPRI, r0
 8002bec:	bc09      	pop	{r0, r3}
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	6808      	ldr	r0, [r1, #0]
 8002bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf6:	f01e 0f10 	tst.w	lr, #16
 8002bfa:	bf08      	it	eq
 8002bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c00:	f380 8809 	msr	PSP, r0
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	f3af 8000 	nop.w

08002c10 <pxCurrentTCBConst>:
 8002c10:	20004308 	.word	0x20004308

08002c14 <SysTick_Handler>:
{
 8002c14:	b508      	push	{r3, lr}
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002c26:	f000 ff71 	bl	8003b0c <xTaskIncrementTick>
 8002c2a:	b118      	cbz	r0, 8002c34 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <SysTick_Handler+0x28>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002c34:	2300      	movs	r3, #0
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	bd08      	pop	{r3, pc}
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c40:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c42:	4909      	ldr	r1, [pc, #36]	; (8002c68 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c48:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <vPortSetupTimerInterrupt+0x2c>)
 8002c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c56:	4906      	ldr	r1, [pc, #24]	; (8002c70 <vPortSetupTimerInterrupt+0x30>)
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010
 8002c68:	e000e018 	.word	0xe000e018
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	e000e014 	.word	0xe000e014

08002c74 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c74:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <xPortStartScheduler+0xe8>)
 8002c76:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <xPortStartScheduler+0xec>)
{
 8002c78:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c7a:	6819      	ldr	r1, [r3, #0]
 8002c7c:	4291      	cmp	r1, r2
 8002c7e:	d108      	bne.n	8002c92 <xPortStartScheduler+0x1e>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	e7fe      	b.n	8002c90 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <xPortStartScheduler+0xf0>)
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d108      	bne.n	8002cac <xPortStartScheduler+0x38>
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	e7fe      	b.n	8002caa <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <xPortStartScheduler+0xf4>)
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cb8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cba:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cc2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002cc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cca:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <xPortStartScheduler+0xfc>)
 8002cce:	2207      	movs	r2, #7
 8002cd0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002cd8:	0600      	lsls	r0, r0, #24
 8002cda:	f102 34ff 	add.w	r4, r2, #4294967295
 8002cde:	d40d      	bmi.n	8002cfc <xPortStartScheduler+0x88>
 8002ce0:	b101      	cbz	r1, 8002ce4 <xPortStartScheduler+0x70>
 8002ce2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	2a03      	cmp	r2, #3
 8002ce8:	d011      	beq.n	8002d0e <xPortStartScheduler+0x9a>
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	e7fe      	b.n	8002cfa <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cfc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002d00:	0052      	lsls	r2, r2, #1
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f88d 2003 	strb.w	r2, [sp, #3]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	e7e2      	b.n	8002cd4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d0e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d10:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002d14:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d16:	9b01      	ldr	r3, [sp, #4]
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <xPortStartScheduler+0xf4>)
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <xPortStartScheduler+0x100>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002d26:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002d2e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002d30:	f7ff ff86 	bl	8002c40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <xPortStartScheduler+0x104>)
 8002d36:	2400      	movs	r4, #0
 8002d38:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002d3a:	f7ff fecf 	bl	8002adc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <xPortStartScheduler+0x108>)
 8002d40:	6813      	ldr	r3, [r2, #0]
 8002d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d46:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002d48:	f7ff feb4 	bl	8002ab4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002d4c:	f001 f82e 	bl	8003dac <vTaskSwitchContext>
	prvTaskExitError();
 8002d50:	f7ff fe90 	bl	8002a74 <prvTaskExitError>
}
 8002d54:	4620      	mov	r0, r4
 8002d56:	b002      	add	sp, #8
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00
 8002d60:	410fc271 	.word	0x410fc271
 8002d64:	410fc270 	.word	0x410fc270
 8002d68:	e000e400 	.word	0xe000e400
 8002d6c:	200006e8 	.word	0x200006e8
 8002d70:	200006ec 	.word	0x200006ec
 8002d74:	e000ed20 	.word	0xe000ed20
 8002d78:	20000008 	.word	0x20000008
 8002d7c:	e000ef34 	.word	0xe000ef34

08002d80 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002d80:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d90e      	bls.n	8002da6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002d88:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <vPortValidateInterruptPriority+0x4c>)
 8002d8a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d8c:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <vPortValidateInterruptPriority+0x50>)
 8002d8e:	7812      	ldrb	r2, [r2, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d908      	bls.n	8002da6 <vPortValidateInterruptPriority+0x26>
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	e7fe      	b.n	8002da4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <vPortValidateInterruptPriority+0x54>)
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <vPortValidateInterruptPriority+0x58>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d908      	bls.n	8002dc8 <vPortValidateInterruptPriority+0x48>
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	e7fe      	b.n	8002dc6 <vPortValidateInterruptPriority+0x46>
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000e3f0 	.word	0xe000e3f0
 8002dd0:	200006e8 	.word	0x200006e8
 8002dd4:	e000ed0c 	.word	0xe000ed0c
 8002dd8:	200006ec 	.word	0x200006ec

08002ddc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002ddc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <prvInsertBlockIntoFreeList+0x40>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4282      	cmp	r2, r0
 8002de4:	d318      	bcc.n	8002e18 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002de6:	685c      	ldr	r4, [r3, #4]
 8002de8:	1919      	adds	r1, r3, r4
 8002dea:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002dec:	bf01      	itttt	eq
 8002dee:	6841      	ldreq	r1, [r0, #4]
 8002df0:	4618      	moveq	r0, r3
 8002df2:	1909      	addeq	r1, r1, r4
 8002df4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002df6:	6844      	ldr	r4, [r0, #4]
 8002df8:	1901      	adds	r1, r0, r4
 8002dfa:	428a      	cmp	r2, r1
 8002dfc:	d107      	bne.n	8002e0e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002dfe:	4908      	ldr	r1, [pc, #32]	; (8002e20 <prvInsertBlockIntoFreeList+0x44>)
 8002e00:	6809      	ldr	r1, [r1, #0]
 8002e02:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e04:	bf1f      	itttt	ne
 8002e06:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e08:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e0a:	1909      	addne	r1, r1, r4
 8002e0c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e0e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e10:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e12:	bf18      	it	ne
 8002e14:	6018      	strne	r0, [r3, #0]
 8002e16:	bd10      	pop	{r4, pc}
 8002e18:	4613      	mov	r3, r2
 8002e1a:	e7e1      	b.n	8002de0 <prvInsertBlockIntoFreeList+0x4>
 8002e1c:	20004300 	.word	0x20004300
 8002e20:	200006f0 	.word	0x200006f0

08002e24 <pvPortMalloc>:
{
 8002e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e28:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002e2a:	f000 fe61 	bl	8003af0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002e2e:	493e      	ldr	r1, [pc, #248]	; (8002f28 <pvPortMalloc+0x104>)
 8002e30:	4d3e      	ldr	r5, [pc, #248]	; (8002f2c <pvPortMalloc+0x108>)
 8002e32:	680b      	ldr	r3, [r1, #0]
 8002e34:	bb0b      	cbnz	r3, 8002e7a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002e36:	4a3e      	ldr	r2, [pc, #248]	; (8002f30 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e38:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e3a:	bf1f      	itttt	ne
 8002e3c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e3e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e42:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002e46:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e48:	bf14      	ite	ne
 8002e4a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e4c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e50:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002e52:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e54:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e58:	4e36      	ldr	r6, [pc, #216]	; (8002f34 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002e5a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e60:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002e62:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002e64:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e66:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e68:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e6a:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e6c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e6e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e70:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <pvPortMalloc+0x118>)
 8002e72:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e78:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e7a:	682f      	ldr	r7, [r5, #0]
 8002e7c:	4227      	tst	r7, r4
 8002e7e:	d116      	bne.n	8002eae <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002e80:	2c00      	cmp	r4, #0
 8002e82:	d041      	beq.n	8002f08 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002e84:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e88:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e8a:	bf1c      	itt	ne
 8002e8c:	f023 0307 	bicne.w	r3, r3, #7
 8002e90:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e92:	b163      	cbz	r3, 8002eae <pvPortMalloc+0x8a>
 8002e94:	4a29      	ldr	r2, [pc, #164]	; (8002f3c <pvPortMalloc+0x118>)
 8002e96:	6816      	ldr	r6, [r2, #0]
 8002e98:	42b3      	cmp	r3, r6
 8002e9a:	4690      	mov	r8, r2
 8002e9c:	d807      	bhi.n	8002eae <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002e9e:	4a25      	ldr	r2, [pc, #148]	; (8002f34 <pvPortMalloc+0x110>)
 8002ea0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ea2:	6868      	ldr	r0, [r5, #4]
 8002ea4:	4283      	cmp	r3, r0
 8002ea6:	d804      	bhi.n	8002eb2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002ea8:	6809      	ldr	r1, [r1, #0]
 8002eaa:	428d      	cmp	r5, r1
 8002eac:	d107      	bne.n	8002ebe <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002eae:	2400      	movs	r4, #0
 8002eb0:	e02a      	b.n	8002f08 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002eb2:	682c      	ldr	r4, [r5, #0]
 8002eb4:	2c00      	cmp	r4, #0
 8002eb6:	d0f7      	beq.n	8002ea8 <pvPortMalloc+0x84>
 8002eb8:	462a      	mov	r2, r5
 8002eba:	4625      	mov	r5, r4
 8002ebc:	e7f1      	b.n	8002ea2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ebe:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ec0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ec2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ec4:	1ac2      	subs	r2, r0, r3
 8002ec6:	2a10      	cmp	r2, #16
 8002ec8:	d90f      	bls.n	8002eea <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002eca:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ecc:	0741      	lsls	r1, r0, #29
 8002ece:	d008      	beq.n	8002ee2 <pvPortMalloc+0xbe>
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	e7fe      	b.n	8002ee0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ee2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ee4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ee6:	f7ff ff79 	bl	8002ddc <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002eea:	4913      	ldr	r1, [pc, #76]	; (8002f38 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002eec:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002eee:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ef0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ef2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ef4:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002ef6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002efa:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002efe:	bf38      	it	cc
 8002f00:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f02:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f04:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f06:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002f08:	f000 fe90 	bl	8003c2c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f0c:	0763      	lsls	r3, r4, #29
 8002f0e:	d008      	beq.n	8002f22 <pvPortMalloc+0xfe>
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	e7fe      	b.n	8002f20 <pvPortMalloc+0xfc>
}
 8002f22:	4620      	mov	r0, r4
 8002f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f28:	200006f0 	.word	0x200006f0
 8002f2c:	200042f4 	.word	0x200042f4
 8002f30:	200006f4 	.word	0x200006f4
 8002f34:	20004300 	.word	0x20004300
 8002f38:	200042fc 	.word	0x200042fc
 8002f3c:	200042f8 	.word	0x200042f8

08002f40 <vPortFree>:
{
 8002f40:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002f42:	4604      	mov	r4, r0
 8002f44:	b370      	cbz	r0, 8002fa4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <vPortFree+0x68>)
 8002f48:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	4213      	tst	r3, r2
 8002f50:	d108      	bne.n	8002f64 <vPortFree+0x24>
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	e7fe      	b.n	8002f62 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f64:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002f68:	b141      	cbz	r1, 8002f7c <vPortFree+0x3c>
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	e7fe      	b.n	8002f7a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f7c:	ea23 0302 	bic.w	r3, r3, r2
 8002f80:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002f84:	f000 fdb4 	bl	8003af0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f88:	4a08      	ldr	r2, [pc, #32]	; (8002fac <vPortFree+0x6c>)
 8002f8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002f8e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f90:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f94:	440b      	add	r3, r1
 8002f96:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f98:	f7ff ff20 	bl	8002ddc <prvInsertBlockIntoFreeList>
}
 8002f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002fa0:	f000 be44 	b.w	8003c2c <xTaskResumeAll>
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200042f4 	.word	0x200042f4
 8002fac:	200042f8 	.word	0x200042f8

08002fb0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fb4:	f7ff fdc6 	bl	8002b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fb8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002fba:	f7ff fde5 	bl	8002b88 <vPortExitCritical>

	return xReturn;
}
 8002fbe:	fab4 f084 	clz	r0, r4
 8002fc2:	0940      	lsrs	r0, r0, #5
 8002fc4:	bd10      	pop	{r4, pc}

08002fc6 <prvCopyDataToQueue>:
{
 8002fc6:	b570      	push	{r4, r5, r6, lr}
 8002fc8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fca:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fcc:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002fce:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fd0:	b942      	cbnz	r2, 8002fe4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fd2:	6805      	ldr	r5, [r0, #0]
 8002fd4:	b99d      	cbnz	r5, 8002ffe <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002fd6:	6840      	ldr	r0, [r0, #4]
 8002fd8:	f001 f816 	bl	8004008 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002fdc:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fde:	3601      	adds	r6, #1
 8002fe0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002fe4:	b96d      	cbnz	r5, 8003002 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002fe6:	6880      	ldr	r0, [r0, #8]
 8002fe8:	f001 ff7a 	bl	8004ee0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002fec:	68a3      	ldr	r3, [r4, #8]
 8002fee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ff0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ff2:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ff4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d301      	bcc.n	8002ffe <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002ffe:	2000      	movs	r0, #0
 8003000:	e7ed      	b.n	8002fde <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003002:	68c0      	ldr	r0, [r0, #12]
 8003004:	f001 ff6c 	bl	8004ee0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800300a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800300c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800300e:	425b      	negs	r3, r3
 8003010:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003012:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003014:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003016:	bf3e      	ittt	cc
 8003018:	6862      	ldrcc	r2, [r4, #4]
 800301a:	189b      	addcc	r3, r3, r2
 800301c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800301e:	2d02      	cmp	r5, #2
 8003020:	d1ed      	bne.n	8002ffe <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003022:	b10e      	cbz	r6, 8003028 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003024:	3e01      	subs	r6, #1
 8003026:	e7ea      	b.n	8002ffe <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003028:	4630      	mov	r0, r6
 800302a:	e7d8      	b.n	8002fde <prvCopyDataToQueue+0x18>

0800302c <prvCopyDataFromQueue>:
{
 800302c:	4603      	mov	r3, r0
 800302e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003032:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003034:	b162      	cbz	r2, 8003050 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003036:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003038:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800303a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800303c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800303e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003040:	bf24      	itt	cs
 8003042:	6819      	ldrcs	r1, [r3, #0]
 8003044:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003046:	68d9      	ldr	r1, [r3, #12]
}
 8003048:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800304c:	f001 bf48 	b.w	8004ee0 <memcpy>
}
 8003050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003054:	4770      	bx	lr

08003056 <prvUnlockQueue>:
{
 8003056:	b570      	push	{r4, r5, r6, lr}
 8003058:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800305a:	f7ff fd73 	bl	8002b44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800305e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003066:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003068:	2d00      	cmp	r5, #0
 800306a:	dc14      	bgt.n	8003096 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800306c:	23ff      	movs	r3, #255	; 0xff
 800306e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003072:	f7ff fd89 	bl	8002b88 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003076:	f7ff fd65 	bl	8002b44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800307a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800307e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8003082:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003084:	2d00      	cmp	r5, #0
 8003086:	dc12      	bgt.n	80030ae <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003088:	23ff      	movs	r3, #255	; 0xff
 800308a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800308e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003092:	f7ff bd79 	b.w	8002b88 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0e7      	beq.n	800306c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800309c:	4630      	mov	r0, r6
 800309e:	f000 fef9 	bl	8003e94 <xTaskRemoveFromEventList>
 80030a2:	b108      	cbz	r0, 80030a8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80030a4:	f000 ff9a 	bl	8003fdc <vTaskMissedYield>
 80030a8:	3d01      	subs	r5, #1
 80030aa:	b26d      	sxtb	r5, r5
 80030ac:	e7dc      	b.n	8003068 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ae:	6923      	ldr	r3, [r4, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0e9      	beq.n	8003088 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b4:	4630      	mov	r0, r6
 80030b6:	f000 feed 	bl	8003e94 <xTaskRemoveFromEventList>
 80030ba:	b108      	cbz	r0, 80030c0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80030bc:	f000 ff8e 	bl	8003fdc <vTaskMissedYield>
 80030c0:	3d01      	subs	r5, #1
 80030c2:	b26d      	sxtb	r5, r5
 80030c4:	e7de      	b.n	8003084 <prvUnlockQueue+0x2e>
	...

080030c8 <xQueueGenericReset>:
{
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80030cc:	4604      	mov	r4, r0
 80030ce:	b940      	cbnz	r0, 80030e2 <xQueueGenericReset+0x1a>
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	e7fe      	b.n	80030e0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80030e2:	f7ff fd2f 	bl	8002b44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80030e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80030e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030ea:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030ec:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80030ee:	4343      	muls	r3, r0
 80030f0:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80030f2:	1a1b      	subs	r3, r3, r0
 80030f4:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80030f6:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80030f8:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030fa:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80030fc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030fe:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8003100:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003108:	b995      	cbnz	r5, 8003130 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	b163      	cbz	r3, 8003128 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800310e:	f104 0010 	add.w	r0, r4, #16
 8003112:	f000 febf 	bl	8003e94 <xTaskRemoveFromEventList>
 8003116:	b138      	cbz	r0, 8003128 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <xQueueGenericReset+0x7c>)
 800311a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003128:	f7ff fd2e 	bl	8002b88 <vPortExitCritical>
}
 800312c:	2001      	movs	r0, #1
 800312e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003130:	f104 0010 	add.w	r0, r4, #16
 8003134:	f7ff fc5c 	bl	80029f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003138:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800313c:	f7ff fc58 	bl	80029f0 <vListInitialise>
 8003140:	e7f2      	b.n	8003128 <xQueueGenericReset+0x60>
 8003142:	bf00      	nop
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <xQueueGenericCreateStatic>:
	{
 8003148:	b513      	push	{r0, r1, r4, lr}
 800314a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800314c:	b940      	cbnz	r0, 8003160 <xQueueGenericCreateStatic+0x18>
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	e7fe      	b.n	800315e <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8003160:	b943      	cbnz	r3, 8003174 <xQueueGenericCreateStatic+0x2c>
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	e7fe      	b.n	8003172 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003174:	b14a      	cbz	r2, 800318a <xQueueGenericCreateStatic+0x42>
 8003176:	b9d9      	cbnz	r1, 80031b0 <xQueueGenericCreateStatic+0x68>
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	e7fe      	b.n	8003188 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800318a:	b189      	cbz	r1, 80031b0 <xQueueGenericCreateStatic+0x68>
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	e7fe      	b.n	800319c <xQueueGenericCreateStatic+0x54>
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	e7fe      	b.n	80031ae <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031b0:	2350      	movs	r3, #80	; 0x50
 80031b2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031b4:	9b01      	ldr	r3, [sp, #4]
 80031b6:	2b50      	cmp	r3, #80	; 0x50
 80031b8:	d1f1      	bne.n	800319e <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031ba:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031bc:	2900      	cmp	r1, #0
 80031be:	bf08      	it	eq
 80031c0:	4622      	moveq	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxLength = uxQueueLength;
 80031c6:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031c8:	6421      	str	r1, [r4, #64]	; 0x40
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031ca:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031cc:	4619      	mov	r1, r3
 80031ce:	4620      	mov	r0, r4
 80031d0:	f7ff ff7a 	bl	80030c8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80031d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80031d8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80031dc:	4620      	mov	r0, r4
 80031de:	b002      	add	sp, #8
 80031e0:	bd10      	pop	{r4, pc}

080031e2 <xQueueGenericCreate>:
	{
 80031e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e4:	460d      	mov	r5, r1
 80031e6:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031e8:	4606      	mov	r6, r0
 80031ea:	b940      	cbnz	r0, 80031fe <xQueueGenericCreate+0x1c>
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	e7fe      	b.n	80031fc <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031fe:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003200:	3050      	adds	r0, #80	; 0x50
 8003202:	f7ff fe0f 	bl	8002e24 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003206:	4604      	mov	r4, r0
 8003208:	b160      	cbz	r0, 8003224 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800320a:	2300      	movs	r3, #0
 800320c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003210:	b955      	cbnz	r5, 8003228 <xQueueGenericCreate+0x46>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003212:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003214:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003216:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003218:	2101      	movs	r1, #1
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff ff54 	bl	80030c8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003220:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8003224:	4620      	mov	r0, r4
 8003226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003228:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800322c:	6003      	str	r3, [r0, #0]
 800322e:	e7f1      	b.n	8003214 <xQueueGenericCreate+0x32>

08003230 <xQueueCreateCountingSemaphoreStatic>:
	{
 8003230:	b513      	push	{r0, r1, r4, lr}
 8003232:	4613      	mov	r3, r2
 8003234:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8003236:	b940      	cbnz	r0, 800324a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	e7fe      	b.n	8003248 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800324a:	4288      	cmp	r0, r1
 800324c:	d208      	bcs.n	8003260 <xQueueCreateCountingSemaphoreStatic+0x30>
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	e7fe      	b.n	800325e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003260:	2202      	movs	r2, #2
 8003262:	9200      	str	r2, [sp, #0]
 8003264:	2200      	movs	r2, #0
 8003266:	4611      	mov	r1, r2
 8003268:	f7ff ff6e 	bl	8003148 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800326c:	b100      	cbz	r0, 8003270 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800326e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8003270:	b002      	add	sp, #8
 8003272:	bd10      	pop	{r4, pc}

08003274 <xQueueCreateCountingSemaphore>:
	{
 8003274:	b510      	push	{r4, lr}
 8003276:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8003278:	b940      	cbnz	r0, 800328c <xQueueCreateCountingSemaphore+0x18>
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	e7fe      	b.n	800328a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800328c:	4288      	cmp	r0, r1
 800328e:	d208      	bcs.n	80032a2 <xQueueCreateCountingSemaphore+0x2e>
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	e7fe      	b.n	80032a0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80032a2:	2202      	movs	r2, #2
 80032a4:	2100      	movs	r1, #0
 80032a6:	f7ff ff9c 	bl	80031e2 <xQueueGenericCreate>
		if( xHandle != NULL )
 80032aa:	b100      	cbz	r0, 80032ae <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80032ac:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <xQueueGenericSend>:
{
 80032b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	4689      	mov	r9, r1
 80032b6:	9201      	str	r2, [sp, #4]
 80032b8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80032ba:	4604      	mov	r4, r0
 80032bc:	b940      	cbnz	r0, 80032d0 <xQueueGenericSend+0x20>
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	e7fe      	b.n	80032ce <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032d0:	2900      	cmp	r1, #0
 80032d2:	f040 8088 	bne.w	80033e6 <xQueueGenericSend+0x136>
 80032d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8084 	beq.w	80033e6 <xQueueGenericSend+0x136>
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	e7fe      	b.n	80032ee <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032f0:	9e01      	ldr	r6, [sp, #4]
 80032f2:	2e00      	cmp	r6, #0
 80032f4:	f000 8082 	beq.w	80033fc <xQueueGenericSend+0x14c>
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	e7fe      	b.n	8003308 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800330a:	9d01      	ldr	r5, [sp, #4]
 800330c:	b91d      	cbnz	r5, 8003316 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800330e:	f7ff fc3b 	bl	8002b88 <vPortExitCritical>
			return errQUEUE_FULL;
 8003312:	2000      	movs	r0, #0
 8003314:	e058      	b.n	80033c8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8003316:	b916      	cbnz	r6, 800331e <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003318:	a802      	add	r0, sp, #8
 800331a:	f000 fe17 	bl	8003f4c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800331e:	f7ff fc33 	bl	8002b88 <vPortExitCritical>
		vTaskSuspendAll();
 8003322:	f000 fbe5 	bl	8003af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003326:	f7ff fc0d 	bl	8002b44 <vPortEnterCritical>
 800332a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800332e:	2bff      	cmp	r3, #255	; 0xff
 8003330:	bf08      	it	eq
 8003332:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003336:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800333a:	2bff      	cmp	r3, #255	; 0xff
 800333c:	bf08      	it	eq
 800333e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8003342:	f7ff fc21 	bl	8002b88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003346:	a901      	add	r1, sp, #4
 8003348:	a802      	add	r0, sp, #8
 800334a:	f000 fe0b 	bl	8003f64 <xTaskCheckForTimeOut>
 800334e:	2800      	cmp	r0, #0
 8003350:	d143      	bne.n	80033da <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003352:	f7ff fbf7 	bl	8002b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003356:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003358:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800335a:	f7ff fc15 	bl	8002b88 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800335e:	42ae      	cmp	r6, r5
 8003360:	d135      	bne.n	80033ce <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003362:	9901      	ldr	r1, [sp, #4]
 8003364:	f104 0010 	add.w	r0, r4, #16
 8003368:	f000 fd5c 	bl	8003e24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800336c:	4620      	mov	r0, r4
 800336e:	f7ff fe72 	bl	8003056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003372:	f000 fc5b 	bl	8003c2c <xTaskResumeAll>
 8003376:	b938      	cbnz	r0, 8003388 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8003378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800337c:	f8ca 3000 	str.w	r3, [sl]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800338a:	f7ff fbdb 	bl	8002b44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800338e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003390:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003392:	429a      	cmp	r2, r3
 8003394:	d301      	bcc.n	800339a <xQueueGenericSend+0xea>
 8003396:	2f02      	cmp	r7, #2
 8003398:	d1b7      	bne.n	800330a <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800339a:	463a      	mov	r2, r7
 800339c:	4649      	mov	r1, r9
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fe11 	bl	8002fc6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033a6:	b11b      	cbz	r3, 80033b0 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033ac:	f000 fd72 	bl	8003e94 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80033b0:	b138      	cbz	r0, 80033c2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <xQueueGenericSend+0x168>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80033c2:	f7ff fbe1 	bl	8002b88 <vPortExitCritical>
				return pdPASS;
 80033c6:	2001      	movs	r0, #1
}
 80033c8:	b004      	add	sp, #16
 80033ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff fe41 	bl	8003056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033d4:	f000 fc2a 	bl	8003c2c <xTaskResumeAll>
 80033d8:	e7d6      	b.n	8003388 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff fe3b 	bl	8003056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033e0:	f000 fc24 	bl	8003c2c <xTaskResumeAll>
 80033e4:	e795      	b.n	8003312 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033e6:	2f02      	cmp	r7, #2
 80033e8:	d102      	bne.n	80033f0 <xQueueGenericSend+0x140>
 80033ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10a      	bne.n	8003406 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f0:	f000 fdfa 	bl	8003fe8 <xTaskGetSchedulerState>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	f43f af7b 	beq.w	80032f0 <xQueueGenericSend+0x40>
 80033fa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80033fc:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003400:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003418 <xQueueGenericSend+0x168>
 8003404:	e7c1      	b.n	800338a <xQueueGenericSend+0xda>
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	e7fe      	b.n	8003416 <xQueueGenericSend+0x166>
 8003418:	e000ed04 	.word	0xe000ed04

0800341c <xQueueGenericSendFromISR>:
{
 800341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003420:	4688      	mov	r8, r1
 8003422:	4691      	mov	r9, r2
 8003424:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003426:	4604      	mov	r4, r0
 8003428:	b940      	cbnz	r0, 800343c <xQueueGenericSendFromISR+0x20>
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	e7fe      	b.n	800343a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800343c:	bb09      	cbnz	r1, 8003482 <xQueueGenericSendFromISR+0x66>
 800343e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003440:	b1fb      	cbz	r3, 8003482 <xQueueGenericSendFromISR+0x66>
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	e7fe      	b.n	8003452 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003454:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003458:	f000 fd1c 	bl	8003e94 <xTaskRemoveFromEventList>
 800345c:	2800      	cmp	r0, #0
 800345e:	d034      	beq.n	80034ca <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8003460:	f1b9 0f00 	cmp.w	r9, #0
 8003464:	d031      	beq.n	80034ca <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003466:	2001      	movs	r0, #1
 8003468:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 800346c:	f386 8811 	msr	BASEPRI, r6
}
 8003470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003474:	3501      	adds	r5, #1
 8003476:	b26d      	sxtb	r5, r5
 8003478:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800347c:	e025      	b.n	80034ca <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800347e:	2000      	movs	r0, #0
 8003480:	e7f4      	b.n	800346c <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003482:	2f02      	cmp	r7, #2
 8003484:	d102      	bne.n	800348c <xQueueGenericSendFromISR+0x70>
 8003486:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d120      	bne.n	80034ce <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800348c:	f7ff fc78 	bl	8002d80 <vPortValidateInterruptPriority>
	__asm volatile
 8003490:	f3ef 8611 	mrs	r6, BASEPRI
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d301      	bcc.n	80034b0 <xQueueGenericSendFromISR+0x94>
 80034ac:	2f02      	cmp	r7, #2
 80034ae:	d1e6      	bne.n	800347e <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 80034b0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034b4:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80034b6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034b8:	4641      	mov	r1, r8
 80034ba:	4620      	mov	r0, r4
 80034bc:	f7ff fd83 	bl	8002fc6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80034c0:	1c6b      	adds	r3, r5, #1
 80034c2:	d1d7      	bne.n	8003474 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1c4      	bne.n	8003454 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80034ca:	2001      	movs	r0, #1
 80034cc:	e7ce      	b.n	800346c <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	e7fe      	b.n	80034de <xQueueGenericSendFromISR+0xc2>

080034e0 <xQueueReceive>:
{
 80034e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034e4:	b085      	sub	sp, #20
 80034e6:	4688      	mov	r8, r1
 80034e8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80034ea:	4604      	mov	r4, r0
 80034ec:	b940      	cbnz	r0, 8003500 <xQueueReceive+0x20>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	e7fe      	b.n	80034fe <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003500:	2900      	cmp	r1, #0
 8003502:	f040 8086 	bne.w	8003612 <xQueueReceive+0x132>
 8003506:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8082 	beq.w	8003612 <xQueueReceive+0x132>
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	e7fe      	b.n	800351e <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003520:	9e01      	ldr	r6, [sp, #4]
 8003522:	2e00      	cmp	r6, #0
 8003524:	d07a      	beq.n	800361c <xQueueReceive+0x13c>
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	e7fe      	b.n	8003536 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003538:	9d01      	ldr	r5, [sp, #4]
 800353a:	b91d      	cbnz	r5, 8003544 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 800353c:	f7ff fb24 	bl	8002b88 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003540:	2000      	movs	r0, #0
 8003542:	e052      	b.n	80035ea <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8003544:	b916      	cbnz	r6, 800354c <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003546:	a802      	add	r0, sp, #8
 8003548:	f000 fd00 	bl	8003f4c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800354c:	f7ff fb1c 	bl	8002b88 <vPortExitCritical>
		vTaskSuspendAll();
 8003550:	f000 face 	bl	8003af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003554:	f7ff faf6 	bl	8002b44 <vPortEnterCritical>
 8003558:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800355c:	2bff      	cmp	r3, #255	; 0xff
 800355e:	bf08      	it	eq
 8003560:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003564:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003568:	2bff      	cmp	r3, #255	; 0xff
 800356a:	bf08      	it	eq
 800356c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8003570:	f7ff fb0a 	bl	8002b88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003574:	a901      	add	r1, sp, #4
 8003576:	a802      	add	r0, sp, #8
 8003578:	f000 fcf4 	bl	8003f64 <xTaskCheckForTimeOut>
 800357c:	2800      	cmp	r0, #0
 800357e:	d13d      	bne.n	80035fc <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003580:	4620      	mov	r0, r4
 8003582:	f7ff fd15 	bl	8002fb0 <prvIsQueueEmpty>
 8003586:	b398      	cbz	r0, 80035f0 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003588:	9901      	ldr	r1, [sp, #4]
 800358a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800358e:	f000 fc49 	bl	8003e24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003592:	4620      	mov	r0, r4
 8003594:	f7ff fd5f 	bl	8003056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003598:	f000 fb48 	bl	8003c2c <xTaskResumeAll>
 800359c:	b938      	cbnz	r0, 80035ae <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 800359e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035a2:	f8c9 3000 	str.w	r3, [r9]
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80035b0:	f7ff fac8 	bl	8002b44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035b6:	2d00      	cmp	r5, #0
 80035b8:	d0be      	beq.n	8003538 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035ba:	4641      	mov	r1, r8
 80035bc:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035be:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035c0:	f7ff fd34 	bl	800302c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035c4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c6:	6923      	ldr	r3, [r4, #16]
 80035c8:	b163      	cbz	r3, 80035e4 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ca:	f104 0010 	add.w	r0, r4, #16
 80035ce:	f000 fc61 	bl	8003e94 <xTaskRemoveFromEventList>
 80035d2:	b138      	cbz	r0, 80035e4 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <xQueueReceive+0x144>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80035e4:	f7ff fad0 	bl	8002b88 <vPortExitCritical>
				return pdPASS;
 80035e8:	2001      	movs	r0, #1
}
 80035ea:	b005      	add	sp, #20
 80035ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7ff fd30 	bl	8003056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035f6:	f000 fb19 	bl	8003c2c <xTaskResumeAll>
 80035fa:	e7d8      	b.n	80035ae <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 80035fc:	4620      	mov	r0, r4
 80035fe:	f7ff fd2a 	bl	8003056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003602:	f000 fb13 	bl	8003c2c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003606:	4620      	mov	r0, r4
 8003608:	f7ff fcd2 	bl	8002fb0 <prvIsQueueEmpty>
 800360c:	2800      	cmp	r0, #0
 800360e:	d0ce      	beq.n	80035ae <xQueueReceive+0xce>
 8003610:	e796      	b.n	8003540 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003612:	f000 fce9 	bl	8003fe8 <xTaskGetSchedulerState>
 8003616:	2800      	cmp	r0, #0
 8003618:	d082      	beq.n	8003520 <xQueueReceive+0x40>
 800361a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800361c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800361e:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8003624 <xQueueReceive+0x144>
 8003622:	e7c5      	b.n	80035b0 <xQueueReceive+0xd0>
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003628:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800362c:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800362e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003632:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8003636:	b91d      	cbnz	r5, 8003640 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003638:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800363c:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800363e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003640:	3301      	adds	r3, #1
 8003642:	2b08      	cmp	r3, #8
 8003644:	d1f3      	bne.n	800362e <vQueueAddToRegistry+0x6>
 8003646:	bd30      	pop	{r4, r5, pc}
 8003648:	20004938 	.word	0x20004938

0800364c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800364c:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003650:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003652:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8003656:	684c      	ldr	r4, [r1, #4]
 8003658:	4284      	cmp	r4, r0
 800365a:	d104      	bne.n	8003666 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800365c:	2000      	movs	r0, #0
 800365e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003662:	6048      	str	r0, [r1, #4]
				break;
 8003664:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003666:	3301      	adds	r3, #1
 8003668:	2b08      	cmp	r3, #8
 800366a:	d1f2      	bne.n	8003652 <vQueueUnregisterQueue+0x6>
 800366c:	bd10      	pop	{r4, pc}
 800366e:	bf00      	nop
 8003670:	20004938 	.word	0x20004938

08003674 <vQueueDelete>:
{
 8003674:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8003676:	4604      	mov	r4, r0
 8003678:	b940      	cbnz	r0, 800368c <vQueueDelete+0x18>
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	e7fe      	b.n	800368a <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800368c:	f7ff ffde 	bl	800364c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003690:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003694:	b923      	cbnz	r3, 80036a0 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8003696:	4620      	mov	r0, r4
}
 8003698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800369c:	f7ff bc50 	b.w	8002f40 <vPortFree>
 80036a0:	bd10      	pop	{r4, pc}

080036a2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036a2:	b570      	push	{r4, r5, r6, lr}
 80036a4:	4604      	mov	r4, r0
 80036a6:	460d      	mov	r5, r1
 80036a8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036aa:	f7ff fa4b 	bl	8002b44 <vPortEnterCritical>
 80036ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80036b2:	2bff      	cmp	r3, #255	; 0xff
 80036b4:	bf04      	itt	eq
 80036b6:	2300      	moveq	r3, #0
 80036b8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80036bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80036c0:	2bff      	cmp	r3, #255	; 0xff
 80036c2:	bf04      	itt	eq
 80036c4:	2300      	moveq	r3, #0
 80036c6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80036ca:	f7ff fa5d 	bl	8002b88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036d0:	b92b      	cbnz	r3, 80036de <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036d2:	4632      	mov	r2, r6
 80036d4:	4629      	mov	r1, r5
 80036d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036da:	f000 fbbd 	bl	8003e58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036de:	4620      	mov	r0, r4
	}
 80036e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80036e4:	f7ff bcb7 	b.w	8003056 <prvUnlockQueue>

080036e8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036ee:	f7ff fa29 	bl	8002b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036f2:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 80036f4:	4d2e      	ldr	r5, [pc, #184]	; (80037b0 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4f2e      	ldr	r7, [pc, #184]	; (80037b4 <prvAddNewTaskToReadyList+0xcc>)
 80036fa:	3201      	adds	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80036fe:	682e      	ldr	r6, [r5, #0]
 8003700:	2e00      	cmp	r6, #0
 8003702:	d147      	bne.n	8003794 <prvAddNewTaskToReadyList+0xac>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003704:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d11d      	bne.n	8003748 <prvAddNewTaskToReadyList+0x60>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800370c:	19b8      	adds	r0, r7, r6
 800370e:	3614      	adds	r6, #20
 8003710:	f7ff f96e 	bl	80029f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003714:	f5b6 6f8c 	cmp.w	r6, #1120	; 0x460
 8003718:	d1f8      	bne.n	800370c <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800371a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80037e0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800371e:	4e26      	ldr	r6, [pc, #152]	; (80037b8 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8003720:	4640      	mov	r0, r8
 8003722:	f7ff f965 	bl	80029f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003726:	4630      	mov	r0, r6
 8003728:	f7ff f962 	bl	80029f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800372c:	4823      	ldr	r0, [pc, #140]	; (80037bc <prvAddNewTaskToReadyList+0xd4>)
 800372e:	f7ff f95f 	bl	80029f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003732:	4823      	ldr	r0, [pc, #140]	; (80037c0 <prvAddNewTaskToReadyList+0xd8>)
 8003734:	f7ff f95c 	bl	80029f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003738:	4822      	ldr	r0, [pc, #136]	; (80037c4 <prvAddNewTaskToReadyList+0xdc>)
 800373a:	f7ff f959 	bl	80029f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800373e:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <prvAddNewTaskToReadyList+0xe0>)
 8003740:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003744:	4b21      	ldr	r3, [pc, #132]	; (80037cc <prvAddNewTaskToReadyList+0xe4>)
 8003746:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8003748:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <prvAddNewTaskToReadyList+0xe8>)
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003752:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003754:	6811      	ldr	r1, [r2, #0]
 8003756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003758:	2014      	movs	r0, #20
 800375a:	428b      	cmp	r3, r1
 800375c:	fb00 7003 	mla	r0, r0, r3, r7
 8003760:	f104 0104 	add.w	r1, r4, #4
 8003764:	bf88      	it	hi
 8003766:	6013      	strhi	r3, [r2, #0]
 8003768:	f7ff f950 	bl	8002a0c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800376c:	f7ff fa0c 	bl	8002b88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <prvAddNewTaskToReadyList+0xf0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b163      	cbz	r3, 8003790 <prvAddNewTaskToReadyList+0xa8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003776:	682b      	ldr	r3, [r5, #0]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800377c:	429a      	cmp	r2, r3
 800377e:	d207      	bcs.n	8003790 <prvAddNewTaskToReadyList+0xa8>
			taskYIELD_IF_USING_PREEMPTION();
 8003780:	4b16      	ldr	r3, [pc, #88]	; (80037dc <prvAddNewTaskToReadyList+0xf4>)
 8003782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <prvAddNewTaskToReadyList+0xf0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1d5      	bne.n	8003748 <prvAddNewTaskToReadyList+0x60>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037a2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80037a4:	bf98      	it	ls
 80037a6:	602c      	strls	r4, [r5, #0]
 80037a8:	e7ce      	b.n	8003748 <prvAddNewTaskToReadyList+0x60>
 80037aa:	bf00      	nop
 80037ac:	20004774 	.word	0x20004774
 80037b0:	20004308 	.word	0x20004308
 80037b4:	20004314 	.word	0x20004314
 80037b8:	200047a0 	.word	0x200047a0
 80037bc:	200047bc 	.word	0x200047bc
 80037c0:	200047e8 	.word	0x200047e8
 80037c4:	200047d4 	.word	0x200047d4
 80037c8:	2000430c 	.word	0x2000430c
 80037cc:	20004310 	.word	0x20004310
 80037d0:	20004784 	.word	0x20004784
 80037d4:	20004788 	.word	0x20004788
 80037d8:	200047d0 	.word	0x200047d0
 80037dc:	e000ed04 	.word	0xe000ed04
 80037e0:	2000478c 	.word	0x2000478c

080037e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e4:	4a06      	ldr	r2, [pc, #24]	; (8003800 <prvResetNextTaskUnblockTime+0x1c>)
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <prvResetNextTaskUnblockTime+0x20>)
 80037ec:	b919      	cbnz	r1, 80037f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037ee:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037fa:	68d2      	ldr	r2, [r2, #12]
 80037fc:	6852      	ldr	r2, [r2, #4]
 80037fe:	e7f8      	b.n	80037f2 <prvResetNextTaskUnblockTime+0xe>
 8003800:	2000430c 	.word	0x2000430c
 8003804:	200047b4 	.word	0x200047b4

08003808 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800380e:	9f09      	ldr	r7, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003810:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003812:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003814:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003816:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003818:	21a5      	movs	r1, #165	; 0xa5
 800381a:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800381c:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800381e:	f001 fb6a 	bl	8004ef6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003822:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003824:	3e04      	subs	r6, #4
 8003826:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003828:	f026 0607 	bic.w	r6, r6, #7
 800382c:	1e6b      	subs	r3, r5, #1
 800382e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003832:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003834:	7859      	ldrb	r1, [r3, #1]
 8003836:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800383a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800383e:	b109      	cbz	r1, 8003844 <prvInitialiseNewTask.isra.2+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003840:	42ab      	cmp	r3, r5
 8003842:	d1f7      	bne.n	8003834 <prvInitialiseNewTask.isra.2+0x2c>
 8003844:	9d08      	ldr	r5, [sp, #32]
 8003846:	2d37      	cmp	r5, #55	; 0x37
 8003848:	bf28      	it	cs
 800384a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800384c:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8003850:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003852:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003854:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003856:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800385a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800385e:	f7ff f8d2 	bl	8002a06 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003862:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003866:	f104 0018 	add.w	r0, r4, #24
 800386a:	f7ff f8cc 	bl	8002a06 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800386e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003872:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003874:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003876:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003878:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800387c:	464a      	mov	r2, r9
 800387e:	4641      	mov	r1, r8
 8003880:	4630      	mov	r0, r6
 8003882:	f7ff f935 	bl	8002af0 <pxPortInitialiseStack>
 8003886:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003888:	b107      	cbz	r7, 800388c <prvInitialiseNewTask.isra.2+0x84>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800388a:	603c      	str	r4, [r7, #0]
 800388c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003890 <prvDeleteTCB>:
	{
 8003890:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003892:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8003896:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003898:	b93b      	cbnz	r3, 80038aa <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800389a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800389c:	f7ff fb50 	bl	8002f40 <vPortFree>
				vPortFree( pxTCB );
 80038a0:	4620      	mov	r0, r4
	}
 80038a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80038a6:	f7ff bb4b 	b.w	8002f40 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d0f9      	beq.n	80038a2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d008      	beq.n	80038c4 <prvDeleteTCB+0x34>
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	e7fe      	b.n	80038c2 <prvDeleteTCB+0x32>
 80038c4:	bd10      	pop	{r4, pc}
	...

080038c8 <prvIdleTask>:
{
 80038c8:	b580      	push	{r7, lr}
				taskYIELD();
 80038ca:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003928 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80038ce:	4f12      	ldr	r7, [pc, #72]	; (8003918 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038d0:	4c12      	ldr	r4, [pc, #72]	; (800391c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80038d2:	4d13      	ldr	r5, [pc, #76]	; (8003920 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	b963      	cbnz	r3, 80038f2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <prvIdleTask+0x5c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d9f8      	bls.n	80038d2 <prvIdleTask+0xa>
				taskYIELD();
 80038e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038e4:	f8c8 3000 	str.w	r3, [r8]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	e7ee      	b.n	80038d0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80038f2:	f7ff f927 	bl	8002b44 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fa:	1d30      	adds	r0, r6, #4
 80038fc:	f7ff f8a9 	bl	8002a52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	3b01      	subs	r3, #1
 8003904:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	3b01      	subs	r3, #1
 800390a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800390c:	f7ff f93c 	bl	8002b88 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003910:	4630      	mov	r0, r6
 8003912:	f7ff ffbd 	bl	8003890 <prvDeleteTCB>
 8003916:	e7dd      	b.n	80038d4 <prvIdleTask+0xc>
 8003918:	200047e8 	.word	0x200047e8
 800391c:	20004778 	.word	0x20004778
 8003920:	20004774 	.word	0x20004774
 8003924:	20004314 	.word	0x20004314
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003930:	4d16      	ldr	r5, [pc, #88]	; (800398c <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8003932:	681e      	ldr	r6, [r3, #0]
{
 8003934:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003936:	6828      	ldr	r0, [r5, #0]
 8003938:	3004      	adds	r0, #4
{
 800393a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800393c:	f7ff f889 	bl	8002a52 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003940:	1c63      	adds	r3, r4, #1
 8003942:	462b      	mov	r3, r5
 8003944:	d107      	bne.n	8003956 <prvAddCurrentTaskToDelayedList+0x2a>
 8003946:	b137      	cbz	r7, 8003956 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003948:	6829      	ldr	r1, [r5, #0]
 800394a:	4811      	ldr	r0, [pc, #68]	; (8003990 <prvAddCurrentTaskToDelayedList+0x64>)
 800394c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800394e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003952:	f7ff b85b 	b.w	8002a0c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003956:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003958:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800395a:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800395c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800395e:	d907      	bls.n	8003970 <prvAddCurrentTaskToDelayedList+0x44>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <prvAddCurrentTaskToDelayedList+0x68>)
 8003962:	6810      	ldr	r0, [r2, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
}
 8003966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396a:	3104      	adds	r1, #4
 800396c:	f7ff b85a 	b.w	8002a24 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003970:	4a09      	ldr	r2, [pc, #36]	; (8003998 <prvAddCurrentTaskToDelayedList+0x6c>)
 8003972:	6810      	ldr	r0, [r2, #0]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	3104      	adds	r1, #4
 8003978:	f7ff f854 	bl	8002a24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <prvAddCurrentTaskToDelayedList+0x70>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003982:	bf38      	it	cc
 8003984:	601c      	strcc	r4, [r3, #0]
 8003986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003988:	200047fc 	.word	0x200047fc
 800398c:	20004308 	.word	0x20004308
 8003990:	200047d4 	.word	0x200047d4
 8003994:	20004310 	.word	0x20004310
 8003998:	2000430c 	.word	0x2000430c
 800399c:	200047b4 	.word	0x200047b4

080039a0 <xTaskCreateStatic>:
	{
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80039a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80039a8:	b945      	cbnz	r5, 80039bc <xTaskCreateStatic+0x1c>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	e7fe      	b.n	80039ba <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80039bc:	b944      	cbnz	r4, 80039d0 <xTaskCreateStatic+0x30>
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	e7fe      	b.n	80039ce <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80039d0:	265c      	movs	r6, #92	; 0x5c
 80039d2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039d4:	9e04      	ldr	r6, [sp, #16]
 80039d6:	2e5c      	cmp	r6, #92	; 0x5c
 80039d8:	d008      	beq.n	80039ec <xTaskCreateStatic+0x4c>
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	e7fe      	b.n	80039ea <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039ec:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ee:	2502      	movs	r5, #2
 80039f0:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039f4:	ad05      	add	r5, sp, #20
 80039f6:	9501      	str	r5, [sp, #4]
 80039f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80039fa:	9402      	str	r4, [sp, #8]
 80039fc:	9500      	str	r5, [sp, #0]
 80039fe:	f7ff ff03 	bl	8003808 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff fe70 	bl	80036e8 <prvAddNewTaskToReadyList>
	}
 8003a08:	9805      	ldr	r0, [sp, #20]
 8003a0a:	b006      	add	sp, #24
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}

08003a0e <xTaskCreate>:
	{
 8003a0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a12:	4607      	mov	r7, r0
 8003a14:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a16:	0090      	lsls	r0, r2, #2
	{
 8003a18:	4688      	mov	r8, r1
 8003a1a:	4616      	mov	r6, r2
 8003a1c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1e:	f7ff fa01 	bl	8002e24 <pvPortMalloc>
			if( pxStack != NULL )
 8003a22:	4605      	mov	r5, r0
 8003a24:	b1e8      	cbz	r0, 8003a62 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a26:	205c      	movs	r0, #92	; 0x5c
 8003a28:	f7ff f9fc 	bl	8002e24 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	b1a8      	cbz	r0, 8003a5c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003a38:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a3e:	9002      	str	r0, [sp, #8]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4632      	mov	r2, r6
 8003a44:	464b      	mov	r3, r9
 8003a46:	4641      	mov	r1, r8
 8003a48:	4638      	mov	r0, r7
 8003a4a:	f7ff fedd 	bl	8003808 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f7ff fe4a 	bl	80036e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a54:	2001      	movs	r0, #1
	}
 8003a56:	b005      	add	sp, #20
 8003a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	f7ff fa6f 	bl	8002f40 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003a66:	e7f6      	b.n	8003a56 <xTaskCreate+0x48>

08003a68 <vTaskStartScheduler>:
{
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a6c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a6e:	aa07      	add	r2, sp, #28
 8003a70:	a906      	add	r1, sp, #24
 8003a72:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a74:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a76:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a78:	f7fe ffa2 	bl	80029c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a7c:	9b05      	ldr	r3, [sp, #20]
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	9b06      	ldr	r3, [sp, #24]
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	9400      	str	r4, [sp, #0]
 8003a86:	4623      	mov	r3, r4
 8003a88:	9a07      	ldr	r2, [sp, #28]
 8003a8a:	4914      	ldr	r1, [pc, #80]	; (8003adc <vTaskStartScheduler+0x74>)
 8003a8c:	4814      	ldr	r0, [pc, #80]	; (8003ae0 <vTaskStartScheduler+0x78>)
 8003a8e:	f7ff ff87 	bl	80039a0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003a92:	b9a0      	cbnz	r0, 8003abe <vTaskStartScheduler+0x56>
}
 8003a94:	b008      	add	sp, #32
 8003a96:	bd10      	pop	{r4, pc}
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <vTaskStartScheduler+0x7c>)
 8003aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003aae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <vTaskStartScheduler+0x80>)
 8003ab2:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <vTaskStartScheduler+0x84>)
 8003ab6:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003ab8:	f7ff f8dc 	bl	8002c74 <xPortStartScheduler>
 8003abc:	e7ea      	b.n	8003a94 <vTaskStartScheduler+0x2c>
			xReturn = xTimerCreateTimerTask();
 8003abe:	f000 fb37 	bl	8004130 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003ac2:	2801      	cmp	r0, #1
 8003ac4:	d0e8      	beq.n	8003a98 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d1e4      	bne.n	8003a94 <vTaskStartScheduler+0x2c>
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	e7fe      	b.n	8003ada <vTaskStartScheduler+0x72>
 8003adc:	08004f28 	.word	0x08004f28
 8003ae0:	080038c9 	.word	0x080038c9
 8003ae4:	200047b4 	.word	0x200047b4
 8003ae8:	200047d0 	.word	0x200047d0
 8003aec:	200047fc 	.word	0x200047fc

08003af0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003af0:	4a02      	ldr	r2, [pc, #8]	; (8003afc <vTaskSuspendAll+0xc>)
 8003af2:	6813      	ldr	r3, [r2, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20004780 	.word	0x20004780

08003b00 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003b00:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <xTaskGetTickCount+0x8>)
 8003b02:	6818      	ldr	r0, [r3, #0]
}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	200047fc 	.word	0x200047fc

08003b0c <xTaskIncrementTick>:
{
 8003b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b10:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <xTaskIncrementTick+0xf4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d151      	bne.n	8003bbc <xTaskIncrementTick+0xb0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b18:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <xTaskIncrementTick+0xf8>)
 8003b1a:	681c      	ldr	r4, [r3, #0]
 8003b1c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003b1e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b20:	b9bc      	cbnz	r4, 8003b52 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003b22:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <xTaskIncrementTick+0xfc>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	b142      	cbz	r2, 8003b3c <xTaskIncrementTick+0x30>
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	e7fe      	b.n	8003b3a <xTaskIncrementTick+0x2e>
 8003b3c:	4a33      	ldr	r2, [pc, #204]	; (8003c0c <xTaskIncrementTick+0x100>)
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	6810      	ldr	r0, [r2, #0]
 8003b42:	6018      	str	r0, [r3, #0]
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	4a32      	ldr	r2, [pc, #200]	; (8003c10 <xTaskIncrementTick+0x104>)
 8003b48:	6813      	ldr	r3, [r2, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	f7ff fe49 	bl	80037e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b52:	4d30      	ldr	r5, [pc, #192]	; (8003c14 <xTaskIncrementTick+0x108>)
 8003b54:	4f30      	ldr	r7, [pc, #192]	; (8003c18 <xTaskIncrementTick+0x10c>)
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	429c      	cmp	r4, r3
 8003b5a:	f04f 0b00 	mov.w	fp, #0
 8003b5e:	d33c      	bcc.n	8003bda <xTaskIncrementTick+0xce>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b60:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003c08 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8003b64:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8003c28 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b68:	f8d8 2000 	ldr.w	r2, [r8]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	bb62      	cbnz	r2, 8003bca <xTaskIncrementTick+0xbe>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b70:	f04f 32ff 	mov.w	r2, #4294967295
 8003b74:	602a      	str	r2, [r5, #0]
					break;
 8003b76:	e030      	b.n	8003bda <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b78:	f106 0a04 	add.w	sl, r6, #4
 8003b7c:	4650      	mov	r0, sl
 8003b7e:	f7fe ff68 	bl	8002a52 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b82:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003b84:	b119      	cbz	r1, 8003b8e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b86:	f106 0018 	add.w	r0, r6, #24
 8003b8a:	f7fe ff62 	bl	8002a52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b8e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003b90:	f8d9 1000 	ldr.w	r1, [r9]
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <xTaskIncrementTick+0x110>)
 8003b96:	4288      	cmp	r0, r1
 8003b98:	f04f 0214 	mov.w	r2, #20
 8003b9c:	bf88      	it	hi
 8003b9e:	f8c9 0000 	strhi.w	r0, [r9]
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	fb02 3000 	mla	r0, r2, r0, r3
 8003ba8:	f7fe ff30 	bl	8002a0c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bac:	6838      	ldr	r0, [r7, #0]
 8003bae:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003bb0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	bf28      	it	cs
 8003bb6:	f04f 0b01 	movcs.w	fp, #1
 8003bba:	e7d5      	b.n	8003b68 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <xTaskIncrementTick+0x114>)
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003bc4:	f04f 0b00 	mov.w	fp, #0
 8003bc8:	e011      	b.n	8003bee <xTaskIncrementTick+0xe2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bca:	f8d8 2000 	ldr.w	r2, [r8]
 8003bce:	68d2      	ldr	r2, [r2, #12]
 8003bd0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bd2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003bd4:	428c      	cmp	r4, r1
 8003bd6:	d2cf      	bcs.n	8003b78 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003bd8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <xTaskIncrementTick+0x110>)
 8003bde:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003be0:	2214      	movs	r2, #20
 8003be2:	434a      	muls	r2, r1
 8003be4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003be6:	2a02      	cmp	r2, #2
 8003be8:	bf28      	it	cs
 8003bea:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003bee:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <xTaskIncrementTick+0x118>)
 8003bf0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	bf18      	it	ne
 8003bf6:	f04f 0b01 	movne.w	fp, #1
}
 8003bfa:	4658      	mov	r0, fp
 8003bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c00:	20004780 	.word	0x20004780
 8003c04:	200047fc 	.word	0x200047fc
 8003c08:	2000430c 	.word	0x2000430c
 8003c0c:	20004310 	.word	0x20004310
 8003c10:	200047b8 	.word	0x200047b8
 8003c14:	200047b4 	.word	0x200047b4
 8003c18:	20004308 	.word	0x20004308
 8003c1c:	20004314 	.word	0x20004314
 8003c20:	2000477c 	.word	0x2000477c
 8003c24:	20004800 	.word	0x20004800
 8003c28:	20004788 	.word	0x20004788

08003c2c <xTaskResumeAll>:
{
 8003c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8003c30:	4c2f      	ldr	r4, [pc, #188]	; (8003cf0 <xTaskResumeAll+0xc4>)
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	b943      	cbnz	r3, 8003c48 <xTaskResumeAll+0x1c>
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	e7fe      	b.n	8003c46 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003c48:	f7fe ff7c 	bl	8002b44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c52:	6824      	ldr	r4, [r4, #0]
 8003c54:	b12c      	cbz	r4, 8003c62 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003c56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003c58:	f7fe ff96 	bl	8002b88 <vPortExitCritical>
}
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <xTaskResumeAll+0xc8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f5      	beq.n	8003c56 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c6a:	4e23      	ldr	r6, [pc, #140]	; (8003cf8 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8003c6c:	4f23      	ldr	r7, [pc, #140]	; (8003cfc <xTaskResumeAll+0xd0>)
 8003c6e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003d10 <xTaskResumeAll+0xe4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c72:	6833      	ldr	r3, [r6, #0]
 8003c74:	b9e3      	cbnz	r3, 8003cb0 <xTaskResumeAll+0x84>
				if( pxTCB != NULL )
 8003c76:	b10c      	cbz	r4, 8003c7c <xTaskResumeAll+0x50>
					prvResetNextTaskUnblockTime();
 8003c78:	f7ff fdb4 	bl	80037e4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c7c:	4d20      	ldr	r5, [pc, #128]	; (8003d00 <xTaskResumeAll+0xd4>)
 8003c7e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c80:	b144      	cbz	r4, 8003c94 <xTaskResumeAll+0x68>
								xYieldPending = pdTRUE;
 8003c82:	4e20      	ldr	r6, [pc, #128]	; (8003d04 <xTaskResumeAll+0xd8>)
 8003c84:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003c86:	f7ff ff41 	bl	8003b0c <xTaskIncrementTick>
 8003c8a:	b100      	cbz	r0, 8003c8e <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8003c8c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c8e:	3c01      	subs	r4, #1
 8003c90:	d1f9      	bne.n	8003c86 <xTaskResumeAll+0x5a>
						uxPendedTicks = 0;
 8003c92:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <xTaskResumeAll+0xd8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0dc      	beq.n	8003c56 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <xTaskResumeAll+0xdc>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003cac:	2401      	movs	r4, #1
 8003cae:	e7d3      	b.n	8003c58 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003cb0:	68f3      	ldr	r3, [r6, #12]
 8003cb2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb4:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cb6:	f104 0018 	add.w	r0, r4, #24
 8003cba:	f7fe feca 	bl	8002a52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f7fe fec7 	bl	8002a52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	2014      	movs	r0, #20
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	fb00 8003 	mla	r0, r0, r3, r8
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	bf88      	it	hi
 8003cd4:	603b      	strhi	r3, [r7, #0]
 8003cd6:	f7fe fe99 	bl	8002a0c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <xTaskResumeAll+0xe0>)
 8003cdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003ce4:	bf22      	ittt	cs
 8003ce6:	4b07      	ldrcs	r3, [pc, #28]	; (8003d04 <xTaskResumeAll+0xd8>)
 8003ce8:	2201      	movcs	r2, #1
 8003cea:	601a      	strcs	r2, [r3, #0]
 8003cec:	e7c1      	b.n	8003c72 <xTaskResumeAll+0x46>
 8003cee:	bf00      	nop
 8003cf0:	20004780 	.word	0x20004780
 8003cf4:	20004774 	.word	0x20004774
 8003cf8:	200047bc 	.word	0x200047bc
 8003cfc:	20004788 	.word	0x20004788
 8003d00:	2000477c 	.word	0x2000477c
 8003d04:	20004800 	.word	0x20004800
 8003d08:	e000ed04 	.word	0xe000ed04
 8003d0c:	20004308 	.word	0x20004308
 8003d10:	20004314 	.word	0x20004314

08003d14 <vTaskDelayUntil>:
	{
 8003d14:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8003d16:	b940      	cbnz	r0, 8003d2a <vTaskDelayUntil+0x16>
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	e7fe      	b.n	8003d28 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003d2a:	b941      	cbnz	r1, 8003d3e <vTaskDelayUntil+0x2a>
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	e7fe      	b.n	8003d3c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8003d3e:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <vTaskDelayUntil+0x8c>)
 8003d40:	681c      	ldr	r4, [r3, #0]
 8003d42:	b144      	cbz	r4, 8003d56 <vTaskDelayUntil+0x42>
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	e7fe      	b.n	8003d54 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8003d56:	f7ff fecb 	bl	8003af0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003d5c:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8003d5e:	681d      	ldr	r5, [r3, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8003d60:	4295      	cmp	r5, r2
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003d62:	eb01 0302 	add.w	r3, r1, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8003d66:	d217      	bcs.n	8003d98 <vTaskDelayUntil+0x84>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d903      	bls.n	8003d74 <vTaskDelayUntil+0x60>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003d6c:	429d      	cmp	r5, r3
 8003d6e:	bf2c      	ite	cs
 8003d70:	2400      	movcs	r4, #0
 8003d72:	2401      	movcc	r4, #1
			*pxPreviousWakeTime = xTimeToWake;
 8003d74:	6003      	str	r3, [r0, #0]
			if( xShouldDelay != pdFALSE )
 8003d76:	b11c      	cbz	r4, 8003d80 <vTaskDelayUntil+0x6c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003d78:	2100      	movs	r1, #0
 8003d7a:	1b58      	subs	r0, r3, r5
 8003d7c:	f7ff fdd6 	bl	800392c <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8003d80:	f7ff ff54 	bl	8003c2c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003d84:	b938      	cbnz	r0, 8003d96 <vTaskDelayUntil+0x82>
			portYIELD_WITHIN_API();
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <vTaskDelayUntil+0x94>)
 8003d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d9e7      	bls.n	8003d6c <vTaskDelayUntil+0x58>
					xShouldDelay = pdTRUE;
 8003d9c:	2401      	movs	r4, #1
 8003d9e:	e7e9      	b.n	8003d74 <vTaskDelayUntil+0x60>
 8003da0:	20004780 	.word	0x20004780
 8003da4:	200047fc 	.word	0x200047fc
 8003da8:	e000ed04 	.word	0xe000ed04

08003dac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dac:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <vTaskSwitchContext+0x64>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <vTaskSwitchContext+0x68>)
{
 8003db2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003db4:	b112      	cbz	r2, 8003dbc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dbc:	4d16      	ldr	r5, [pc, #88]	; (8003e18 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8003dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dc0:	4a16      	ldr	r2, [pc, #88]	; (8003e1c <vTaskSwitchContext+0x70>)
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	2714      	movs	r7, #20
 8003dc6:	4616      	mov	r6, r2
 8003dc8:	fb07 f103 	mul.w	r1, r7, r3
 8003dcc:	1850      	adds	r0, r2, r1
 8003dce:	5854      	ldr	r4, [r2, r1]
 8003dd0:	b18c      	cbz	r4, 8003df6 <vTaskSwitchContext+0x4a>
 8003dd2:	6844      	ldr	r4, [r0, #4]
 8003dd4:	3108      	adds	r1, #8
 8003dd6:	6864      	ldr	r4, [r4, #4]
 8003dd8:	6044      	str	r4, [r0, #4]
 8003dda:	440a      	add	r2, r1
 8003ddc:	4294      	cmp	r4, r2
 8003dde:	bf04      	itt	eq
 8003de0:	6862      	ldreq	r2, [r4, #4]
 8003de2:	6042      	streq	r2, [r0, #4]
 8003de4:	2214      	movs	r2, #20
 8003de6:	fb02 6203 	mla	r2, r2, r3, r6
 8003dea:	6852      	ldr	r2, [r2, #4]
 8003dec:	68d1      	ldr	r1, [r2, #12]
 8003dee:	4a0c      	ldr	r2, [pc, #48]	; (8003e20 <vTaskSwitchContext+0x74>)
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	602b      	str	r3, [r5, #0]
 8003df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df6:	b943      	cbnz	r3, 8003e0a <vTaskSwitchContext+0x5e>
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	e7fe      	b.n	8003e08 <vTaskSwitchContext+0x5c>
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	e7dc      	b.n	8003dc8 <vTaskSwitchContext+0x1c>
 8003e0e:	bf00      	nop
 8003e10:	20004780 	.word	0x20004780
 8003e14:	20004800 	.word	0x20004800
 8003e18:	20004788 	.word	0x20004788
 8003e1c:	20004314 	.word	0x20004314
 8003e20:	20004308 	.word	0x20004308

08003e24 <vTaskPlaceOnEventList>:
{
 8003e24:	b510      	push	{r4, lr}
 8003e26:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003e28:	b940      	cbnz	r0, 8003e3c <vTaskPlaceOnEventList+0x18>
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	e7fe      	b.n	8003e3a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <vTaskPlaceOnEventList+0x30>)
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	3118      	adds	r1, #24
 8003e42:	f7fe fdef 	bl	8002a24 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e46:	4620      	mov	r0, r4
 8003e48:	2101      	movs	r1, #1
}
 8003e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e4e:	f7ff bd6d 	b.w	800392c <prvAddCurrentTaskToDelayedList>
 8003e52:	bf00      	nop
 8003e54:	20004308 	.word	0x20004308

08003e58 <vTaskPlaceOnEventListRestricted>:
	{
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8003e5e:	b940      	cbnz	r0, 8003e72 <vTaskPlaceOnEventListRestricted+0x1a>
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	e7fe      	b.n	8003e70 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <vTaskPlaceOnEventListRestricted+0x38>)
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	3118      	adds	r1, #24
 8003e78:	f7fe fdc8 	bl	8002a0c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8003e7c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e7e:	4621      	mov	r1, r4
 8003e80:	bf0c      	ite	eq
 8003e82:	4628      	moveq	r0, r5
 8003e84:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8003e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e8c:	f7ff bd4e 	b.w	800392c <prvAddCurrentTaskToDelayedList>
 8003e90:	20004308 	.word	0x20004308

08003e94 <xTaskRemoveFromEventList>:
{
 8003e94:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e96:	68c3      	ldr	r3, [r0, #12]
 8003e98:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003e9a:	b944      	cbnz	r4, 8003eae <xTaskRemoveFromEventList+0x1a>
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	e7fe      	b.n	8003eac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eae:	f104 0518 	add.w	r5, r4, #24
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f7fe fdcd 	bl	8002a52 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <xTaskRemoveFromEventList+0x68>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	b9db      	cbnz	r3, 8003ef6 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ebe:	1d25      	adds	r5, r4, #4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f7fe fdc6 	bl	8002a52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <xTaskRemoveFromEventList+0x6c>)
 8003ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003eca:	6811      	ldr	r1, [r2, #0]
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	bf88      	it	hi
 8003ed0:	6013      	strhi	r3, [r2, #0]
 8003ed2:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <xTaskRemoveFromEventList+0x70>)
 8003ed4:	2014      	movs	r0, #20
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003edc:	f7fe fd96 	bl	8002a0c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <xTaskRemoveFromEventList+0x74>)
 8003ee2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003eea:	bf83      	ittte	hi
 8003eec:	4b07      	ldrhi	r3, [pc, #28]	; (8003f0c <xTaskRemoveFromEventList+0x78>)
 8003eee:	2001      	movhi	r0, #1
 8003ef0:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003ef2:	2000      	movls	r0, #0
}
 8003ef4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4805      	ldr	r0, [pc, #20]	; (8003f10 <xTaskRemoveFromEventList+0x7c>)
 8003efa:	e7ef      	b.n	8003edc <xTaskRemoveFromEventList+0x48>
 8003efc:	20004780 	.word	0x20004780
 8003f00:	20004788 	.word	0x20004788
 8003f04:	20004314 	.word	0x20004314
 8003f08:	20004308 	.word	0x20004308
 8003f0c:	20004800 	.word	0x20004800
 8003f10:	200047bc 	.word	0x200047bc

08003f14 <vTaskSetTimeOutState>:
{
 8003f14:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 8003f16:	4604      	mov	r4, r0
 8003f18:	b940      	cbnz	r0, 8003f2c <vTaskSetTimeOutState+0x18>
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	e7fe      	b.n	8003f2a <vTaskSetTimeOutState+0x16>
	taskENTER_CRITICAL();
 8003f2c:	f7fe fe0a 	bl	8002b44 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <vTaskSetTimeOutState+0x30>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <vTaskSetTimeOutState+0x34>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6063      	str	r3, [r4, #4]
}
 8003f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 8003f40:	f7fe be22 	b.w	8002b88 <vPortExitCritical>
 8003f44:	200047b8 	.word	0x200047b8
 8003f48:	200047fc 	.word	0x200047fc

08003f4c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <vTaskInternalSetTimeOutState+0x10>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f52:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <vTaskInternalSetTimeOutState+0x14>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6043      	str	r3, [r0, #4]
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	200047b8 	.word	0x200047b8
 8003f60:	200047fc 	.word	0x200047fc

08003f64 <xTaskCheckForTimeOut>:
{
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003f68:	4605      	mov	r5, r0
 8003f6a:	b940      	cbnz	r0, 8003f7e <xTaskCheckForTimeOut+0x1a>
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	e7fe      	b.n	8003f7c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003f7e:	b941      	cbnz	r1, 8003f92 <xTaskCheckForTimeOut+0x2e>
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	e7fe      	b.n	8003f90 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003f92:	f7fe fdd7 	bl	8002b44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f98:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003f9a:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	1c58      	adds	r0, r3, #1
 8003fa0:	d00e      	beq.n	8003fc0 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fa2:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <xTaskCheckForTimeOut+0x74>)
 8003fa4:	682e      	ldr	r6, [r5, #0]
 8003fa6:	6800      	ldr	r0, [r0, #0]
 8003fa8:	4286      	cmp	r6, r0
 8003faa:	d001      	beq.n	8003fb0 <xTaskCheckForTimeOut+0x4c>
 8003fac:	428a      	cmp	r2, r1
 8003fae:	d20e      	bcs.n	8003fce <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fb0:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d209      	bcs.n	8003fca <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7ff ffc6 	bl	8003f4c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8003fc0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003fc2:	f7fe fde1 	bl	8002b88 <vPortExitCritical>
}
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003fce:	2401      	movs	r4, #1
 8003fd0:	e7f7      	b.n	8003fc2 <xTaskCheckForTimeOut+0x5e>
 8003fd2:	bf00      	nop
 8003fd4:	200047fc 	.word	0x200047fc
 8003fd8:	200047b8 	.word	0x200047b8

08003fdc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003fdc:	4b01      	ldr	r3, [pc, #4]	; (8003fe4 <vTaskMissedYield+0x8>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	4770      	bx	lr
 8003fe4:	20004800 	.word	0x20004800

08003fe8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <xTaskGetSchedulerState+0x18>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	b133      	cbz	r3, 8003ffc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <xTaskGetSchedulerState+0x1c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2002      	moveq	r0, #2
 8003ff8:	2000      	movne	r0, #0
 8003ffa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ffc:	2001      	movs	r0, #1
	}
 8003ffe:	4770      	bx	lr
 8004000:	200047d0 	.word	0x200047d0
 8004004:	20004780 	.word	0x20004780

08004008 <xTaskPriorityDisinherit>:
	{
 8004008:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800400a:	4604      	mov	r4, r0
 800400c:	b908      	cbnz	r0, 8004012 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800400e:	2000      	movs	r0, #0
 8004010:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <xTaskPriorityDisinherit+0x78>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4298      	cmp	r0, r3
 8004018:	d008      	beq.n	800402c <xTaskPriorityDisinherit+0x24>
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	e7fe      	b.n	800402a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800402c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800402e:	b943      	cbnz	r3, 8004042 <xTaskPriorityDisinherit+0x3a>
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	e7fe      	b.n	8004040 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004042:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004044:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004046:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004048:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800404a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800404c:	d0df      	beq.n	800400e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1dd      	bne.n	800400e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004052:	1d05      	adds	r5, r0, #4
 8004054:	4628      	mov	r0, r5
 8004056:	f7fe fcfc 	bl	8002a52 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800405a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800405c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800405e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004062:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004064:	4a07      	ldr	r2, [pc, #28]	; (8004084 <xTaskPriorityDisinherit+0x7c>)
 8004066:	6811      	ldr	r1, [r2, #0]
 8004068:	428b      	cmp	r3, r1
 800406a:	bf88      	it	hi
 800406c:	6013      	strhi	r3, [r2, #0]
 800406e:	4a06      	ldr	r2, [pc, #24]	; (8004088 <xTaskPriorityDisinherit+0x80>)
 8004070:	2014      	movs	r0, #20
 8004072:	fb00 2003 	mla	r0, r0, r3, r2
 8004076:	4629      	mov	r1, r5
 8004078:	f7fe fcc8 	bl	8002a0c <vListInsertEnd>
					xReturn = pdTRUE;
 800407c:	2001      	movs	r0, #1
	}
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	20004308 	.word	0x20004308
 8004084:	20004788 	.word	0x20004788
 8004088:	20004314 	.word	0x20004314

0800408c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800408c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800408e:	4c11      	ldr	r4, [pc, #68]	; (80040d4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8004090:	f7fe fd58 	bl	8002b44 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004094:	6825      	ldr	r5, [r4, #0]
 8004096:	b9bd      	cbnz	r5, 80040c8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004098:	4f0f      	ldr	r7, [pc, #60]	; (80040d8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800409a:	4e10      	ldr	r6, [pc, #64]	; (80040dc <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800409c:	4638      	mov	r0, r7
 800409e:	f7fe fca7 	bl	80029f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040a2:	4630      	mov	r0, r6
 80040a4:	f7fe fca4 	bl	80029f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040aa:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80040ac:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040b0:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80040b2:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040b4:	200a      	movs	r0, #10
 80040b6:	9500      	str	r5, [sp, #0]
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <prvCheckForValidListAndQueue+0x60>)
 80040ba:	f7ff f845 	bl	8003148 <xQueueGenericCreateStatic>
 80040be:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040c0:	b110      	cbz	r0, 80040c8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040c2:	490b      	ldr	r1, [pc, #44]	; (80040f0 <prvCheckForValidListAndQueue+0x64>)
 80040c4:	f7ff fab0 	bl	8003628 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80040c8:	b003      	add	sp, #12
 80040ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80040ce:	f7fe bd5b 	b.w	8002b88 <vPortExitCritical>
 80040d2:	bf00      	nop
 80040d4:	20004928 	.word	0x20004928
 80040d8:	200048ac 	.word	0x200048ac
 80040dc:	200048c0 	.word	0x200048c0
 80040e0:	20004804 	.word	0x20004804
 80040e4:	2000480c 	.word	0x2000480c
 80040e8:	20004808 	.word	0x20004808
 80040ec:	200048d8 	.word	0x200048d8
 80040f0:	08004f2d 	.word	0x08004f2d

080040f4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80040f4:	4291      	cmp	r1, r2
{
 80040f6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040f8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040fa:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80040fc:	d80a      	bhi.n	8004114 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fe:	1ad2      	subs	r2, r2, r3
 8004100:	6983      	ldr	r3, [r0, #24]
 8004102:	429a      	cmp	r2, r3
 8004104:	d20d      	bcs.n	8004122 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <prvInsertTimerInActiveList+0x34>)
 8004108:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	f7fe fc8a 	bl	8002a24 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004110:	2000      	movs	r0, #0
 8004112:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004114:	429a      	cmp	r2, r3
 8004116:	d201      	bcs.n	800411c <prvInsertTimerInActiveList+0x28>
 8004118:	4299      	cmp	r1, r3
 800411a:	d202      	bcs.n	8004122 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800411c:	1d01      	adds	r1, r0, #4
 800411e:	4b03      	ldr	r3, [pc, #12]	; (800412c <prvInsertTimerInActiveList+0x38>)
 8004120:	e7f3      	b.n	800410a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8004122:	2001      	movs	r0, #1
}
 8004124:	bd08      	pop	{r3, pc}
 8004126:	bf00      	nop
 8004128:	20004808 	.word	0x20004808
 800412c:	20004804 	.word	0x20004804

08004130 <xTimerCreateTimerTask>:
{
 8004130:	b510      	push	{r4, lr}
 8004132:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004134:	f7ff ffaa 	bl	800408c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <xTimerCreateTimerTask+0x58>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	b943      	cbnz	r3, 8004150 <xTimerCreateTimerTask+0x20>
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	e7fe      	b.n	800414e <xTimerCreateTimerTask+0x1e>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004150:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004152:	aa07      	add	r2, sp, #28
 8004154:	a906      	add	r1, sp, #24
 8004156:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004158:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800415a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800415c:	f7fe fc3c 	bl	80029d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004160:	9b05      	ldr	r3, [sp, #20]
 8004162:	9302      	str	r3, [sp, #8]
 8004164:	9b06      	ldr	r3, [sp, #24]
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	2302      	movs	r3, #2
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	9a07      	ldr	r2, [sp, #28]
 800416e:	4907      	ldr	r1, [pc, #28]	; (800418c <xTimerCreateTimerTask+0x5c>)
 8004170:	4807      	ldr	r0, [pc, #28]	; (8004190 <xTimerCreateTimerTask+0x60>)
 8004172:	4623      	mov	r3, r4
 8004174:	f7ff fc14 	bl	80039a0 <xTaskCreateStatic>
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <xTimerCreateTimerTask+0x64>)
 800417a:	6018      	str	r0, [r3, #0]
	configASSERT( xReturn );
 800417c:	2800      	cmp	r0, #0
 800417e:	d0de      	beq.n	800413e <xTimerCreateTimerTask+0xe>
}
 8004180:	2001      	movs	r0, #1
 8004182:	b008      	add	sp, #32
 8004184:	bd10      	pop	{r4, pc}
 8004186:	bf00      	nop
 8004188:	20004928 	.word	0x20004928
 800418c:	08004f32 	.word	0x08004f32
 8004190:	08004335 	.word	0x08004335
 8004194:	2000492c 	.word	0x2000492c

08004198 <xTimerCreate>:
	{
 8004198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800419c:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800419e:	2030      	movs	r0, #48	; 0x30
	{
 80041a0:	460d      	mov	r5, r1
 80041a2:	4617      	mov	r7, r2
 80041a4:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80041a6:	f7fe fe3d 	bl	8002e24 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80041aa:	4604      	mov	r4, r0
 80041ac:	b1c0      	cbz	r0, 80041e0 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80041ae:	b945      	cbnz	r5, 80041c2 <xTimerCreate+0x2a>
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	e7fe      	b.n	80041c0 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 80041c2:	f7ff ff63 	bl	800408c <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80041c6:	9b06      	ldr	r3, [sp, #24]
 80041c8:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 80041ca:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80041ce:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80041d0:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80041d2:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80041d4:	1d20      	adds	r0, r4, #4
 80041d6:	f7fe fc16 	bl	8002a06 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 80041e0:	4620      	mov	r0, r4
 80041e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080041e6 <xTimerCreateStatic>:
	{
 80041e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80041ea:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 80041ec:	2330      	movs	r3, #48	; 0x30
 80041ee:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 80041f0:	9b01      	ldr	r3, [sp, #4]
	{
 80041f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 80041f4:	2b30      	cmp	r3, #48	; 0x30
	{
 80041f6:	4680      	mov	r8, r0
 80041f8:	460d      	mov	r5, r1
 80041fa:	4617      	mov	r7, r2
			configASSERT( xSize == sizeof( Timer_t ) );
 80041fc:	d008      	beq.n	8004210 <xTimerCreateStatic+0x2a>
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	e7fe      	b.n	800420e <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8004210:	b944      	cbnz	r4, 8004224 <xTimerCreateStatic+0x3e>
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	e7fe      	b.n	8004222 <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004224:	b941      	cbnz	r1, 8004238 <xTimerCreateStatic+0x52>
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	e7fe      	b.n	8004236 <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8004238:	f7ff ff28 	bl	800408c <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800423c:	9b08      	ldr	r3, [sp, #32]
 800423e:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004240:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 8004242:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004246:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004248:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800424a:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800424c:	f7fe fbdb 	bl	8002a06 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8004250:	2301      	movs	r3, #1
	}
 8004252:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8004254:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8004258:	b002      	add	sp, #8
 800425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004260 <xTimerGenericCommand>:
{
 8004260:	b530      	push	{r4, r5, lr}
 8004262:	4615      	mov	r5, r2
 8004264:	b085      	sub	sp, #20
 8004266:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8004268:	4603      	mov	r3, r0
 800426a:	b940      	cbnz	r0, 800427e <xTimerGenericCommand+0x1e>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	e7fe      	b.n	800427c <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 800427e:	4c0d      	ldr	r4, [pc, #52]	; (80042b4 <xTimerGenericCommand+0x54>)
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	b180      	cbz	r0, 80042a6 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004284:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004286:	e88d 0022 	stmia.w	sp, {r1, r5}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800428a:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800428c:	dc0d      	bgt.n	80042aa <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800428e:	f7ff feab 	bl	8003fe8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004292:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004294:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004296:	bf08      	it	eq
 8004298:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800429a:	6820      	ldr	r0, [r4, #0]
 800429c:	bf18      	it	ne
 800429e:	461a      	movne	r2, r3
 80042a0:	4669      	mov	r1, sp
 80042a2:	f7ff f805 	bl	80032b0 <xQueueGenericSend>
}
 80042a6:	b005      	add	sp, #20
 80042a8:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042aa:	2300      	movs	r3, #0
 80042ac:	4669      	mov	r1, sp
 80042ae:	f7ff f8b5 	bl	800341c <xQueueGenericSendFromISR>
 80042b2:	e7f8      	b.n	80042a6 <xTimerGenericCommand+0x46>
 80042b4:	20004928 	.word	0x20004928

080042b8 <prvSwitchTimerLists>:
{
 80042b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042bc:	4d1b      	ldr	r5, [pc, #108]	; (800432c <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042be:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	b932      	cbnz	r2, 80042d6 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <prvSwitchTimerLists+0x78>)
 80042ca:	6811      	ldr	r1, [r2, #0]
 80042cc:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	b002      	add	sp, #8
 80042d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042da:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042dc:	1d27      	adds	r7, r4, #4
 80042de:	4638      	mov	r0, r7
 80042e0:	f7fe fbb7 	bl	8002a52 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042e6:	4620      	mov	r0, r4
 80042e8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042ea:	69e3      	ldr	r3, [r4, #28]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d1e8      	bne.n	80042c2 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042f0:	69a3      	ldr	r3, [r4, #24]
 80042f2:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80042f4:	429e      	cmp	r6, r3
 80042f6:	d206      	bcs.n	8004306 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042f8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042fa:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042fc:	4639      	mov	r1, r7
 80042fe:	6828      	ldr	r0, [r5, #0]
 8004300:	f7fe fb90 	bl	8002a24 <vListInsert>
 8004304:	e7dd      	b.n	80042c2 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004306:	2300      	movs	r3, #0
 8004308:	f8cd 8000 	str.w	r8, [sp]
 800430c:	4632      	mov	r2, r6
 800430e:	4619      	mov	r1, r3
 8004310:	4620      	mov	r0, r4
 8004312:	f7ff ffa5 	bl	8004260 <xTimerGenericCommand>
				configASSERT( xResult );
 8004316:	2800      	cmp	r0, #0
 8004318:	d1d3      	bne.n	80042c2 <prvSwitchTimerLists+0xa>
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	e7fe      	b.n	800432a <prvSwitchTimerLists+0x72>
 800432c:	20004804 	.word	0x20004804
 8004330:	20004808 	.word	0x20004808

08004334 <prvTimerTask>:
{
 8004334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004338:	4d72      	ldr	r5, [pc, #456]	; (8004504 <prvTimerTask+0x1d0>)
					portYIELD_WITHIN_API();
 800433a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8004514 <prvTimerTask+0x1e0>
{
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8004348:	f1bb 0f00 	cmp.w	fp, #0
 800434c:	d044      	beq.n	80043d8 <prvTimerTask+0xa4>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8004354:	f7ff fbcc 	bl	8003af0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8004358:	f7ff fbd2 	bl	8003b00 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <prvTimerTask+0x1d4>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8004362:	4682      	mov	sl, r0
 8004364:	461e      	mov	r6, r3
	if( xTimeNow < xLastTime )
 8004366:	d239      	bcs.n	80043dc <prvTimerTask+0xa8>
 8004368:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 800436a:	f7ff ffa5 	bl	80042b8 <prvSwitchTimerLists>
 800436e:	9b03      	ldr	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 8004370:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
 8004372:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 8004376:	2c00      	cmp	r4, #0
 8004378:	f040 808a 	bne.w	8004490 <prvTimerTask+0x15c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800437c:	f1bb 0f00 	cmp.w	fp, #0
 8004380:	d06b      	beq.n	800445a <prvTimerTask+0x126>
 8004382:	45d1      	cmp	r9, sl
 8004384:	f200 8082 	bhi.w	800448c <prvTimerTask+0x158>
				( void ) xTaskResumeAll();
 8004388:	f7ff fc50 	bl	8003c2c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004394:	f10b 0004 	add.w	r0, fp, #4
 8004398:	f7fe fb5b 	bl	8002a52 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800439c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d11d      	bne.n	80043e0 <prvTimerTask+0xac>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043a4:	f8db 1018 	ldr.w	r1, [fp, #24]
 80043a8:	464b      	mov	r3, r9
 80043aa:	4652      	mov	r2, sl
 80043ac:	4449      	add	r1, r9
 80043ae:	4658      	mov	r0, fp
 80043b0:	f7ff fea0 	bl	80040f4 <prvInsertTimerInActiveList>
 80043b4:	b1a0      	cbz	r0, 80043e0 <prvTimerTask+0xac>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043b6:	9400      	str	r4, [sp, #0]
 80043b8:	4623      	mov	r3, r4
 80043ba:	464a      	mov	r2, r9
 80043bc:	4621      	mov	r1, r4
 80043be:	4658      	mov	r0, fp
 80043c0:	f7ff ff4e 	bl	8004260 <xTimerGenericCommand>
			configASSERT( xResult );
 80043c4:	b960      	cbnz	r0, 80043e0 <prvTimerTask+0xac>
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	e7fe      	b.n	80043d6 <prvTimerTask+0xa2>
		xNextExpireTime = ( TickType_t ) 0U;
 80043d8:	46d9      	mov	r9, fp
 80043da:	e7bb      	b.n	8004354 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 80043dc:	2400      	movs	r4, #0
 80043de:	e7c8      	b.n	8004372 <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043e0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80043e4:	4658      	mov	r0, fp
 80043e6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043e8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8004510 <prvTimerTask+0x1dc>
 80043ec:	f8d9 0000 	ldr.w	r0, [r9]
 80043f0:	2200      	movs	r2, #0
 80043f2:	a904      	add	r1, sp, #16
 80043f4:	f7ff f874 	bl	80034e0 <xQueueReceive>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d0a2      	beq.n	8004342 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043fc:	9b04      	ldr	r3, [sp, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	da03      	bge.n	800440a <prvTimerTask+0xd6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004402:	9907      	ldr	r1, [sp, #28]
 8004404:	9806      	ldr	r0, [sp, #24]
 8004406:	9b05      	ldr	r3, [sp, #20]
 8004408:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800440a:	9b04      	ldr	r3, [sp, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	dbed      	blt.n	80043ec <prvTimerTask+0xb8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004410:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004412:	6963      	ldr	r3, [r4, #20]
 8004414:	b113      	cbz	r3, 800441c <prvTimerTask+0xe8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004416:	1d20      	adds	r0, r4, #4
 8004418:	f7fe fb1b 	bl	8002a52 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800441c:	f7ff fb70 	bl	8003b00 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8004420:	6833      	ldr	r3, [r6, #0]
 8004422:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8004424:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8004426:	d201      	bcs.n	800442c <prvTimerTask+0xf8>
		prvSwitchTimerLists();
 8004428:	f7ff ff46 	bl	80042b8 <prvSwitchTimerLists>
 800442c:	9a04      	ldr	r2, [sp, #16]
	xLastTime = xTimeNow;
 800442e:	f8c6 b000 	str.w	fp, [r6]
 8004432:	2a09      	cmp	r2, #9
 8004434:	d8da      	bhi.n	80043ec <prvTimerTask+0xb8>
 8004436:	2301      	movs	r3, #1
 8004438:	4093      	lsls	r3, r2
 800443a:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 800443e:	d14e      	bne.n	80044de <prvTimerTask+0x1aa>
 8004440:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8004444:	d127      	bne.n	8004496 <prvTimerTask+0x162>
 8004446:	069b      	lsls	r3, r3, #26
 8004448:	d5d0      	bpl.n	80043ec <prvTimerTask+0xb8>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800444a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1cc      	bne.n	80043ec <prvTimerTask+0xb8>
							vPortFree( pxTimer );
 8004452:	4620      	mov	r0, r4
 8004454:	f7fe fd74 	bl	8002f40 <vPortFree>
 8004458:	e7c8      	b.n	80043ec <prvTimerTask+0xb8>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800445a:	4b2c      	ldr	r3, [pc, #176]	; (800450c <prvTimerTask+0x1d8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	fab2 f282 	clz	r2, r2
 8004464:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004466:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <prvTimerTask+0x1dc>)
 8004468:	eba9 010a 	sub.w	r1, r9, sl
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	f7ff f918 	bl	80036a2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004472:	f7ff fbdb 	bl	8003c2c <xTaskResumeAll>
 8004476:	2800      	cmp	r0, #0
 8004478:	d1b6      	bne.n	80043e8 <prvTimerTask+0xb4>
					portYIELD_WITHIN_API();
 800447a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800447e:	f8c8 3000 	str.w	r3, [r8]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	e7ad      	b.n	80043e8 <prvTimerTask+0xb4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800448c:	4622      	mov	r2, r4
 800448e:	e7ea      	b.n	8004466 <prvTimerTask+0x132>
			( void ) xTaskResumeAll();
 8004490:	f7ff fbcc 	bl	8003c2c <xTaskResumeAll>
 8004494:	e7a8      	b.n	80043e8 <prvTimerTask+0xb4>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004496:	69a1      	ldr	r1, [r4, #24]
 8004498:	9b05      	ldr	r3, [sp, #20]
 800449a:	465a      	mov	r2, fp
 800449c:	4419      	add	r1, r3
 800449e:	4620      	mov	r0, r4
 80044a0:	f7ff fe28 	bl	80040f4 <prvInsertTimerInActiveList>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d0a1      	beq.n	80043ec <prvTimerTask+0xb8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044aa:	4620      	mov	r0, r4
 80044ac:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044ae:	69e3      	ldr	r3, [r4, #28]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d19b      	bne.n	80043ec <prvTimerTask+0xb8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044b4:	69a2      	ldr	r2, [r4, #24]
 80044b6:	9905      	ldr	r1, [sp, #20]
 80044b8:	f8cd a000 	str.w	sl, [sp]
 80044bc:	440a      	add	r2, r1
 80044be:	4653      	mov	r3, sl
 80044c0:	4651      	mov	r1, sl
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff fecc 	bl	8004260 <xTimerGenericCommand>
							configASSERT( xResult );
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d18f      	bne.n	80043ec <prvTimerTask+0xb8>
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	e7fe      	b.n	80044dc <prvTimerTask+0x1a8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044de:	9905      	ldr	r1, [sp, #20]
 80044e0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044e2:	b941      	cbnz	r1, 80044f6 <prvTimerTask+0x1c2>
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	e7fe      	b.n	80044f4 <prvTimerTask+0x1c0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044f6:	465b      	mov	r3, fp
 80044f8:	465a      	mov	r2, fp
 80044fa:	4459      	add	r1, fp
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff fdf9 	bl	80040f4 <prvInsertTimerInActiveList>
 8004502:	e773      	b.n	80043ec <prvTimerTask+0xb8>
 8004504:	20004804 	.word	0x20004804
 8004508:	200048d4 	.word	0x200048d4
 800450c:	20004808 	.word	0x20004808
 8004510:	20004928 	.word	0x20004928
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004518:	b510      	push	{r4, lr}
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800451a:	4604      	mov	r4, r0
 800451c:	b940      	cbnz	r0, 8004530 <pvTimerGetTimerID+0x18>
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	e7fe      	b.n	800452e <pvTimerGetTimerID+0x16>

	taskENTER_CRITICAL();
 8004530:	f7fe fb08 	bl	8002b44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8004534:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8004536:	f7fe fb27 	bl	8002b88 <vPortExitCritical>

	return pvReturn;
}
 800453a:	4620      	mov	r0, r4
 800453c:	bd10      	pop	{r4, pc}

0800453e <Callback01>:
  /* USER CODE END StartTask04 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 800453e:	4770      	bx	lr

08004540 <IR_EXT1>:
{
 8004540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		xLastWakeTime = xTaskGetTickCount();
 8004542:	f7ff fadd 	bl	8003b00 <xTaskGetTickCount>
		  	  if(flag==1)
 8004546:	4d29      	ldr	r5, [pc, #164]	; (80045ec <IR_EXT1+0xac>)
		xLastWakeTime = xTaskGetTickCount();
 8004548:	9001      	str	r0, [sp, #4]
		vTaskSetTimeOutState( &xTimeOut );
 800454a:	a802      	add	r0, sp, #8
 800454c:	f7ff fce2 	bl	8003f14 <vTaskSetTimeOutState>
		 	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) ==1)){
 8004550:	4c27      	ldr	r4, [pc, #156]	; (80045f0 <IR_EXT1+0xb0>)
		const TickType_t xTicksToWait=pdMS_TO_TICKS(3000 );
 8004552:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004556:	9303      	str	r3, [sp, #12]
 8004558:	462e      	mov	r6, r5
		  	  if(flag==1)
 800455a:	782b      	ldrb	r3, [r5, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d036      	beq.n	80045ce <IR_EXT1+0x8e>
		 	if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) ==1)){
 8004560:	2102      	movs	r1, #2
 8004562:	4620      	mov	r0, r4
 8004564:	f7fd fae4 	bl	8001b30 <HAL_GPIO_ReadPin>
 8004568:	2801      	cmp	r0, #1
 800456a:	d10f      	bne.n	800458c <IR_EXT1+0x4c>
		 		while(!(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) ==0));
 800456c:	2102      	movs	r1, #2
 800456e:	4620      	mov	r0, r4
 8004570:	f7fd fade 	bl	8001b30 <HAL_GPIO_ReadPin>
 8004574:	2800      	cmp	r0, #0
 8004576:	d1f9      	bne.n	800456c <IR_EXT1+0x2c>
		 		counter++;
 8004578:	4a1e      	ldr	r2, [pc, #120]	; (80045f4 <IR_EXT1+0xb4>)
		 	HAL_UART_Transmit(&huart2,(uint8_t*)"In IR1\r\n",7,10);
 800457a:	491f      	ldr	r1, [pc, #124]	; (80045f8 <IR_EXT1+0xb8>)
		 		counter++;
 800457c:	7813      	ldrb	r3, [r2, #0]
		 	HAL_UART_Transmit(&huart2,(uint8_t*)"In IR1\r\n",7,10);
 800457e:	481f      	ldr	r0, [pc, #124]	; (80045fc <IR_EXT1+0xbc>)
		 		counter++;
 8004580:	3301      	adds	r3, #1
 8004582:	7013      	strb	r3, [r2, #0]
		 	HAL_UART_Transmit(&huart2,(uint8_t*)"In IR1\r\n",7,10);
 8004584:	230a      	movs	r3, #10
 8004586:	2207      	movs	r2, #7
 8004588:	f7fe f87c 	bl	8002684 <HAL_UART_Transmit>
		while((!(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) ==1))||(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) ==1)){
 800458c:	2102      	movs	r1, #2
 800458e:	4620      	mov	r0, r4
 8004590:	f7fd face 	bl	8001b30 <HAL_GPIO_ReadPin>
 8004594:	2801      	cmp	r0, #1
 8004596:	d105      	bne.n	80045a4 <IR_EXT1+0x64>
 8004598:	2102      	movs	r1, #2
 800459a:	4620      	mov	r0, r4
 800459c:	f7fd fac8 	bl	8001b30 <HAL_GPIO_ReadPin>
 80045a0:	2801      	cmp	r0, #1
 80045a2:	d114      	bne.n	80045ce <IR_EXT1+0x8e>
		 if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) != pdFALSE )
 80045a4:	a903      	add	r1, sp, #12
 80045a6:	a802      	add	r0, sp, #8
 80045a8:	f7ff fcdc 	bl	8003f64 <xTaskCheckForTimeOut>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d0ed      	beq.n	800458c <IR_EXT1+0x4c>
			 HAL_UART_Transmit(&huart2,(uint8_t*)"Vehicle stopped\r\n",17,HAL_MAX_DELAY);
 80045b0:	f04f 33ff 	mov.w	r3, #4294967295
 80045b4:	2211      	movs	r2, #17
 80045b6:	4912      	ldr	r1, [pc, #72]	; (8004600 <IR_EXT1+0xc0>)
 80045b8:	4810      	ldr	r0, [pc, #64]	; (80045fc <IR_EXT1+0xbc>)
 80045ba:	f7fe f863 	bl	8002684 <HAL_UART_Transmit>
			 flag++;
 80045be:	7833      	ldrb	r3, [r6, #0]
			 IR_data=1;
 80045c0:	4a10      	ldr	r2, [pc, #64]	; (8004604 <IR_EXT1+0xc4>)
			 flag++;
 80045c2:	3301      	adds	r3, #1
 80045c4:	7033      	strb	r3, [r6, #0]
			 IR_data=1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	7013      	strb	r3, [r2, #0]
			 TxData[1]= IR_data;
 80045ca:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <IR_EXT1+0xc8>)
 80045cc:	7053      	strb	r3, [r2, #1]
		 taskYIELD();
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <IR_EXT1+0xcc>)
 80045d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	f3bf 8f6f 	isb	sy
		 vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80045de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80045e2:	a801      	add	r0, sp, #4
 80045e4:	f7ff fb96 	bl	8003d14 <vTaskDelayUntil>
		  	  if(flag==1)
 80045e8:	e7b7      	b.n	800455a <IR_EXT1+0x1a>
 80045ea:	bf00      	nop
 80045ec:	20004930 	.word	0x20004930
 80045f0:	40020400 	.word	0x40020400
 80045f4:	20004b70 	.word	0x20004b70
 80045f8:	08004f6c 	.word	0x08004f6c
 80045fc:	20004b94 	.word	0x20004b94
 8004600:	08004f75 	.word	0x08004f75
 8004604:	20004b08 	.word	0x20004b08
 8004608:	20004b78 	.word	0x20004b78
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <Can_Tx>:
{
 8004610:	b573      	push	{r0, r1, r4, r5, r6, lr}
			xLastWakeTime = xTaskGetTickCount();
 8004612:	f7ff fa75 	bl	8003b00 <xTaskGetTickCount>
		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8004616:	4e19      	ldr	r6, [pc, #100]	; (800467c <Can_Tx+0x6c>)
		  	TxHeader.DLC=5;
 8004618:	4c19      	ldr	r4, [pc, #100]	; (8004680 <Can_Tx+0x70>)
		  	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,(uint8_t*)TxData,&TxMailbox)!=HAL_OK){
 800461a:	4d1a      	ldr	r5, [pc, #104]	; (8004684 <Can_Tx+0x74>)
			xLastWakeTime = xTaskGetTickCount();
 800461c:	9001      	str	r0, [sp, #4]
		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800461e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004622:	4630      	mov	r0, r6
 8004624:	f7fd fa8f 	bl	8001b46 <HAL_GPIO_TogglePin>
		  	HAL_Delay(500);
 8004628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800462c:	f7fc fb6e 	bl	8000d0c <HAL_Delay>
		  	TxHeader.DLC=5;
 8004630:	2305      	movs	r3, #5
 8004632:	6123      	str	r3, [r4, #16]
		  	TxHeader.StdId=0x65D;
 8004634:	f240 635d 	movw	r3, #1629	; 0x65d
 8004638:	6023      	str	r3, [r4, #0]
		  	TxHeader.IDE=CAN_ID_STD;
 800463a:	2300      	movs	r3, #0
 800463c:	60a3      	str	r3, [r4, #8]
		  	TxHeader.RTR=CAN_RTR_DATA;
 800463e:	60e3      	str	r3, [r4, #12]
			  TxData[0]=temp;
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <Can_Tx+0x78>)
 8004642:	4a12      	ldr	r2, [pc, #72]	; (800468c <Can_Tx+0x7c>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	7013      	strb	r3, [r2, #0]
			  TxData[1]= IR_data;
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <Can_Tx+0x80>)
		  	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,(uint8_t*)TxData,&TxMailbox)!=HAL_OK){
 800464a:	490d      	ldr	r1, [pc, #52]	; (8004680 <Can_Tx+0x70>)
			  TxData[1]= IR_data;
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	7053      	strb	r3, [r2, #1]
		  	if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,(uint8_t*)TxData,&TxMailbox)!=HAL_OK){
 8004650:	4628      	mov	r0, r5
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <Can_Tx+0x84>)
 8004654:	f7fc ff4f 	bl	80014f6 <HAL_CAN_AddTxMessage>
		  	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3);
 8004658:	4628      	mov	r0, r5
 800465a:	f7fc ff99 	bl	8001590 <HAL_CAN_GetTxMailboxesFreeLevel>
 800465e:	2803      	cmp	r0, #3
 8004660:	d1fa      	bne.n	8004658 <Can_Tx+0x48>
		  	HAL_UART_Transmit(&huart2,(uint8_t*)"Transmitted\r\n",12,10);
 8004662:	230a      	movs	r3, #10
 8004664:	220c      	movs	r2, #12
 8004666:	490c      	ldr	r1, [pc, #48]	; (8004698 <Can_Tx+0x88>)
 8004668:	480c      	ldr	r0, [pc, #48]	; (800469c <Can_Tx+0x8c>)
 800466a:	f7fe f80b 	bl	8002684 <HAL_UART_Transmit>
		  	vTaskDelayUntil( &xLastWakeTime, xPeriod);
 800466e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004672:	a801      	add	r0, sp, #4
 8004674:	f7ff fb4e 	bl	8003d14 <vTaskDelayUntil>
		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8004678:	e7d1      	b.n	800461e <Can_Tx+0xe>
 800467a:	bf00      	nop
 800467c:	40020c00 	.word	0x40020c00
 8004680:	20004bfc 	.word	0x20004bfc
 8004684:	20004bd4 	.word	0x20004bd4
 8004688:	20004a19 	.word	0x20004a19
 800468c:	20004b78 	.word	0x20004b78
 8004690:	20004b08 	.word	0x20004b08
 8004694:	20004b8c 	.word	0x20004b8c
 8004698:	08004f3a 	.word	0x08004f3a
 800469c:	20004b94 	.word	0x20004b94

080046a0 <Temperature>:
{
 80046a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	xLastWakeTime = xTaskGetTickCount();
 80046a2:	f7ff fa2d 	bl	8003b00 <xTaskGetTickCount>
	  	    temp = (adcval1/12.4);
 80046a6:	a71f      	add	r7, pc, #124	; (adr r7, 8004724 <Temperature+0x84>)
 80046a8:	e9d7 6700 	ldrd	r6, r7, [r7]
	  {		HAL_ADC_Start_DMA (&hadc1, &adcval1, 1);
 80046ac:	4d16      	ldr	r5, [pc, #88]	; (8004708 <Temperature+0x68>)
 80046ae:	4c17      	ldr	r4, [pc, #92]	; (800470c <Temperature+0x6c>)
	xLastWakeTime = xTaskGetTickCount();
 80046b0:	9001      	str	r0, [sp, #4]
	  {		HAL_ADC_Start_DMA (&hadc1, &adcval1, 1);
 80046b2:	2201      	movs	r2, #1
 80046b4:	4914      	ldr	r1, [pc, #80]	; (8004708 <Temperature+0x68>)
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7fc fbe2 	bl	8000e80 <HAL_ADC_Start_DMA>
	  	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80046bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046c0:	4813      	ldr	r0, [pc, #76]	; (8004710 <Temperature+0x70>)
 80046c2:	f7fd fa40 	bl	8001b46 <HAL_GPIO_TogglePin>
	  	    HAL_Delay(100);
 80046c6:	2064      	movs	r0, #100	; 0x64
 80046c8:	f7fc fb20 	bl	8000d0c <HAL_Delay>
	  	    adcval1 = HAL_ADC_GetValue(&hadc1);
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7fc fc6b 	bl	8000fa8 <HAL_ADC_GetValue>
 80046d2:	6028      	str	r0, [r5, #0]
	  	    temp = (adcval1/12.4);
 80046d4:	f7fb febe 	bl	8000454 <__aeabi_ui2d>
 80046d8:	4632      	mov	r2, r6
 80046da:	463b      	mov	r3, r7
 80046dc:	f7fc f85a 	bl	8000794 <__aeabi_ddiv>
 80046e0:	f7fc f940 	bl	8000964 <__aeabi_d2uiz>
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <Temperature+0x74>)
		                   HAL_UART_Transmit(&huart2,(uint8_t*)"In Temp\r\n",8,10);
 80046e6:	490c      	ldr	r1, [pc, #48]	; (8004718 <Temperature+0x78>)
	  	    temp = (adcval1/12.4);
 80046e8:	b2c0      	uxtb	r0, r0
 80046ea:	7018      	strb	r0, [r3, #0]
		    TxData[0]=temp;
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <Temperature+0x7c>)
		                   HAL_UART_Transmit(&huart2,(uint8_t*)"In Temp\r\n",8,10);
 80046ee:	2208      	movs	r2, #8
		    TxData[0]=temp;
 80046f0:	7018      	strb	r0, [r3, #0]
		                   HAL_UART_Transmit(&huart2,(uint8_t*)"In Temp\r\n",8,10);
 80046f2:	230a      	movs	r3, #10
 80046f4:	480a      	ldr	r0, [pc, #40]	; (8004720 <Temperature+0x80>)
 80046f6:	f7fd ffc5 	bl	8002684 <HAL_UART_Transmit>
		    vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80046fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80046fe:	a801      	add	r0, sp, #4
 8004700:	f7ff fb08 	bl	8003d14 <vTaskDelayUntil>
 8004704:	e7d5      	b.n	80046b2 <Temperature+0x12>
 8004706:	bf00      	nop
 8004708:	20004b88 	.word	0x20004b88
 800470c:	20004a5c 	.word	0x20004a5c
 8004710:	40020c00 	.word	0x40020c00
 8004714:	20004a19 	.word	0x20004a19
 8004718:	08004fac 	.word	0x08004fac
 800471c:	20004b78 	.word	0x20004b78
 8004720:	20004b94 	.word	0x20004b94
 8004724:	cccccccd 	.word	0xcccccccd
 8004728:	4028cccc 	.word	0x4028cccc

0800472c <SystemClock_Config>:
{
 800472c:	b530      	push	{r4, r5, lr}
 800472e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004730:	2230      	movs	r2, #48	; 0x30
 8004732:	2100      	movs	r1, #0
 8004734:	a808      	add	r0, sp, #32
 8004736:	f000 fbde 	bl	8004ef6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800473a:	2100      	movs	r1, #0
 800473c:	2214      	movs	r2, #20
 800473e:	a803      	add	r0, sp, #12
 8004740:	f000 fbd9 	bl	8004ef6 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	2500      	movs	r5, #0
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <SystemClock_Config+0x90>)
 8004748:	9501      	str	r5, [sp, #4]
 800474a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <SystemClock_Config+0x94>)
 800475e:	9502      	str	r5, [sp, #8]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476e:	9302      	str	r3, [sp, #8]
 8004770:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004772:	2301      	movs	r3, #1
 8004774:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800477a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800477c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004780:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004782:	2304      	movs	r3, #4
 8004784:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004786:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004788:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 800478a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800478c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800478e:	2307      	movs	r3, #7
 8004790:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004792:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004794:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004796:	f7fd f9eb 	bl	8001b70 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800479a:	230f      	movs	r3, #15
 800479c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800479e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80047a4:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80047a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80047aa:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047ac:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047ae:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80047b0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80047b2:	f7fd fbb1 	bl	8001f18 <HAL_RCC_ClockConfig>
}
 80047b6:	b015      	add	sp, #84	; 0x54
 80047b8:	bd30      	pop	{r4, r5, pc}
 80047ba:	bf00      	nop
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40007000 	.word	0x40007000

080047c4 <main>:
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047c8:	2400      	movs	r4, #0
 80047ca:	4da3      	ldr	r5, [pc, #652]	; (8004a58 <main+0x294>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047cc:	4fa3      	ldr	r7, [pc, #652]	; (8004a5c <main+0x298>)
  HAL_Init();
 80047ce:	f7fc fa71 	bl	8000cb4 <HAL_Init>
  SystemClock_Config();
 80047d2:	f7ff ffab 	bl	800472c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d6:	2214      	movs	r2, #20
 80047d8:	2100      	movs	r1, #0
 80047da:	a809      	add	r0, sp, #36	; 0x24
 80047dc:	f000 fb8b 	bl	8004ef6 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047e0:	9402      	str	r4, [sp, #8]
 80047e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80047e4:	489e      	ldr	r0, [pc, #632]	; (8004a60 <main+0x29c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	632b      	str	r3, [r5, #48]	; 0x30
 80047ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f6:	9403      	str	r4, [sp, #12]
 80047f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	632b      	str	r3, [r5, #48]	; 0x30
 8004800:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800480a:	9404      	str	r4, [sp, #16]
 800480c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800480e:	f043 0302 	orr.w	r3, r3, #2
 8004812:	632b      	str	r3, [r5, #48]	; 0x30
 8004814:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	9304      	str	r3, [sp, #16]
 800481c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800481e:	9405      	str	r4, [sp, #20]
 8004820:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	632b      	str	r3, [r5, #48]	; 0x30
 8004828:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	9305      	str	r3, [sp, #20]
 8004830:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004832:	9406      	str	r4, [sp, #24]
 8004834:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004836:	f043 0310 	orr.w	r3, r3, #16
 800483a:	632b      	str	r3, [r5, #48]	; 0x30
 800483c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800483e:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004842:	4622      	mov	r2, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004844:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004846:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800484a:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800484c:	f04f 0802 	mov.w	r8, #2
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004850:	f7fd f974 	bl	8001b3c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004854:	a909      	add	r1, sp, #36	; 0x24
 8004856:	4883      	ldr	r0, [pc, #524]	; (8004a64 <main+0x2a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004858:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800485c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004862:	f7fd f885 	bl	8001970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004866:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800486a:	a909      	add	r1, sp, #36	; 0x24
 800486c:	487c      	ldr	r0, [pc, #496]	; (8004a60 <main+0x29c>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800486e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004870:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004872:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004874:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004876:	f7fd f87b 	bl	8001970 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800487a:	a909      	add	r1, sp, #36	; 0x24
 800487c:	487a      	ldr	r0, [pc, #488]	; (8004a68 <main+0x2a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800487e:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004880:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004884:	f7fd f874 	bl	8001970 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8004888:	4622      	mov	r2, r4
 800488a:	2105      	movs	r1, #5
 800488c:	2006      	movs	r0, #6
 800488e:	f7fc fea5 	bl	80015dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004892:	2006      	movs	r0, #6
 8004894:	f7fc fed6 	bl	8001644 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004898:	9400      	str	r4, [sp, #0]
 800489a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800489c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048a0:	632b      	str	r3, [r5, #48]	; 0x30
 80048a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80048ac:	9401      	str	r4, [sp, #4]
 80048ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048b4:	632b      	str	r3, [r5, #48]	; 0x30
 80048b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 80048b8:	4d6c      	ldr	r5, [pc, #432]	; (8004a6c <main+0x2a8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80048ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80048be:	4622      	mov	r2, r4
 80048c0:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80048c2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80048c4:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80048c6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80048c8:	f7fc fe88 	bl	80015dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80048cc:	2010      	movs	r0, #16
 80048ce:	f7fc feb9 	bl	8001644 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80048d2:	4622      	mov	r2, r4
 80048d4:	2105      	movs	r1, #5
 80048d6:	2011      	movs	r0, #17
 80048d8:	f7fc fe80 	bl	80015dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80048dc:	2011      	movs	r0, #17
 80048de:	f7fc feb1 	bl	8001644 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80048e2:	4622      	mov	r2, r4
 80048e4:	2105      	movs	r1, #5
 80048e6:	2038      	movs	r0, #56	; 0x38
 80048e8:	f7fc fe78 	bl	80015dc <HAL_NVIC_SetPriority>
  ADC_ChannelConfTypeDef sConfig = {0};
 80048ec:	2710      	movs	r7, #16
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80048ee:	2038      	movs	r0, #56	; 0x38
 80048f0:	f7fc fea8 	bl	8001644 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80048f4:	463a      	mov	r2, r7
 80048f6:	4621      	mov	r1, r4
 80048f8:	a809      	add	r0, sp, #36	; 0x24
 80048fa:	f000 fafc 	bl	8004ef6 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80048fe:	4a5c      	ldr	r2, [pc, #368]	; (8004a70 <main+0x2ac>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004900:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004906:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800490a:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800490c:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <main+0x2b0>)
 800490e:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 8004910:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004912:	762e      	strb	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004914:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004918:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800491a:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800491c:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800491e:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004922:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004924:	f7fc fa06 	bl	8000d34 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004928:	a909      	add	r1, sp, #36	; 0x24
 800492a:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 800492c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.Rank = 1;
 800492e:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004930:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004932:	f7fc fc1b 	bl	800116c <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004936:	463a      	mov	r2, r7
 8004938:	4621      	mov	r1, r4
 800493a:	a809      	add	r0, sp, #36	; 0x24
 800493c:	f000 fadb 	bl	8004ef6 <memset>
  htim3.Instance = TIM3;
 8004940:	4d4d      	ldr	r5, [pc, #308]	; (8004a78 <main+0x2b4>)
 8004942:	4b4e      	ldr	r3, [pc, #312]	; (8004a7c <main+0x2b8>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004944:	60ac      	str	r4, [r5, #8]
  htim3.Init.Prescaler = 16;
 8004946:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800494a:	4628      	mov	r0, r5
  htim3.Init.Period = 100;
 800494c:	2364      	movs	r3, #100	; 0x64
 800494e:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004950:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004952:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004954:	9407      	str	r4, [sp, #28]
 8004956:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004958:	f7fd fcd4 	bl	8002304 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800495c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004960:	a909      	add	r1, sp, #36	; 0x24
 8004962:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004964:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004966:	f7fd fcf1 	bl	800234c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800496a:	a907      	add	r1, sp, #28
 800496c:	4628      	mov	r0, r5
  huart2.Instance = USART2;
 800496e:	4f44      	ldr	r7, [pc, #272]	; (8004a80 <main+0x2bc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004970:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004972:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004974:	f7fd fd7e 	bl	8002474 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 115200;
 8004978:	4942      	ldr	r1, [pc, #264]	; (8004a84 <main+0x2c0>)
  hcan1.Instance = CAN1;
 800497a:	4d43      	ldr	r5, [pc, #268]	; (8004a88 <main+0x2c4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800497c:	60bc      	str	r4, [r7, #8]
  huart2.Init.BaudRate = 115200;
 800497e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004982:	e887 000a 	stmia.w	r7, {r1, r3}
  huart2.Init.StopBits = UART_STOPBITS_2;
 8004986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800498a:	60fb      	str	r3, [r7, #12]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800498c:	4638      	mov	r0, r7
  huart2.Init.Mode = UART_MODE_TX_RX;
 800498e:	230c      	movs	r3, #12
 8004990:	617b      	str	r3, [r7, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004992:	613c      	str	r4, [r7, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004994:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004996:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004998:	f7fd fe46 	bl	8002628 <HAL_UART_Init>
  hcan1.Init.Prescaler = 126;
 800499c:	483b      	ldr	r0, [pc, #236]	; (8004a8c <main+0x2c8>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800499e:	60ac      	str	r4, [r5, #8]
  hcan1.Init.Prescaler = 126;
 80049a0:	237e      	movs	r3, #126	; 0x7e
 80049a2:	e885 0009 	stmia.w	r5, {r0, r3}
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80049a6:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 80049aa:	612b      	str	r3, [r5, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80049ac:	4628      	mov	r0, r5
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80049ae:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80049b2:	616b      	str	r3, [r5, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80049b4:	60ec      	str	r4, [r5, #12]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80049b6:	762c      	strb	r4, [r5, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80049b8:	766c      	strb	r4, [r5, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80049ba:	76ac      	strb	r4, [r5, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80049bc:	76ec      	strb	r4, [r5, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80049be:	772c      	strb	r4, [r5, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80049c0:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80049c2:	f7fc fc6a 	bl	800129a <HAL_CAN_Init>
  sFilterConfig.FilterBank = 0;
 80049c6:	4932      	ldr	r1, [pc, #200]	; (8004a90 <main+0x2cc>)
               sFilterConfig.SlaveStartFilterBank = 14;
 80049c8:	230e      	movs	r3, #14
  				if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80049ca:	4628      	mov	r0, r5
               sFilterConfig.SlaveStartFilterBank = 14;
 80049cc:	624b      	str	r3, [r1, #36]	; 0x24
  sFilterConfig.FilterBank = 0;
 80049ce:	614c      	str	r4, [r1, #20]
               sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80049d0:	618c      	str	r4, [r1, #24]
               sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80049d2:	61ce      	str	r6, [r1, #28]
               sFilterConfig.FilterIdHigh = 0x0000;
 80049d4:	600c      	str	r4, [r1, #0]
               sFilterConfig.FilterIdLow = 0x0000;
 80049d6:	604c      	str	r4, [r1, #4]
               sFilterConfig.FilterMaskIdHigh = 0x0000;
 80049d8:	608c      	str	r4, [r1, #8]
               sFilterConfig.FilterMaskIdLow = 0x0000;
 80049da:	60cc      	str	r4, [r1, #12]
               sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80049dc:	610c      	str	r4, [r1, #16]
               sFilterConfig.FilterActivation = ENABLE;
 80049de:	620e      	str	r6, [r1, #32]
  				if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80049e0:	f7fc fcd6 	bl	8001390 <HAL_CAN_ConfigFilter>
  						 if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 80049e4:	4628      	mov	r0, r5
 80049e6:	f7fc fd5b 	bl	80014a0 <HAL_CAN_Start>
  HAL_UART_Transmit(&huart2,(uint8_t*)"Real Time Accident Alert System\r\n",32,10);
 80049ea:	230a      	movs	r3, #10
 80049ec:	2220      	movs	r2, #32
 80049ee:	4929      	ldr	r1, [pc, #164]	; (8004a94 <main+0x2d0>)
 80049f0:	4638      	mov	r0, r7
 80049f2:	f7fd fe47 	bl	8002684 <HAL_UART_Transmit>
  osKernelInitialize();
 80049f6:	f7fd feaf 	bl	8002758 <osKernelInitialize>
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80049fa:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <main+0x2d4>)
 80049fc:	4631      	mov	r1, r6
 80049fe:	4630      	mov	r0, r6
 8004a00:	f7fd ff86 	bl	8002910 <osSemaphoreNew>
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <main+0x2d8>)
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 8004a06:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <main+0x2dc>)
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8004a08:	6018      	str	r0, [r3, #0]
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	f7fd ff7f 	bl	8002910 <osSemaphoreNew>
 8004a12:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <main+0x2e0>)
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8004a14:	4622      	mov	r2, r4
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 8004a16:	6018      	str	r0, [r3, #0]
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8004a18:	4631      	mov	r1, r6
 8004a1a:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <main+0x2e4>)
 8004a1c:	4823      	ldr	r0, [pc, #140]	; (8004aac <main+0x2e8>)
 8004a1e:	f7fd ff37 	bl	8002890 <osTimerNew>
 8004a22:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <main+0x2ec>)
  IR_EXT1Handle = osThreadNew(IR_EXT1, NULL, &IR_EXT1_attributes);
 8004a24:	4a23      	ldr	r2, [pc, #140]	; (8004ab4 <main+0x2f0>)
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8004a26:	6018      	str	r0, [r3, #0]
  IR_EXT1Handle = osThreadNew(IR_EXT1, NULL, &IR_EXT1_attributes);
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4823      	ldr	r0, [pc, #140]	; (8004ab8 <main+0x2f4>)
 8004a2c:	f7fd fed0 	bl	80027d0 <osThreadNew>
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <main+0x2f8>)
  Can_TxHandle = osThreadNew(Can_Tx, NULL, &Can_Tx_attributes);
 8004a32:	4a23      	ldr	r2, [pc, #140]	; (8004ac0 <main+0x2fc>)
  IR_EXT1Handle = osThreadNew(IR_EXT1, NULL, &IR_EXT1_attributes);
 8004a34:	6018      	str	r0, [r3, #0]
  Can_TxHandle = osThreadNew(Can_Tx, NULL, &Can_Tx_attributes);
 8004a36:	4621      	mov	r1, r4
 8004a38:	4822      	ldr	r0, [pc, #136]	; (8004ac4 <main+0x300>)
 8004a3a:	f7fd fec9 	bl	80027d0 <osThreadNew>
 8004a3e:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <main+0x304>)
  TemperatureHandle = osThreadNew(Temperature, NULL, &Temperature_attributes);
 8004a40:	4a22      	ldr	r2, [pc, #136]	; (8004acc <main+0x308>)
  Can_TxHandle = osThreadNew(Can_Tx, NULL, &Can_Tx_attributes);
 8004a42:	6018      	str	r0, [r3, #0]
  TemperatureHandle = osThreadNew(Temperature, NULL, &Temperature_attributes);
 8004a44:	4621      	mov	r1, r4
 8004a46:	4822      	ldr	r0, [pc, #136]	; (8004ad0 <main+0x30c>)
 8004a48:	f7fd fec2 	bl	80027d0 <osThreadNew>
 8004a4c:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <main+0x310>)
 8004a4e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004a50:	f7fd fe9e 	bl	8002790 <osKernelStart>
 8004a54:	e7fe      	b.n	8004a54 <main+0x290>
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	10110000 	.word	0x10110000
 8004a60:	40020c00 	.word	0x40020c00
 8004a64:	40020400 	.word	0x40020400
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	20004a5c 	.word	0x20004a5c
 8004a70:	40012000 	.word	0x40012000
 8004a74:	0f000001 	.word	0x0f000001
 8004a78:	20004a1c 	.word	0x20004a1c
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	20004b94 	.word	0x20004b94
 8004a84:	40004400 	.word	0x40004400
 8004a88:	20004bd4 	.word	0x20004bd4
 8004a8c:	40006400 	.word	0x40006400
 8004a90:	20004978 	.word	0x20004978
 8004a94:	08004fdc 	.word	0x08004fdc
 8004a98:	08005000 	.word	0x08005000
 8004a9c:	20004b84 	.word	0x20004b84
 8004aa0:	08005010 	.word	0x08005010
 8004aa4:	20004b74 	.word	0x20004b74
 8004aa8:	08005020 	.word	0x08005020
 8004aac:	0800453f 	.word	0x0800453f
 8004ab0:	20004b80 	.word	0x20004b80
 8004ab4:	08004f88 	.word	0x08004f88
 8004ab8:	08004541 	.word	0x08004541
 8004abc:	20004c34 	.word	0x20004c34
 8004ac0:	08004f48 	.word	0x08004f48
 8004ac4:	08004611 	.word	0x08004611
 8004ac8:	20004b0c 	.word	0x20004b0c
 8004acc:	08004fb8 	.word	0x08004fb8
 8004ad0:	080046a1 	.word	0x080046a1
 8004ad4:	20004aa4 	.word	0x20004aa4

08004ad8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004ad8:	6802      	ldr	r2, [r0, #0]
 8004ada:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004ae0:	f7fc b902 	b.w	8000ce8 <HAL_IncTick>
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40010000 	.word	0x40010000

08004aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004af0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <HAL_MspInit+0x40>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	9200      	str	r2, [sp, #0]
 8004af8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004afa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004afe:	6459      	str	r1, [r3, #68]	; 0x44
 8004b00:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004b02:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004b06:	9100      	str	r1, [sp, #0]
 8004b08:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	9201      	str	r2, [sp, #4]
 8004b0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b0e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004b12:	6419      	str	r1, [r3, #64]	; 0x40
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b1c:	210f      	movs	r1, #15
 8004b1e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b24:	f7fc fd5a 	bl	80015dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b28:	b003      	add	sp, #12
 8004b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800

08004b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	4606      	mov	r6, r0
 8004b38:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3a:	2214      	movs	r2, #20
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	a803      	add	r0, sp, #12
 8004b40:	f000 f9d9 	bl	8004ef6 <memset>
  if(hadc->Instance==ADC1)
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	4b23      	ldr	r3, [pc, #140]	; (8004bd4 <HAL_ADC_MspInit+0xa0>)
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d140      	bne.n	8004bce <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b4c:	2500      	movs	r5, #0
 8004b4e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b52:	9501      	str	r5, [sp, #4]
 8004b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b56:	4820      	ldr	r0, [pc, #128]	; (8004bd8 <HAL_ADC_MspInit+0xa4>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004b58:	4c20      	ldr	r4, [pc, #128]	; (8004bdc <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44
 8004b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b62:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004b66:	9201      	str	r2, [sp, #4]
 8004b68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6a:	9502      	str	r5, [sp, #8]
 8004b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	9302      	str	r3, [sp, #8]
 8004b7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b82:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b84:	2303      	movs	r3, #3
 8004b86:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b88:	f7fc fef2 	bl	8001970 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_ADC_MspInit+0xac>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b8e:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004b90:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b98:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b9e:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004ba0:	4620      	mov	r0, r4
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ba6:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ba8:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004baa:	61e5      	str	r5, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004bac:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bae:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004bb0:	f7fc fd6c 	bl	800168c <HAL_DMA_Init>
 8004bb4:	b108      	cbz	r0, 8004bba <HAL_ADC_MspInit+0x86>
    {
      Error_Handler();
 8004bb6:	f7ff ff99 	bl	8004aec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004bba:	63b4      	str	r4, [r6, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8004bbc:	2012      	movs	r0, #18
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2105      	movs	r1, #5
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004bc2:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8004bc4:	f7fc fd0a 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004bc8:	2012      	movs	r0, #18
 8004bca:	f7fc fd3b 	bl	8001644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004bce:	b008      	add	sp, #32
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40012000 	.word	0x40012000
 8004bd8:	40020000 	.word	0x40020000
 8004bdc:	20004b10 	.word	0x20004b10
 8004be0:	40026410 	.word	0x40026410

08004be4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4604      	mov	r4, r0
 8004be8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bea:	2214      	movs	r2, #20
 8004bec:	2100      	movs	r1, #0
 8004bee:	a803      	add	r0, sp, #12
 8004bf0:	f000 f981 	bl	8004ef6 <memset>
  if(hcan->Instance==CAN1)
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <HAL_CAN_MspInit+0x60>)
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d121      	bne.n	8004c40 <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004bfc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c00:	2100      	movs	r1, #0
 8004c02:	9101      	str	r1, [sp, #4]
 8004c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c06:	4810      	ldr	r0, [pc, #64]	; (8004c48 <HAL_CAN_MspInit+0x64>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004c08:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c10:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004c14:	9201      	str	r2, [sp, #4]
 8004c16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c18:	9102      	str	r1, [sp, #8]
 8004c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1c:	f042 0208 	orr.w	r2, r2, #8
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	9302      	str	r3, [sp, #8]
 8004c2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c30:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c32:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c34:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c36:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c38:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c3c:	f7fc fe98 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004c40:	b008      	add	sp, #32
 8004c42:	bd10      	pop	{r4, pc}
 8004c44:	40006400 	.word	0x40006400
 8004c48:	40020c00 	.word	0x40020c00

08004c4c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8004c4c:	6802      	ldr	r2, [r0, #0]
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <HAL_TIM_Base_MspInit+0x28>)
 8004c50:	429a      	cmp	r2, r3
{
 8004c52:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8004c54:	d10b      	bne.n	8004c6e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_TIM_Base_MspInit+0x2c>)
 8004c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c5e:	f042 0202 	orr.w	r2, r2, #2
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004c6e:	b002      	add	sp, #8
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40023800 	.word	0x40023800

08004c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4606      	mov	r6, r0
 8004c80:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c82:	2214      	movs	r2, #20
 8004c84:	2100      	movs	r1, #0
 8004c86:	a803      	add	r0, sp, #12
 8004c88:	f000 f935 	bl	8004ef6 <memset>
  if(huart->Instance==USART2)
 8004c8c:	6832      	ldr	r2, [r6, #0]
 8004c8e:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <HAL_UART_MspInit+0xc8>)
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d154      	bne.n	8004d3e <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c94:	2500      	movs	r5, #0
 8004c96:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004c9a:	9501      	str	r5, [sp, #4]
 8004c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9e:	482a      	ldr	r0, [pc, #168]	; (8004d48 <HAL_UART_MspInit+0xcc>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004ca0:	4c2a      	ldr	r4, [pc, #168]	; (8004d4c <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ca2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004caa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004cae:	9201      	str	r2, [sp, #4]
 8004cb0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb2:	9502      	str	r5, [sp, #8]
 8004cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cd4:	2307      	movs	r3, #7
 8004cd6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd8:	f7fc fe4a 	bl	8001970 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <HAL_UART_MspInit+0xd4>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cde:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004ce0:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8004ce4:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004ce8:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cee:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cf0:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cf2:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cf4:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004cf6:	61e5      	str	r5, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cf8:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cfa:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004cfc:	f7fc fcc6 	bl	800168c <HAL_DMA_Init>
 8004d00:	b108      	cbz	r0, 8004d06 <HAL_UART_MspInit+0x8a>
    {
      Error_Handler();
 8004d02:	f7ff fef3 	bl	8004aec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004d06:	6374      	str	r4, [r6, #52]	; 0x34

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <HAL_UART_MspInit+0xd8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004d0a:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004d0c:	4c12      	ldr	r4, [pc, #72]	; (8004d58 <HAL_UART_MspInit+0xdc>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d0e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8004d12:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8004d16:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d1e:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d20:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d22:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d24:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d26:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d28:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d2a:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d2c:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d2e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d30:	f7fc fcac 	bl	800168c <HAL_DMA_Init>
 8004d34:	b108      	cbz	r0, 8004d3a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8004d36:	f7ff fed9 	bl	8004aec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d3a:	6334      	str	r4, [r6, #48]	; 0x30
 8004d3c:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d3e:	b008      	add	sp, #32
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
 8004d42:	bf00      	nop
 8004d44:	40004400 	.word	0x40004400
 8004d48:	40020000 	.word	0x40020000
 8004d4c:	200049a0 	.word	0x200049a0
 8004d50:	40026088 	.word	0x40026088
 8004d54:	400260a0 	.word	0x400260a0
 8004d58:	20004aa8 	.word	0x20004aa8

08004d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d5c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004d5e:	4601      	mov	r1, r0
{
 8004d60:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004d62:	2200      	movs	r2, #0
 8004d64:	2019      	movs	r0, #25
 8004d66:	f7fc fc39 	bl	80015dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004d6a:	2019      	movs	r0, #25
 8004d6c:	f7fc fc6a 	bl	8001644 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004d70:	2500      	movs	r5, #0
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <HAL_InitTick+0x6c>)
 8004d74:	9502      	str	r5, [sp, #8]
 8004d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004d78:	4c14      	ldr	r4, [pc, #80]	; (8004dcc <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	645a      	str	r2, [r3, #68]	; 0x44
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d88:	a901      	add	r1, sp, #4
 8004d8a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004d8c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d8e:	f7fd f97f 	bl	8002090 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004d92:	f7fd f96d 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <HAL_InitTick+0x74>)
 8004d98:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004d9a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004d9e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004da0:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <HAL_InitTick+0x78>)
 8004da4:	fbb0 f0f3 	udiv	r0, r0, r3
 8004da8:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8004daa:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004dac:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8004dae:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004db0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004db2:	f7fd faa7 	bl	8002304 <HAL_TIM_Base_Init>
 8004db6:	b920      	cbnz	r0, 8004dc2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004db8:	4620      	mov	r0, r4
 8004dba:	f7fd f987 	bl	80020cc <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8004dbe:	b009      	add	sp, #36	; 0x24
 8004dc0:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	e7fb      	b.n	8004dbe <HAL_InitTick+0x62>
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	20004c38 	.word	0x20004c38
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	000f4240 	.word	0x000f4240

08004dd8 <NMI_Handler>:
 8004dd8:	4770      	bx	lr

08004dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dda:	e7fe      	b.n	8004dda <HardFault_Handler>

08004ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ddc:	e7fe      	b.n	8004ddc <MemManage_Handler>

08004dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dde:	e7fe      	b.n	8004dde <BusFault_Handler>

08004de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004de0:	e7fe      	b.n	8004de0 <UsageFault_Handler>

08004de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004de2:	4770      	bx	lr

08004de4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004de4:	2001      	movs	r0, #1
 8004de6:	f7fc beb7 	b.w	8001b58 <HAL_GPIO_EXTI_IRQHandler>
	...

08004dec <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004dec:	4801      	ldr	r0, [pc, #4]	; (8004df4 <DMA1_Stream5_IRQHandler+0x8>)
 8004dee:	f7fc bd05 	b.w	80017fc <HAL_DMA_IRQHandler>
 8004df2:	bf00      	nop
 8004df4:	200049a0 	.word	0x200049a0

08004df8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <DMA1_Stream6_IRQHandler+0x8>)
 8004dfa:	f7fc bcff 	b.w	80017fc <HAL_DMA_IRQHandler>
 8004dfe:	bf00      	nop
 8004e00:	20004aa8 	.word	0x20004aa8

08004e04 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <ADC_IRQHandler+0x8>)
 8004e06:	f7fc b8db 	b.w	8000fc0 <HAL_ADC_IRQHandler>
 8004e0a:	bf00      	nop
 8004e0c:	20004a5c 	.word	0x20004a5c

08004e10 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8004e12:	f7fd b96f 	b.w	80020f4 <HAL_TIM_IRQHandler>
 8004e16:	bf00      	nop
 8004e18:	20004c38 	.word	0x20004c38

08004e1c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <DMA2_Stream0_IRQHandler+0x8>)
 8004e1e:	f7fc bced 	b.w	80017fc <HAL_DMA_IRQHandler>
 8004e22:	bf00      	nop
 8004e24:	20004b10 	.word	0x20004b10

08004e28 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <SystemInit+0x18>)
 8004e2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e2e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e4a:	e003      	b.n	8004e54 <LoopCopyDataInit>

08004e4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e52:	3104      	adds	r1, #4

08004e54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e54:	480b      	ldr	r0, [pc, #44]	; (8004e84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e5c:	d3f6      	bcc.n	8004e4c <CopyDataInit>
  ldr  r2, =_sbss
 8004e5e:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e60:	e002      	b.n	8004e68 <LoopFillZerobss>

08004e62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e64:	f842 3b04 	str.w	r3, [r2], #4

08004e68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e6c:	d3f9      	bcc.n	8004e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e6e:	f7ff ffdb 	bl	8004e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e72:	f000 f811 	bl	8004e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e76:	f7ff fca5 	bl	80047c4 <main>
  bx  lr    
 8004e7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004e80:	0800509c 	.word	0x0800509c
  ldr  r0, =_sdata
 8004e84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e88:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8004e8c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8004e90:	20004c78 	.word	0x20004c78

08004e94 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e94:	e7fe      	b.n	8004e94 <CAN1_RX0_IRQHandler>
	...

08004e98 <__libc_init_array>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	4e0d      	ldr	r6, [pc, #52]	; (8004ed0 <__libc_init_array+0x38>)
 8004e9c:	4c0d      	ldr	r4, [pc, #52]	; (8004ed4 <__libc_init_array+0x3c>)
 8004e9e:	1ba4      	subs	r4, r4, r6
 8004ea0:	10a4      	asrs	r4, r4, #2
 8004ea2:	2500      	movs	r5, #0
 8004ea4:	42a5      	cmp	r5, r4
 8004ea6:	d109      	bne.n	8004ebc <__libc_init_array+0x24>
 8004ea8:	4e0b      	ldr	r6, [pc, #44]	; (8004ed8 <__libc_init_array+0x40>)
 8004eaa:	4c0c      	ldr	r4, [pc, #48]	; (8004edc <__libc_init_array+0x44>)
 8004eac:	f000 f82c 	bl	8004f08 <_init>
 8004eb0:	1ba4      	subs	r4, r4, r6
 8004eb2:	10a4      	asrs	r4, r4, #2
 8004eb4:	2500      	movs	r5, #0
 8004eb6:	42a5      	cmp	r5, r4
 8004eb8:	d105      	bne.n	8004ec6 <__libc_init_array+0x2e>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ec0:	4798      	blx	r3
 8004ec2:	3501      	adds	r5, #1
 8004ec4:	e7ee      	b.n	8004ea4 <__libc_init_array+0xc>
 8004ec6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eca:	4798      	blx	r3
 8004ecc:	3501      	adds	r5, #1
 8004ece:	e7f2      	b.n	8004eb6 <__libc_init_array+0x1e>
 8004ed0:	08005094 	.word	0x08005094
 8004ed4:	08005094 	.word	0x08005094
 8004ed8:	08005094 	.word	0x08005094
 8004edc:	08005098 	.word	0x08005098

08004ee0 <memcpy>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	1e43      	subs	r3, r0, #1
 8004ee4:	440a      	add	r2, r1
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	d100      	bne.n	8004eec <memcpy+0xc>
 8004eea:	bd10      	pop	{r4, pc}
 8004eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ef4:	e7f7      	b.n	8004ee6 <memcpy+0x6>

08004ef6 <memset>:
 8004ef6:	4402      	add	r2, r0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d100      	bne.n	8004f00 <memset+0xa>
 8004efe:	4770      	bx	lr
 8004f00:	f803 1b01 	strb.w	r1, [r3], #1
 8004f04:	e7f9      	b.n	8004efa <memset+0x4>
	...

08004f08 <_init>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr

08004f14 <_fini>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr
