
combi2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800567c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          00004d00  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004d74  20004d74  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002265c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000041d8  00000000  00000000  00042700  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f70f  00000000  00000000  000468d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001378  00000000  00000000  00055fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e0  00000000  00000000  00057360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a236  00000000  00000000  00058c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007cef  00000000  00000000  00062e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006ab65  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003dd4  00000000  00000000  0006abe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005538 	.word	0x08005538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005538 	.word	0x08005538

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x30>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800059a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 faef 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f004 fab2 	bl	8004b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f004 f91e 	bl	80047f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005bc:	2000      	movs	r0, #0
 80005be:	bd08      	pop	{r3, pc}
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x10>)
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_IncTick+0x14>)
 80005c8:	6811      	ldr	r1, [r2, #0]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	440b      	add	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200049a0 	.word	0x200049a0
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <HAL_GetTick+0x8>)
 80005de:	6818      	ldr	r0, [r3, #0]
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200049a0 	.word	0x200049a0

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
 80005ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff fff6 	bl	80005dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005f2:	bf1c      	itt	ne
 80005f4:	4b05      	ldrne	r3, [pc, #20]	; (800060c <HAL_Delay+0x24>)
 80005f6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005f8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005fa:	bf18      	it	ne
 80005fc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005fe:	f7ff ffed 	bl	80005dc <HAL_GetTick>
 8000602:	1b40      	subs	r0, r0, r5
 8000604:	4284      	cmp	r4, r0
 8000606:	d8fa      	bhi.n	80005fe <HAL_Delay+0x16>
  {
  }
}
 8000608:	bd38      	pop	{r3, r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000

08000610 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000610:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000612:	4604      	mov	r4, r0
 8000614:	2800      	cmp	r0, #0
 8000616:	d06e      	beq.n	80006f6 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000618:	f890 3020 	ldrb.w	r3, [r0, #32]
 800061c:	b90b      	cbnz	r3, 8000622 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800061e:	f004 f90d 	bl	800483c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000622:	6822      	ldr	r2, [r4, #0]
 8000624:	6813      	ldr	r3, [r2, #0]
 8000626:	f023 0302 	bic.w	r3, r3, #2
 800062a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800062c:	f7ff ffd6 	bl	80005dc <HAL_GetTick>
 8000630:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	0791      	lsls	r1, r2, #30
 8000638:	d451      	bmi.n	80006de <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	f042 0201 	orr.w	r2, r2, #1
 8000640:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000642:	f7ff ffcb 	bl	80005dc <HAL_GetTick>
 8000646:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000648:	6823      	ldr	r3, [r4, #0]
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	07d2      	lsls	r2, r2, #31
 800064e:	d554      	bpl.n	80006fa <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000650:	7e22      	ldrb	r2, [r4, #24]
 8000652:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	bf0c      	ite	eq
 8000658:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800065c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000662:	7e62      	ldrb	r2, [r4, #25]
 8000664:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	bf0c      	ite	eq
 800066a:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800066e:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000674:	7ea2      	ldrb	r2, [r4, #26]
 8000676:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	bf0c      	ite	eq
 800067c:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000680:	f022 0220 	bicne.w	r2, r2, #32
 8000684:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000686:	7ee2      	ldrb	r2, [r4, #27]
 8000688:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	bf0c      	ite	eq
 800068e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000692:	f042 0210 	orrne.w	r2, r2, #16
 8000696:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000698:	7f22      	ldrb	r2, [r4, #28]
 800069a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	bf0c      	ite	eq
 80006a0:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006a4:	f022 0208 	bicne.w	r2, r2, #8
 80006a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80006aa:	7f62      	ldrb	r2, [r4, #29]
 80006ac:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	bf0c      	ite	eq
 80006b2:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006b6:	f022 0204 	bicne.w	r2, r2, #4
 80006ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80006bc:	68e1      	ldr	r1, [r4, #12]
 80006be:	68a2      	ldr	r2, [r4, #8]
 80006c0:	430a      	orrs	r2, r1
 80006c2:	6921      	ldr	r1, [r4, #16]
 80006c4:	430a      	orrs	r2, r1
 80006c6:	6961      	ldr	r1, [r4, #20]
 80006c8:	430a      	orrs	r2, r1
 80006ca:	6861      	ldr	r1, [r4, #4]
 80006cc:	3901      	subs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006d2:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80006d4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006d6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80006d8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80006dc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006de:	f7ff ff7d 	bl	80005dc <HAL_GetTick>
 80006e2:	1b40      	subs	r0, r0, r5
 80006e4:	280a      	cmp	r0, #10
 80006e6:	d9a4      	bls.n	8000632 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ee:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80006f0:	2305      	movs	r3, #5
 80006f2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80006f6:	2001      	movs	r0, #1
}
 80006f8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006fa:	f7ff ff6f 	bl	80005dc <HAL_GetTick>
 80006fe:	1b40      	subs	r0, r0, r5
 8000700:	280a      	cmp	r0, #10
 8000702:	d9a1      	bls.n	8000648 <HAL_CAN_Init+0x38>
 8000704:	e7f0      	b.n	80006e8 <HAL_CAN_Init+0xd8>
	...

08000708 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000708:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800070c:	3b01      	subs	r3, #1
 800070e:	2b01      	cmp	r3, #1
{
 8000710:	b530      	push	{r4, r5, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 8000712:	d879      	bhi.n	8000808 <HAL_CAN_ConfigFilter+0x100>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000714:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <HAL_CAN_ConfigFilter+0x10c>)
 8000716:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800071a:	f042 0201 	orr.w	r2, r2, #1
 800071e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000722:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000726:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800072a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800072e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000732:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000734:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000738:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800073c:	6948      	ldr	r0, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800073e:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000742:	f000 021f 	and.w	r2, r0, #31
 8000746:	2401      	movs	r4, #1
 8000748:	4094      	lsls	r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800074a:	43e2      	mvns	r2, r4
 800074c:	4015      	ands	r5, r2
 800074e:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000752:	69cd      	ldr	r5, [r1, #28]
 8000754:	2d00      	cmp	r5, #0
 8000756:	d136      	bne.n	80007c6 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000758:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 800075c:	4015      	ands	r5, r2
 800075e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 8000762:	00c0      	lsls	r0, r0, #3

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000764:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000766:	888b      	ldrh	r3, [r1, #4]
 8000768:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800076c:	f500 40c8 	add.w	r0, r0, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000770:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000774:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000778:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800077a:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800077c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000780:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000784:	6988      	ldr	r0, [r1, #24]
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <HAL_CAN_ConfigFilter+0x10c>)
 8000788:	2800      	cmp	r0, #0
 800078a:	d135      	bne.n	80007f8 <HAL_CAN_ConfigFilter+0xf0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800078c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000790:	4010      	ands	r0, r2
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000792:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000796:	6908      	ldr	r0, [r1, #16]
 8000798:	bb90      	cbnz	r0, 8000800 <HAL_CAN_ConfigFilter+0xf8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800079a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800079e:	4002      	ands	r2, r0
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80007a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80007a4:	6a0b      	ldr	r3, [r1, #32]
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <HAL_CAN_ConfigFilter+0x10c>)
 80007a8:	2b01      	cmp	r3, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80007aa:	bf02      	ittt	eq
 80007ac:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 80007b0:	4323      	orreq	r3, r4
 80007b2:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80007b6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80007c2:	2000      	movs	r0, #0
 80007c4:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80007c6:	2d01      	cmp	r5, #1
 80007c8:	d1dc      	bne.n	8000784 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80007ca:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80007ce:	4325      	orrs	r5, r4
 80007d0:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80007d4:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80007d6:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80007d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80007dc:	00c3      	lsls	r3, r0, #3
 80007de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007e2:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80007e6:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80007e8:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80007ec:	688d      	ldr	r5, [r1, #8]
 80007ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80007f2:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
 80007f6:	e7c5      	b.n	8000784 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80007f8:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80007fc:	4320      	orrs	r0, r4
 80007fe:	e7c8      	b.n	8000792 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000800:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000804:	4322      	orrs	r2, r4
 8000806:	e7cb      	b.n	80007a0 <HAL_CAN_ConfigFilter+0x98>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000808:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800080a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000810:	2001      	movs	r0, #1
  }
}
 8000812:	bd30      	pop	{r4, r5, pc}
 8000814:	40006400 	.word	0x40006400

08000818 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000818:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800081a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800081e:	2b01      	cmp	r3, #1
{
 8000820:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000822:	d11f      	bne.n	8000864 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000824:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000826:	2302      	movs	r3, #2
 8000828:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800082c:	6813      	ldr	r3, [r2, #0]
 800082e:	f023 0301 	bic.w	r3, r3, #1
 8000832:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000834:	f7ff fed2 	bl	80005dc <HAL_GetTick>
 8000838:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	6858      	ldr	r0, [r3, #4]
 800083e:	f010 0001 	ands.w	r0, r0, #1
 8000842:	d101      	bne.n	8000848 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000844:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000846:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000848:	f7ff fec8 	bl	80005dc <HAL_GetTick>
 800084c:	1b40      	subs	r0, r0, r5
 800084e:	280a      	cmp	r0, #10
 8000850:	d9f3      	bls.n	800083a <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800085a:	2305      	movs	r3, #5
 800085c:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
  }
}
 8000862:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000864:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800086a:	6243      	str	r3, [r0, #36]	; 0x24
 800086c:	e7f8      	b.n	8000860 <HAL_CAN_Start+0x48>

0800086e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800086e:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000870:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000874:	3c01      	subs	r4, #1
 8000876:	2c01      	cmp	r4, #1
 8000878:	d86b      	bhi.n	8000952 <HAL_CAN_GetRxMessage+0xe4>
 800087a:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800087c:	b941      	cbnz	r1, 8000890 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800087e:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000880:	07a4      	lsls	r4, r4, #30
 8000882:	d107      	bne.n	8000894 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000884:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800088a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800088c:	2001      	movs	r0, #1
  }
}
 800088e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000890:	6934      	ldr	r4, [r6, #16]
 8000892:	e7f5      	b.n	8000880 <HAL_CAN_GetRxMessage+0x12>
 8000894:	010c      	lsls	r4, r1, #4
 8000896:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000898:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800089c:	f007 0704 	and.w	r7, r7, #4
 80008a0:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	d14b      	bne.n	800093e <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80008a6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80008aa:	0d7f      	lsrs	r7, r7, #21
 80008ac:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80008ae:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80008b2:	f007 0702 	and.w	r7, r7, #2
 80008b6:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008b8:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80008bc:	f007 070f 	and.w	r7, r7, #15
 80008c0:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008c2:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008c6:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008ca:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008cc:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008d0:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008d2:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008d4:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008d6:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80008da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80008dc:	6802      	ldr	r2, [r0, #0]
 80008de:	4422      	add	r2, r4
 80008e0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008e4:	0a12      	lsrs	r2, r2, #8
 80008e6:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80008e8:	6802      	ldr	r2, [r0, #0]
 80008ea:	4422      	add	r2, r4
 80008ec:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008f0:	0c12      	lsrs	r2, r2, #16
 80008f2:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80008f4:	6802      	ldr	r2, [r0, #0]
 80008f6:	4422      	add	r2, r4
 80008f8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008fc:	0e12      	lsrs	r2, r2, #24
 80008fe:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000900:	6802      	ldr	r2, [r0, #0]
 8000902:	4422      	add	r2, r4
 8000904:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000908:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800090a:	6802      	ldr	r2, [r0, #0]
 800090c:	4422      	add	r2, r4
 800090e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000912:	0a12      	lsrs	r2, r2, #8
 8000914:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000916:	6802      	ldr	r2, [r0, #0]
 8000918:	4422      	add	r2, r4
 800091a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800091e:	0c12      	lsrs	r2, r2, #16
 8000920:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000922:	6802      	ldr	r2, [r0, #0]
 8000924:	4414      	add	r4, r2
 8000926:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800092a:	0e12      	lsrs	r2, r2, #24
 800092c:	71da      	strb	r2, [r3, #7]
 800092e:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000930:	b951      	cbnz	r1, 8000948 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	f042 0220 	orr.w	r2, r2, #32
 8000938:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800093a:	2000      	movs	r0, #0
 800093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800093e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000942:	08ff      	lsrs	r7, r7, #3
 8000944:	6057      	str	r7, [r2, #4]
 8000946:	e7b2      	b.n	80008ae <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000948:	691a      	ldr	r2, [r3, #16]
 800094a:	f042 0220 	orr.w	r2, r2, #32
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	e7f3      	b.n	800093a <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000952:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000958:	e797      	b.n	800088a <HAL_CAN_GetRxMessage+0x1c>

0800095a <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800095a:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800095e:	3b01      	subs	r3, #1
 8000960:	2b01      	cmp	r3, #1
 8000962:	d805      	bhi.n	8000970 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000964:	6802      	ldr	r2, [r0, #0]
 8000966:	6953      	ldr	r3, [r2, #20]
 8000968:	4319      	orrs	r1, r3
 800096a:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 800096c:	2000      	movs	r0, #0
 800096e:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000970:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000978:	2001      	movs	r0, #1
  }
}
 800097a:	4770      	bx	lr

0800097c <HAL_CAN_TxMailbox0CompleteCallback>:
 800097c:	4770      	bx	lr

0800097e <HAL_CAN_TxMailbox1CompleteCallback>:
 800097e:	4770      	bx	lr

08000980 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000980:	4770      	bx	lr

08000982 <HAL_CAN_TxMailbox0AbortCallback>:
 8000982:	4770      	bx	lr

08000984 <HAL_CAN_TxMailbox1AbortCallback>:
 8000984:	4770      	bx	lr

08000986 <HAL_CAN_TxMailbox2AbortCallback>:
 8000986:	4770      	bx	lr

08000988 <HAL_CAN_RxFifo0FullCallback>:
 8000988:	4770      	bx	lr

0800098a <HAL_CAN_RxFifo1MsgPendingCallback>:
 800098a:	4770      	bx	lr

0800098c <HAL_CAN_RxFifo1FullCallback>:
 800098c:	4770      	bx	lr

0800098e <HAL_CAN_SleepCallback>:
 800098e:	4770      	bx	lr

08000990 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000990:	4770      	bx	lr

08000992 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000992:	4770      	bx	lr

08000994 <HAL_CAN_IRQHandler>:
{
 8000994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000998:	6803      	ldr	r3, [r0, #0]
 800099a:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800099c:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80009a0:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80009a2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80009a6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80009aa:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009ae:	f016 0401 	ands.w	r4, r6, #1
{
 80009b2:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009b4:	d022      	beq.n	80009fc <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80009b6:	f017 0401 	ands.w	r4, r7, #1
 80009ba:	d007      	beq.n	80009cc <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009bc:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80009be:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009c0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80009c2:	f140 80a3 	bpl.w	8000b0c <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80009c6:	f7ff ffd9 	bl	800097c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80009ca:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009cc:	05fb      	lsls	r3, r7, #23
 80009ce:	d509      	bpl.n	80009e4 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009d0:	682b      	ldr	r3, [r5, #0]
 80009d2:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009d6:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009d8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009da:	f140 80a5 	bpl.w	8000b28 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009de:	4628      	mov	r0, r5
 80009e0:	f7ff ffcd 	bl	800097e <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009e4:	03fb      	lsls	r3, r7, #15
 80009e6:	d509      	bpl.n	80009fc <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009ee:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009f0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009f2:	f140 80a7 	bpl.w	8000b44 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80009f6:	4628      	mov	r0, r5
 80009f8:	f7ff ffc2 	bl	8000980 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80009fc:	0733      	lsls	r3, r6, #28
 80009fe:	d507      	bpl.n	8000a10 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a00:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a04:	bf1f      	itttt	ne
 8000a06:	682b      	ldrne	r3, [r5, #0]
 8000a08:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a0a:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a0e:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a10:	0777      	lsls	r7, r6, #29
 8000a12:	d508      	bpl.n	8000a26 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a14:	f01b 0f08 	tst.w	fp, #8
 8000a18:	d005      	beq.n	8000a26 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a1a:	682b      	ldr	r3, [r5, #0]
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a20:	4628      	mov	r0, r5
 8000a22:	f7ff ffb1 	bl	8000988 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a26:	07b0      	lsls	r0, r6, #30
 8000a28:	d506      	bpl.n	8000a38 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	0799      	lsls	r1, r3, #30
 8000a30:	d002      	beq.n	8000a38 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a32:	4628      	mov	r0, r5
 8000a34:	f003 fe78 	bl	8004728 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a38:	0672      	lsls	r2, r6, #25
 8000a3a:	d507      	bpl.n	8000a4c <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a3c:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a40:	bf1f      	itttt	ne
 8000a42:	682b      	ldrne	r3, [r5, #0]
 8000a44:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a46:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a4a:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a4c:	06b3      	lsls	r3, r6, #26
 8000a4e:	d508      	bpl.n	8000a62 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a50:	f01a 0f08 	tst.w	sl, #8
 8000a54:	d005      	beq.n	8000a62 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a56:	682b      	ldr	r3, [r5, #0]
 8000a58:	2208      	movs	r2, #8
 8000a5a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	f7ff ff95 	bl	800098c <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a62:	06f7      	lsls	r7, r6, #27
 8000a64:	d506      	bpl.n	8000a74 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	0798      	lsls	r0, r3, #30
 8000a6c:	d002      	beq.n	8000a74 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a6e:	4628      	mov	r0, r5
 8000a70:	f7ff ff8b 	bl	800098a <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a74:	03b1      	lsls	r1, r6, #14
 8000a76:	d508      	bpl.n	8000a8a <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a78:	f019 0f10 	tst.w	r9, #16
 8000a7c:	d005      	beq.n	8000a8a <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	2210      	movs	r2, #16
 8000a82:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000a84:	4628      	mov	r0, r5
 8000a86:	f7ff ff82 	bl	800098e <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a8a:	03f2      	lsls	r2, r6, #15
 8000a8c:	d508      	bpl.n	8000aa0 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a8e:	f019 0f08 	tst.w	r9, #8
 8000a92:	d005      	beq.n	8000aa0 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	2208      	movs	r2, #8
 8000a98:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	f7ff ff78 	bl	8000990 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000aa0:	0433      	lsls	r3, r6, #16
 8000aa2:	d52a      	bpl.n	8000afa <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000aa4:	f019 0f04 	tst.w	r9, #4
 8000aa8:	682a      	ldr	r2, [r5, #0]
 8000aaa:	d024      	beq.n	8000af6 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000aac:	05f7      	lsls	r7, r6, #23
 8000aae:	d504      	bpl.n	8000aba <HAL_CAN_IRQHandler+0x126>
 8000ab0:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ab4:	bf18      	it	ne
 8000ab6:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000aba:	05b0      	lsls	r0, r6, #22
 8000abc:	d504      	bpl.n	8000ac8 <HAL_CAN_IRQHandler+0x134>
 8000abe:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ac2:	bf18      	it	ne
 8000ac4:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ac8:	0571      	lsls	r1, r6, #21
 8000aca:	d504      	bpl.n	8000ad6 <HAL_CAN_IRQHandler+0x142>
 8000acc:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ad0:	bf18      	it	ne
 8000ad2:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ad6:	0533      	lsls	r3, r6, #20
 8000ad8:	d50d      	bpl.n	8000af6 <HAL_CAN_IRQHandler+0x162>
 8000ada:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000ade:	d00a      	beq.n	8000af6 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000ae0:	2b30      	cmp	r3, #48	; 0x30
 8000ae2:	d04c      	beq.n	8000b7e <HAL_CAN_IRQHandler+0x1ea>
 8000ae4:	d83c      	bhi.n	8000b60 <HAL_CAN_IRQHandler+0x1cc>
 8000ae6:	2b10      	cmp	r3, #16
 8000ae8:	d043      	beq.n	8000b72 <HAL_CAN_IRQHandler+0x1de>
 8000aea:	2b20      	cmp	r3, #32
 8000aec:	d044      	beq.n	8000b78 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000aee:	6993      	ldr	r3, [r2, #24]
 8000af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000af4:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000af6:	2304      	movs	r3, #4
 8000af8:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000afa:	b12c      	cbz	r4, 8000b08 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8000afc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000afe:	431c      	orrs	r4, r3
 8000b00:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000b02:	4628      	mov	r0, r5
 8000b04:	f7ff ff45 	bl	8000992 <HAL_CAN_ErrorCallback>
 8000b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b0c:	077a      	lsls	r2, r7, #29
 8000b0e:	d405      	bmi.n	8000b1c <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b10:	f017 0408 	ands.w	r4, r7, #8
 8000b14:	d105      	bne.n	8000b22 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b16:	f7ff ff34 	bl	8000982 <HAL_CAN_TxMailbox0AbortCallback>
 8000b1a:	e757      	b.n	80009cc <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b1c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000b20:	e754      	b.n	80009cc <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b22:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000b26:	e751      	b.n	80009cc <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b28:	0579      	lsls	r1, r7, #21
 8000b2a:	d502      	bpl.n	8000b32 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b2c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000b30:	e758      	b.n	80009e4 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b32:	053a      	lsls	r2, r7, #20
 8000b34:	d502      	bpl.n	8000b3c <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b36:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b3a:	e753      	b.n	80009e4 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	f7ff ff21 	bl	8000984 <HAL_CAN_TxMailbox1AbortCallback>
 8000b42:	e74f      	b.n	80009e4 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b44:	0379      	lsls	r1, r7, #13
 8000b46:	d502      	bpl.n	8000b4e <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b48:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000b4c:	e756      	b.n	80009fc <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000b4e:	033a      	lsls	r2, r7, #12
 8000b50:	d502      	bpl.n	8000b58 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b52:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000b56:	e751      	b.n	80009fc <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f7ff ff14 	bl	8000986 <HAL_CAN_TxMailbox2AbortCallback>
 8000b5e:	e74d      	b.n	80009fc <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000b60:	2b50      	cmp	r3, #80	; 0x50
 8000b62:	d00f      	beq.n	8000b84 <HAL_CAN_IRQHandler+0x1f0>
 8000b64:	2b60      	cmp	r3, #96	; 0x60
 8000b66:	d010      	beq.n	8000b8a <HAL_CAN_IRQHandler+0x1f6>
 8000b68:	2b40      	cmp	r3, #64	; 0x40
 8000b6a:	d1c0      	bne.n	8000aee <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b6c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000b70:	e7bd      	b.n	8000aee <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b72:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000b76:	e7ba      	b.n	8000aee <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b78:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000b7c:	e7b7      	b.n	8000aee <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b7e:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000b82:	e7b4      	b.n	8000aee <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b84:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000b88:	e7b1      	b.n	8000aee <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b8a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000b8e:	e7ae      	b.n	8000aee <HAL_CAN_IRQHandler+0x15a>

08000b90 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b92:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b98:	041b      	lsls	r3, r3, #16
 8000b9a:	0c1b      	lsrs	r3, r3, #16
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	0200      	lsls	r0, r0, #8
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000baa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bac:	60d3      	str	r3, [r2, #12]
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb6:	b530      	push	{r4, r5, lr}
 8000bb8:	68dc      	ldr	r4, [r3, #12]
 8000bba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	bf28      	it	cs
 8000bc8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 0501 	mov.w	r5, #1
 8000bd0:	fa05 f303 	lsl.w	r3, r5, r3
 8000bd4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd8:	bf8c      	ite	hi
 8000bda:	3c03      	subhi	r4, #3
 8000bdc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bde:	4019      	ands	r1, r3
 8000be0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be2:	fa05 f404 	lsl.w	r4, r5, r4
 8000be6:	3c01      	subs	r4, #1
 8000be8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000bea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	ea42 0201 	orr.w	r2, r2, r1
 8000bf0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	bfad      	iteet	ge
 8000bf6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	f000 000f 	andlt.w	r0, r0, #15
 8000bfe:	4b06      	ldrlt	r3, [pc, #24]	; (8000c18 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	bfb5      	itete	lt
 8000c06:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c10:	bd30      	pop	{r4, r5, pc}
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	e000ed14 	.word	0xe000ed14

08000c1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	db08      	blt.n	8000c32 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c20:	0942      	lsrs	r2, r0, #5
 8000c22:	2301      	movs	r3, #1
 8000c24:	f000 001f 	and.w	r0, r0, #31
 8000c28:	fa03 f000 	lsl.w	r0, r3, r0
 8000c2c:	4b01      	ldr	r3, [pc, #4]	; (8000c34 <HAL_NVIC_EnableIRQ+0x18>)
 8000c2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000c38:	6803      	ldr	r3, [r0, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000c40:	f023 0303 	bic.w	r3, r3, #3
 8000c44:	2118      	movs	r1, #24
 8000c46:	3a10      	subs	r2, #16
 8000c48:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000c4e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000c50:	bf88      	it	hi
 8000c52:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c54:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000c56:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c58:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000c5a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	08005550 	.word	0x08005550

08000c64 <HAL_DMA_Init>:
{
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff fcb8 	bl	80005dc <HAL_GetTick>
 8000c6c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d071      	beq.n	8000d56 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000c72:	2300      	movs	r3, #0
 8000c74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000c78:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000c80:	6813      	ldr	r3, [r2, #0]
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c88:	6821      	ldr	r1, [r4, #0]
 8000c8a:	680b      	ldr	r3, [r1, #0]
 8000c8c:	07d8      	lsls	r0, r3, #31
 8000c8e:	d43c      	bmi.n	8000d0a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000c90:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c92:	4d32      	ldr	r5, [pc, #200]	; (8000d5c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c94:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c96:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c98:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c9a:	68a3      	ldr	r3, [r4, #8]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	68e2      	ldr	r2, [r4, #12]
 8000ca0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca2:	6922      	ldr	r2, [r4, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	6962      	ldr	r2, [r4, #20]
 8000ca8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000caa:	69e2      	ldr	r2, [r4, #28]
 8000cac:	4303      	orrs	r3, r0
 8000cae:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb0:	6a22      	ldr	r2, [r4, #32]
 8000cb2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cb6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cbc:	bf01      	itttt	eq
 8000cbe:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000cc0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000cc2:	4335      	orreq	r5, r6
 8000cc4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000cc6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000cc8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cca:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ccc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000cd0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cd4:	d10b      	bne.n	8000cee <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000cd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cd8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000cda:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cdc:	b13d      	cbz	r5, 8000cee <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000cde:	b9f8      	cbnz	r0, 8000d20 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000ce0:	2a01      	cmp	r2, #1
 8000ce2:	d02d      	beq.n	8000d40 <HAL_DMA_Init+0xdc>
 8000ce4:	d301      	bcc.n	8000cea <HAL_DMA_Init+0x86>
 8000ce6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ce8:	d101      	bne.n	8000cee <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000cea:	01ea      	lsls	r2, r5, #7
 8000cec:	d42b      	bmi.n	8000d46 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000cee:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f7ff ffa1 	bl	8000c38 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cf6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000cf8:	233f      	movs	r3, #63	; 0x3f
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cfe:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000d00:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d02:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000d04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000d08:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d0a:	f7ff fc67 	bl	80005dc <HAL_GetTick>
 8000d0e:	1b40      	subs	r0, r0, r5
 8000d10:	2805      	cmp	r0, #5
 8000d12:	d9b9      	bls.n	8000c88 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d14:	2320      	movs	r3, #32
 8000d16:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d18:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000d1a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d20:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000d24:	d113      	bne.n	8000d4e <HAL_DMA_Init+0xea>
    switch (tmp)
 8000d26:	2a03      	cmp	r2, #3
 8000d28:	d8e1      	bhi.n	8000cee <HAL_DMA_Init+0x8a>
 8000d2a:	a001      	add	r0, pc, #4	; (adr r0, 8000d30 <HAL_DMA_Init+0xcc>)
 8000d2c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000d30:	08000d47 	.word	0x08000d47
 8000d34:	08000ceb 	.word	0x08000ceb
 8000d38:	08000d47 	.word	0x08000d47
 8000d3c:	08000d41 	.word	0x08000d41
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d40:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000d44:	d1d3      	bne.n	8000cee <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d46:	2340      	movs	r3, #64	; 0x40
 8000d48:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	e7e5      	b.n	8000d1a <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000d4e:	2a02      	cmp	r2, #2
 8000d50:	d9f9      	bls.n	8000d46 <HAL_DMA_Init+0xe2>
 8000d52:	2a03      	cmp	r2, #3
 8000d54:	e7c8      	b.n	8000ce8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000d56:	2001      	movs	r0, #1
 8000d58:	bd70      	pop	{r4, r5, r6, pc}
 8000d5a:	bf00      	nop
 8000d5c:	f010803f 	.word	0xf010803f

08000d60 <HAL_DMA_IRQHandler>:
{
 8000d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d66:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d68:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d6a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d6c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000d6e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d70:	2208      	movs	r2, #8
 8000d72:	409a      	lsls	r2, r3
 8000d74:	4216      	tst	r6, r2
{
 8000d76:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d78:	d00c      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000d7a:	6801      	ldr	r1, [r0, #0]
 8000d7c:	6808      	ldr	r0, [r1, #0]
 8000d7e:	0740      	lsls	r0, r0, #29
 8000d80:	d508      	bpl.n	8000d94 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000d82:	6808      	ldr	r0, [r1, #0]
 8000d84:	f020 0004 	bic.w	r0, r0, #4
 8000d88:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000d8a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000d8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d94:	2201      	movs	r2, #1
 8000d96:	409a      	lsls	r2, r3
 8000d98:	4216      	tst	r6, r2
 8000d9a:	d008      	beq.n	8000dae <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000d9c:	6821      	ldr	r1, [r4, #0]
 8000d9e:	6949      	ldr	r1, [r1, #20]
 8000da0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000da2:	bf41      	itttt	mi
 8000da4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000da6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000da8:	f042 0202 	orrmi.w	r2, r2, #2
 8000dac:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dae:	2204      	movs	r2, #4
 8000db0:	409a      	lsls	r2, r3
 8000db2:	4216      	tst	r6, r2
 8000db4:	d008      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000db6:	6821      	ldr	r1, [r4, #0]
 8000db8:	6809      	ldr	r1, [r1, #0]
 8000dba:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000dbc:	bf41      	itttt	mi
 8000dbe:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000dc0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000dc2:	f042 0204 	orrmi.w	r2, r2, #4
 8000dc6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000dc8:	2210      	movs	r2, #16
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	4216      	tst	r6, r2
 8000dce:	d010      	beq.n	8000df2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	0709      	lsls	r1, r1, #28
 8000dd6:	d50c      	bpl.n	8000df2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000dd8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	0350      	lsls	r0, r2, #13
 8000dde:	d535      	bpl.n	8000e4c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	0319      	lsls	r1, r3, #12
 8000de4:	d401      	bmi.n	8000dea <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000de8:	e000      	b.n	8000dec <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000dea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000dec:	b10b      	cbz	r3, 8000df2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000dee:	4620      	mov	r0, r4
 8000df0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000df2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000df4:	2220      	movs	r2, #32
 8000df6:	408a      	lsls	r2, r1
 8000df8:	4216      	tst	r6, r2
 8000dfa:	d038      	beq.n	8000e6e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	06c6      	lsls	r6, r0, #27
 8000e02:	d534      	bpl.n	8000e6e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000e04:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000e06:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000e0a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e0c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000e0e:	d125      	bne.n	8000e5c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e10:	f022 0216 	bic.w	r2, r2, #22
 8000e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e1c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e20:	b90a      	cbnz	r2, 8000e26 <HAL_DMA_IRQHandler+0xc6>
 8000e22:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000e24:	b11a      	cbz	r2, 8000e2e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	f022 0208 	bic.w	r2, r2, #8
 8000e2c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e2e:	233f      	movs	r3, #63	; 0x3f
 8000e30:	408b      	lsls	r3, r1
 8000e32:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000e34:	2300      	movs	r3, #0
 8000e36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000e40:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000e42:	b10b      	cbz	r3, 8000e48 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000e44:	4620      	mov	r0, r4
 8000e46:	4798      	blx	r3
}
 8000e48:	b003      	add	sp, #12
 8000e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e50:	bf5e      	ittt	pl
 8000e52:	681a      	ldrpl	r2, [r3, #0]
 8000e54:	f022 0208 	bicpl.w	r2, r2, #8
 8000e58:	601a      	strpl	r2, [r3, #0]
 8000e5a:	e7c4      	b.n	8000de6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e5c:	0350      	lsls	r0, r2, #13
 8000e5e:	d528      	bpl.n	8000eb2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	0319      	lsls	r1, r3, #12
 8000e64:	d432      	bmi.n	8000ecc <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000e66:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000e68:	b10b      	cbz	r3, 8000e6e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0e9      	beq.n	8000e48 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e76:	07da      	lsls	r2, r3, #31
 8000e78:	d519      	bpl.n	8000eae <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e7a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000e7c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e7e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000e82:	6813      	ldr	r3, [r2, #0]
 8000e84:	f023 0301 	bic.w	r3, r3, #1
 8000e88:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e8a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000e8e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	429f      	cmp	r7, r3
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	d302      	bcc.n	8000ea2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e9c:	6813      	ldr	r3, [r2, #0]
 8000e9e:	07db      	lsls	r3, r3, #31
 8000ea0:	d4f7      	bmi.n	8000e92 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000eae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000eb0:	e7c7      	b.n	8000e42 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000eb8:	d108      	bne.n	8000ecc <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000eba:	6819      	ldr	r1, [r3, #0]
 8000ebc:	f021 0110 	bic.w	r1, r1, #16
 8000ec0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000ec2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000ec4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000ec8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ece:	e7cb      	b.n	8000e68 <HAL_DMA_IRQHandler+0x108>
 8000ed0:	2000000c 	.word	0x2000000c

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000edc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800108c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee0:	4a68      	ldr	r2, [pc, #416]	; (8001084 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001090 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000eea:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eec:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000eee:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000ef2:	42ac      	cmp	r4, r5
 8000ef4:	f040 80b0 	bne.w	8001058 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef8:	684c      	ldr	r4, [r1, #4]
 8000efa:	f024 0c10 	bic.w	ip, r4, #16
 8000efe:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000f02:	2e01      	cmp	r6, #1
 8000f04:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000f08:	d812      	bhi.n	8000f30 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000f0a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	2603      	movs	r6, #3
 8000f0e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f12:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	68ce      	ldr	r6, [r1, #12]
 8000f18:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f1c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000f1e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f20:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f22:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f26:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f2a:	409e      	lsls	r6, r3
 8000f2c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000f2e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f30:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000f32:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f34:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f38:	43f6      	mvns	r6, r6
 8000f3a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3e:	688f      	ldr	r7, [r1, #8]
 8000f40:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f44:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f48:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000f4c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	d116      	bne.n	8000f7e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000f50:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f54:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f58:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f60:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f64:	f04f 0c0f 	mov.w	ip, #15
 8000f68:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f6c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f70:	690f      	ldr	r7, [r1, #16]
 8000f72:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f76:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000f7a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000f7e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f80:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f82:	f004 0703 	and.w	r7, r4, #3
 8000f86:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f8a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000f8e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f90:	00e6      	lsls	r6, r4, #3
 8000f92:	d561      	bpl.n	8001058 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f94:	f04f 0b00 	mov.w	fp, #0
 8000f98:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f9c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa0:	4e39      	ldr	r6, [pc, #228]	; (8001088 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000fa6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000faa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000fae:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000fb2:	9703      	str	r7, [sp, #12]
 8000fb4:	9f03      	ldr	r7, [sp, #12]
 8000fb6:	f023 0703 	bic.w	r7, r3, #3
 8000fba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000fbe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000fce:	f04f 0e0f 	mov.w	lr, #15
 8000fd2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fdc:	d043      	beq.n	8001066 <HAL_GPIO_Init+0x192>
 8000fde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fe2:	42b0      	cmp	r0, r6
 8000fe4:	d041      	beq.n	800106a <HAL_GPIO_Init+0x196>
 8000fe6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fea:	42b0      	cmp	r0, r6
 8000fec:	d03f      	beq.n	800106e <HAL_GPIO_Init+0x19a>
 8000fee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ff2:	42b0      	cmp	r0, r6
 8000ff4:	d03d      	beq.n	8001072 <HAL_GPIO_Init+0x19e>
 8000ff6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ffa:	42b0      	cmp	r0, r6
 8000ffc:	d03b      	beq.n	8001076 <HAL_GPIO_Init+0x1a2>
 8000ffe:	4548      	cmp	r0, r9
 8001000:	d03b      	beq.n	800107a <HAL_GPIO_Init+0x1a6>
 8001002:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001006:	42b0      	cmp	r0, r6
 8001008:	d039      	beq.n	800107e <HAL_GPIO_Init+0x1aa>
 800100a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800100e:	42b0      	cmp	r0, r6
 8001010:	bf14      	ite	ne
 8001012:	2608      	movne	r6, #8
 8001014:	2607      	moveq	r6, #7
 8001016:	fa06 f60c 	lsl.w	r6, r6, ip
 800101a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001020:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001022:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001024:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001028:	bf0c      	ite	eq
 800102a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800102c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800102e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001030:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001032:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001036:	bf0c      	ite	eq
 8001038:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800103a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800103c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001044:	bf0c      	ite	eq
 8001046:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001048:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800104a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001050:	bf54      	ite	pl
 8001052:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001054:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8001056:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001058:	3301      	adds	r3, #1
 800105a:	2b10      	cmp	r3, #16
 800105c:	f47f af45 	bne.w	8000eea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001060:	b005      	add	sp, #20
 8001062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001066:	465e      	mov	r6, fp
 8001068:	e7d5      	b.n	8001016 <HAL_GPIO_Init+0x142>
 800106a:	2601      	movs	r6, #1
 800106c:	e7d3      	b.n	8001016 <HAL_GPIO_Init+0x142>
 800106e:	2602      	movs	r6, #2
 8001070:	e7d1      	b.n	8001016 <HAL_GPIO_Init+0x142>
 8001072:	2603      	movs	r6, #3
 8001074:	e7cf      	b.n	8001016 <HAL_GPIO_Init+0x142>
 8001076:	2604      	movs	r6, #4
 8001078:	e7cd      	b.n	8001016 <HAL_GPIO_Init+0x142>
 800107a:	2605      	movs	r6, #5
 800107c:	e7cb      	b.n	8001016 <HAL_GPIO_Init+0x142>
 800107e:	2606      	movs	r6, #6
 8001080:	e7c9      	b.n	8001016 <HAL_GPIO_Init+0x142>
 8001082:	bf00      	nop
 8001084:	40013c00 	.word	0x40013c00
 8001088:	40020000 	.word	0x40020000
 800108c:	40023800 	.word	0x40023800
 8001090:	40021400 	.word	0x40021400

08001094 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001094:	b10a      	cbz	r2, 800109a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001096:	6181      	str	r1, [r0, #24]
 8001098:	4770      	bx	lr
 800109a:	0409      	lsls	r1, r1, #16
 800109c:	e7fb      	b.n	8001096 <HAL_GPIO_WritePin+0x2>

0800109e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800109e:	4770      	bx	lr

080010a0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80010a0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80010a4:	6959      	ldr	r1, [r3, #20]
 80010a6:	4201      	tst	r1, r0
 80010a8:	d002      	beq.n	80010b0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010aa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010ac:	f7ff fff7 	bl	800109e <HAL_GPIO_EXTI_Callback>
 80010b0:	bd08      	pop	{r3, pc}
 80010b2:	bf00      	nop
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010bc:	4604      	mov	r4, r0
 80010be:	b908      	cbnz	r0, 80010c4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80010c0:	2001      	movs	r0, #1
 80010c2:	e03f      	b.n	8001144 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c4:	6803      	ldr	r3, [r0, #0]
 80010c6:	07dd      	lsls	r5, r3, #31
 80010c8:	d410      	bmi.n	80010ec <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	0798      	lsls	r0, r3, #30
 80010ce:	d45a      	bmi.n	8001186 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	071a      	lsls	r2, r3, #28
 80010d4:	f100 809c 	bmi.w	8001210 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	075b      	lsls	r3, r3, #29
 80010dc:	f100 80ba 	bmi.w	8001254 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e0:	69a0      	ldr	r0, [r4, #24]
 80010e2:	2800      	cmp	r0, #0
 80010e4:	f040 811b 	bne.w	800131e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80010e8:	2000      	movs	r0, #0
 80010ea:	e02b      	b.n	8001144 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ec:	4ba4      	ldr	r3, [pc, #656]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	f002 020c 	and.w	r2, r2, #12
 80010f4:	2a04      	cmp	r2, #4
 80010f6:	d007      	beq.n	8001108 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010fe:	2a08      	cmp	r2, #8
 8001100:	d10a      	bne.n	8001118 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	0259      	lsls	r1, r3, #9
 8001106:	d507      	bpl.n	8001118 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	4b9d      	ldr	r3, [pc, #628]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	039a      	lsls	r2, r3, #14
 800110e:	d5dc      	bpl.n	80010ca <HAL_RCC_OscConfig+0x12>
 8001110:	6863      	ldr	r3, [r4, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1d9      	bne.n	80010ca <HAL_RCC_OscConfig+0x12>
 8001116:	e7d3      	b.n	80010c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001118:	6863      	ldr	r3, [r4, #4]
 800111a:	4d99      	ldr	r5, [pc, #612]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d113      	bne.n	800114a <HAL_RCC_OscConfig+0x92>
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800112a:	f7ff fa57 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4d94      	ldr	r5, [pc, #592]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001130:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	682b      	ldr	r3, [r5, #0]
 8001134:	039b      	lsls	r3, r3, #14
 8001136:	d4c8      	bmi.n	80010ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fa50 	bl	80005dc <HAL_GetTick>
 800113c:	1b80      	subs	r0, r0, r6
 800113e:	2864      	cmp	r0, #100	; 0x64
 8001140:	d9f7      	bls.n	8001132 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001142:	2003      	movs	r0, #3
}
 8001144:	b002      	add	sp, #8
 8001146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800114e:	d104      	bne.n	800115a <HAL_RCC_OscConfig+0xa2>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001156:	602b      	str	r3, [r5, #0]
 8001158:	e7e3      	b.n	8001122 <HAL_RCC_OscConfig+0x6a>
 800115a:	682a      	ldr	r2, [r5, #0]
 800115c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001160:	602a      	str	r2, [r5, #0]
 8001162:	682a      	ldr	r2, [r5, #0]
 8001164:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001168:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1dd      	bne.n	800112a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800116e:	f7ff fa35 	bl	80005dc <HAL_GetTick>
 8001172:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	039f      	lsls	r7, r3, #14
 8001178:	d5a7      	bpl.n	80010ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117a:	f7ff fa2f 	bl	80005dc <HAL_GetTick>
 800117e:	1b80      	subs	r0, r0, r6
 8001180:	2864      	cmp	r0, #100	; 0x64
 8001182:	d9f7      	bls.n	8001174 <HAL_RCC_OscConfig+0xbc>
 8001184:	e7dd      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	f012 0f0c 	tst.w	r2, #12
 800118e:	d007      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001196:	2a08      	cmp	r2, #8
 8001198:	d111      	bne.n	80011be <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	025e      	lsls	r6, r3, #9
 800119e:	d40e      	bmi.n	80011be <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a0:	4b77      	ldr	r3, [pc, #476]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	0795      	lsls	r5, r2, #30
 80011a6:	d502      	bpl.n	80011ae <HAL_RCC_OscConfig+0xf6>
 80011a8:	68e2      	ldr	r2, [r4, #12]
 80011aa:	2a01      	cmp	r2, #1
 80011ac:	d188      	bne.n	80010c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	6921      	ldr	r1, [r4, #16]
 80011b2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011b6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011bc:	e788      	b.n	80010d0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011be:	68e2      	ldr	r2, [r4, #12]
 80011c0:	4b70      	ldr	r3, [pc, #448]	; (8001384 <HAL_RCC_OscConfig+0x2cc>)
 80011c2:	b1b2      	cbz	r2, 80011f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011c8:	f7ff fa08 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	4d6c      	ldr	r5, [pc, #432]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80011ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	0798      	lsls	r0, r3, #30
 80011d4:	d507      	bpl.n	80011e6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	6922      	ldr	r2, [r4, #16]
 80011da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011e2:	602b      	str	r3, [r5, #0]
 80011e4:	e774      	b.n	80010d0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff f9f9 	bl	80005dc <HAL_GetTick>
 80011ea:	1b80      	subs	r0, r0, r6
 80011ec:	2802      	cmp	r0, #2
 80011ee:	d9ef      	bls.n	80011d0 <HAL_RCC_OscConfig+0x118>
 80011f0:	e7a7      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80011f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011f4:	f7ff f9f2 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f8:	4d61      	ldr	r5, [pc, #388]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80011fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	0799      	lsls	r1, r3, #30
 8001200:	f57f af66 	bpl.w	80010d0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff f9ea 	bl	80005dc <HAL_GetTick>
 8001208:	1b80      	subs	r0, r0, r6
 800120a:	2802      	cmp	r0, #2
 800120c:	d9f6      	bls.n	80011fc <HAL_RCC_OscConfig+0x144>
 800120e:	e798      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001210:	6962      	ldr	r2, [r4, #20]
 8001212:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_RCC_OscConfig+0x2d0>)
 8001214:	b17a      	cbz	r2, 8001236 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800121a:	f7ff f9df 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	4d58      	ldr	r5, [pc, #352]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001220:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001224:	079f      	lsls	r7, r3, #30
 8001226:	f53f af57 	bmi.w	80010d8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122a:	f7ff f9d7 	bl	80005dc <HAL_GetTick>
 800122e:	1b80      	subs	r0, r0, r6
 8001230:	2802      	cmp	r0, #2
 8001232:	d9f6      	bls.n	8001222 <HAL_RCC_OscConfig+0x16a>
 8001234:	e785      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001236:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001238:	f7ff f9d0 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123c:	4d50      	ldr	r5, [pc, #320]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800123e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001242:	0798      	lsls	r0, r3, #30
 8001244:	f57f af48 	bpl.w	80010d8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001248:	f7ff f9c8 	bl	80005dc <HAL_GetTick>
 800124c:	1b80      	subs	r0, r0, r6
 800124e:	2802      	cmp	r0, #2
 8001250:	d9f6      	bls.n	8001240 <HAL_RCC_OscConfig+0x188>
 8001252:	e776      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001254:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 8001256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001258:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800125c:	d128      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	9201      	str	r2, [sp, #4]
 8001260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001262:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001272:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	4d45      	ldr	r5, [pc, #276]	; (800138c <HAL_RCC_OscConfig+0x2d4>)
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	05d9      	lsls	r1, r3, #23
 800127a:	d51b      	bpl.n	80012b4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127c:	68a3      	ldr	r3, [r4, #8]
 800127e:	4d40      	ldr	r5, [pc, #256]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 8001280:	2b01      	cmp	r3, #1
 8001282:	d127      	bne.n	80012d4 <HAL_RCC_OscConfig+0x21c>
 8001284:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800128c:	f7ff f9a6 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	4d3b      	ldr	r5, [pc, #236]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001292:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800129a:	079b      	lsls	r3, r3, #30
 800129c:	d539      	bpl.n	8001312 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800129e:	2e00      	cmp	r6, #0
 80012a0:	f43f af1e 	beq.w	80010e0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a4:	4a36      	ldr	r2, [pc, #216]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 80012a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	e717      	b.n	80010e0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80012b0:	2600      	movs	r6, #0
 80012b2:	e7df      	b.n	8001274 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012bc:	f7ff f98e 	bl	80005dc <HAL_GetTick>
 80012c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	05da      	lsls	r2, r3, #23
 80012c6:	d4d9      	bmi.n	800127c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c8:	f7ff f988 	bl	80005dc <HAL_GetTick>
 80012cc:	1bc0      	subs	r0, r0, r7
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f7      	bls.n	80012c2 <HAL_RCC_OscConfig+0x20a>
 80012d2:	e736      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d104      	bne.n	80012e2 <HAL_RCC_OscConfig+0x22a>
 80012d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	672b      	str	r3, [r5, #112]	; 0x70
 80012e0:	e7d0      	b.n	8001284 <HAL_RCC_OscConfig+0x1cc>
 80012e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	672a      	str	r2, [r5, #112]	; 0x70
 80012ea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012ec:	f022 0204 	bic.w	r2, r2, #4
 80012f0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ca      	bne.n	800128c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80012f6:	f7ff f971 	bl	80005dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001302:	0798      	lsls	r0, r3, #30
 8001304:	d5cb      	bpl.n	800129e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff f969 	bl	80005dc <HAL_GetTick>
 800130a:	1bc0      	subs	r0, r0, r7
 800130c:	4540      	cmp	r0, r8
 800130e:	d9f7      	bls.n	8001300 <HAL_RCC_OscConfig+0x248>
 8001310:	e717      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff f963 	bl	80005dc <HAL_GetTick>
 8001316:	1bc0      	subs	r0, r0, r7
 8001318:	4540      	cmp	r0, r8
 800131a:	d9bd      	bls.n	8001298 <HAL_RCC_OscConfig+0x1e0>
 800131c:	e711      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800131e:	4d18      	ldr	r5, [pc, #96]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
 8001320:	68ab      	ldr	r3, [r5, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b08      	cmp	r3, #8
 8001328:	d047      	beq.n	80013ba <HAL_RCC_OscConfig+0x302>
 800132a:	4e19      	ldr	r6, [pc, #100]	; (8001390 <HAL_RCC_OscConfig+0x2d8>)
 800132c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001330:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001332:	d135      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001334:	f7ff f952 	bl	80005dc <HAL_GetTick>
 8001338:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	682b      	ldr	r3, [r5, #0]
 800133c:	0199      	lsls	r1, r3, #6
 800133e:	d429      	bmi.n	8001394 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001340:	6a22      	ldr	r2, [r4, #32]
 8001342:	69e3      	ldr	r3, [r4, #28]
 8001344:	4313      	orrs	r3, r2
 8001346:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001348:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800134c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800134e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001352:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001356:	0852      	lsrs	r2, r2, #1
 8001358:	3a01      	subs	r2, #1
 800135a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800135e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001360:	2301      	movs	r3, #1
 8001362:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001364:	f7ff f93a 	bl	80005dc <HAL_GetTick>
 8001368:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	019a      	lsls	r2, r3, #6
 800136e:	f53f aebb 	bmi.w	80010e8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff f933 	bl	80005dc <HAL_GetTick>
 8001376:	1b40      	subs	r0, r0, r5
 8001378:	2802      	cmp	r0, #2
 800137a:	d9f6      	bls.n	800136a <HAL_RCC_OscConfig+0x2b2>
 800137c:	e6e1      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	42470000 	.word	0x42470000
 8001388:	42470e80 	.word	0x42470e80
 800138c:	40007000 	.word	0x40007000
 8001390:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff f922 	bl	80005dc <HAL_GetTick>
 8001398:	1bc0      	subs	r0, r0, r7
 800139a:	2802      	cmp	r0, #2
 800139c:	d9cd      	bls.n	800133a <HAL_RCC_OscConfig+0x282>
 800139e:	e6d0      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80013a0:	f7ff f91c 	bl	80005dc <HAL_GetTick>
 80013a4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	019b      	lsls	r3, r3, #6
 80013aa:	f57f ae9d 	bpl.w	80010e8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff f915 	bl	80005dc <HAL_GetTick>
 80013b2:	1b00      	subs	r0, r0, r4
 80013b4:	2802      	cmp	r0, #2
 80013b6:	d9f6      	bls.n	80013a6 <HAL_RCC_OscConfig+0x2ee>
 80013b8:	e6c3      	b.n	8001142 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ba:	2801      	cmp	r0, #1
 80013bc:	f43f aec2 	beq.w	8001144 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 80013c0:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	69e3      	ldr	r3, [r4, #28]
 80013c4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f47f ae79 	bne.w	80010c0 <HAL_RCC_OscConfig+0x8>
 80013ce:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013d0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d4:	4293      	cmp	r3, r2
 80013d6:	f47f ae73 	bne.w	80010c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013e0:	4003      	ands	r3, r0
 80013e2:	4293      	cmp	r3, r2
 80013e4:	f47f ae6c 	bne.w	80010c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013ea:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013ee:	4293      	cmp	r3, r2
 80013f0:	f47f ae66 	bne.w	80010c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013f6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80013fa:	1ac0      	subs	r0, r0, r3
 80013fc:	bf18      	it	ne
 80013fe:	2001      	movne	r0, #1
 8001400:	e6a0      	b.n	8001144 <HAL_RCC_OscConfig+0x8c>
 8001402:	bf00      	nop

08001404 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001404:	4913      	ldr	r1, [pc, #76]	; (8001454 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001406:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001408:	688b      	ldr	r3, [r1, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b04      	cmp	r3, #4
 8001410:	d003      	beq.n	800141a <HAL_RCC_GetSysClockFreq+0x16>
 8001412:	2b08      	cmp	r3, #8
 8001414:	d003      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001418:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <HAL_RCC_GetSysClockFreq+0x58>)
 800141c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800141e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001420:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001422:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001424:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001428:	bf14      	ite	ne
 800142a:	480c      	ldrne	r0, [pc, #48]	; (800145c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142c:	480a      	ldreq	r0, [pc, #40]	; (8001458 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001432:	bf18      	it	ne
 8001434:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001436:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143a:	fba1 0100 	umull	r0, r1, r1, r0
 800143e:	f7fe ff1f 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <HAL_RCC_GetSysClockFreq+0x50>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800144a:	3301      	adds	r3, #1
 800144c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800144e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001452:	bd08      	pop	{r3, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	00f42400 	.word	0x00f42400
 800145c:	007a1200 	.word	0x007a1200

08001460 <HAL_RCC_ClockConfig>:
{
 8001460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001464:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001466:	4604      	mov	r4, r0
 8001468:	b910      	cbnz	r0, 8001470 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_ClockConfig+0x124>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f002 020f 	and.w	r2, r2, #15
 8001478:	428a      	cmp	r2, r1
 800147a:	d329      	bcc.n	80014d0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	6821      	ldr	r1, [r4, #0]
 800147e:	078f      	lsls	r7, r1, #30
 8001480:	d42e      	bmi.n	80014e0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001482:	07c8      	lsls	r0, r1, #31
 8001484:	d441      	bmi.n	800150a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_ClockConfig+0x124>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f002 020f 	and.w	r2, r2, #15
 800148e:	4295      	cmp	r5, r2
 8001490:	d367      	bcc.n	8001562 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	0751      	lsls	r1, r2, #29
 8001496:	d46d      	bmi.n	8001574 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	0713      	lsls	r3, r2, #28
 800149a:	d507      	bpl.n	80014ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800149c:	4a3a      	ldr	r2, [pc, #232]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800149e:	6921      	ldr	r1, [r4, #16]
 80014a0:	6893      	ldr	r3, [r2, #8]
 80014a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ac:	f7ff ffaa 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 80014b2:	4a36      	ldr	r2, [pc, #216]	; (800158c <HAL_RCC_ClockConfig+0x12c>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	40d8      	lsrs	r0, r3
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_RCC_ClockConfig+0x130>)
 80014c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_RCC_ClockConfig+0x134>)
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	f003 fb29 	bl	8004b1c <HAL_InitTick>
  return HAL_OK;
 80014ca:	2000      	movs	r0, #0
 80014cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d0:	b2ca      	uxtb	r2, r1
 80014d2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	4299      	cmp	r1, r3
 80014dc:	d1c5      	bne.n	800146a <HAL_RCC_ClockConfig+0xa>
 80014de:	e7cd      	b.n	800147c <HAL_RCC_ClockConfig+0x1c>
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e6:	bf1e      	ittt	ne
 80014e8:	689a      	ldrne	r2, [r3, #8]
 80014ea:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80014ee:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f2:	bf42      	ittt	mi
 80014f4:	689a      	ldrmi	r2, [r3, #8]
 80014f6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80014fa:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	68a0      	ldr	r0, [r4, #8]
 8001500:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001504:	4302      	orrs	r2, r0
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e7bb      	b.n	8001482 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	6862      	ldr	r2, [r4, #4]
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800150e:	2a01      	cmp	r2, #1
 8001510:	d11d      	bne.n	800154e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	d0a7      	beq.n	800146a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151a:	4e1b      	ldr	r6, [pc, #108]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800151c:	68b3      	ldr	r3, [r6, #8]
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	4313      	orrs	r3, r2
 8001524:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001526:	f7ff f859 	bl	80005dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800152e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001530:	68b3      	ldr	r3, [r6, #8]
 8001532:	6862      	ldr	r2, [r4, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800153c:	d0a3      	beq.n	8001486 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153e:	f7ff f84d 	bl	80005dc <HAL_GetTick>
 8001542:	1bc0      	subs	r0, r0, r7
 8001544:	4540      	cmp	r0, r8
 8001546:	d9f3      	bls.n	8001530 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001548:	2003      	movs	r0, #3
}
 800154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154e:	1e91      	subs	r1, r2, #2
 8001550:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001552:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001554:	d802      	bhi.n	800155c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800155a:	e7dd      	b.n	8001518 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	f013 0f02 	tst.w	r3, #2
 8001560:	e7da      	b.n	8001518 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	b2ea      	uxtb	r2, r5
 8001564:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	429d      	cmp	r5, r3
 800156e:	f47f af7c 	bne.w	800146a <HAL_RCC_ClockConfig+0xa>
 8001572:	e78e      	b.n	8001492 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 8001576:	68e0      	ldr	r0, [r4, #12]
 8001578:	688b      	ldr	r3, [r1, #8]
 800157a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800157e:	4303      	orrs	r3, r0
 8001580:	608b      	str	r3, [r1, #8]
 8001582:	e789      	b.n	8001498 <HAL_RCC_ClockConfig+0x38>
 8001584:	40023c00 	.word	0x40023c00
 8001588:	40023800 	.word	0x40023800
 800158c:	0800561f 	.word	0x0800561f
 8001590:	2000000c 	.word	0x2000000c
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015a6:	6810      	ldr	r0, [r2, #0]
}
 80015a8:	40d8      	lsrs	r0, r3
 80015aa:	4770      	bx	lr
 80015ac:	40023800 	.word	0x40023800
 80015b0:	0800562f 	.word	0x0800562f
 80015b4:	2000000c 	.word	0x2000000c

080015b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015c6:	6810      	ldr	r0, [r2, #0]
}
 80015c8:	40d8      	lsrs	r0, r3
 80015ca:	4770      	bx	lr
 80015cc:	40023800 	.word	0x40023800
 80015d0:	0800562f 	.word	0x0800562f
 80015d4:	2000000c 	.word	0x2000000c

080015d8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015d8:	230f      	movs	r3, #15
 80015da:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_GetClockConfig+0x34>)
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80015ec:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80015f4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80015fe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_RCC_GetClockConfig+0x38>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	600b      	str	r3, [r1, #0]
 800160a:	4770      	bx	lr
 800160c:	40023800 	.word	0x40023800
 8001610:	40023c00 	.word	0x40023c00

08001614 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	4604      	mov	r4, r0
 8001618:	460e      	mov	r6, r1
 800161a:	4615      	mov	r5, r2
 800161c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800161e:	6821      	ldr	r1, [r4, #0]
 8001620:	688a      	ldr	r2, [r1, #8]
 8001622:	ea36 0302 	bics.w	r3, r6, r2
 8001626:	d001      	beq.n	800162c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001628:	2000      	movs	r0, #0
}
 800162a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800162c:	1c6b      	adds	r3, r5, #1
 800162e:	d0f7      	beq.n	8001620 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001630:	f7fe ffd4 	bl	80005dc <HAL_GetTick>
 8001634:	1bc0      	subs	r0, r0, r7
 8001636:	4285      	cmp	r5, r0
 8001638:	d8f1      	bhi.n	800161e <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001642:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001644:	6862      	ldr	r2, [r4, #4]
 8001646:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800164a:	d10a      	bne.n	8001662 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 800164c:	68a2      	ldr	r2, [r4, #8]
 800164e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001652:	d002      	beq.n	800165a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001654:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001658:	d103      	bne.n	8001662 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001660:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001662:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001664:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001668:	d107      	bne.n	800167a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001678:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800167a:	2301      	movs	r3, #1
 800167c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001680:	2300      	movs	r3, #0
 8001682:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001686:	2003      	movs	r0, #3
 8001688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800168a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800168a:	b538      	push	{r3, r4, r5, lr}
 800168c:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800168e:	6842      	ldr	r2, [r0, #4]
 8001690:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001694:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001696:	d11f      	bne.n	80016d8 <SPI_EndRxTransaction+0x4e>
 8001698:	6882      	ldr	r2, [r0, #8]
 800169a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800169e:	d002      	beq.n	80016a6 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80016a0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80016a4:	d107      	bne.n	80016b6 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80016a6:	6825      	ldr	r5, [r4, #0]
 80016a8:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80016aa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80016ae:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80016b2:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80016b4:	d007      	beq.n	80016c6 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80016b6:	460a      	mov	r2, r1
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff ffaa 	bl	8001614 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80016c0:	b920      	cbnz	r0, 80016cc <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80016c2:	2000      	movs	r0, #0
 80016c4:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80016c6:	460a      	mov	r2, r1
 80016c8:	2101      	movs	r1, #1
 80016ca:	e7f6      	b.n	80016ba <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80016cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80016d4:	2003      	movs	r0, #3
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80016d8:	460a      	mov	r2, r1
 80016da:	2101      	movs	r1, #1
 80016dc:	e7ee      	b.n	80016bc <SPI_EndRxTransaction+0x32>
	...

080016e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016e2:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80016e4:	4a13      	ldr	r2, [pc, #76]	; (8001734 <SPI_EndRxTxTransaction+0x54>)
 80016e6:	4e14      	ldr	r6, [pc, #80]	; (8001738 <SPI_EndRxTxTransaction+0x58>)
 80016e8:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016ea:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80016ec:	fbb5 f6f6 	udiv	r6, r5, r6
 80016f0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80016f4:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016f6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80016fa:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80016fc:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016fe:	d10d      	bne.n	800171c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001700:	460a      	mov	r2, r1
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	f7ff ff86 	bl	8001614 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001708:	b910      	cbnz	r0, 8001710 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 800170a:	2000      	movs	r0, #0
}
 800170c:	b002      	add	sp, #8
 800170e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001710:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001718:	2003      	movs	r0, #3
 800171a:	e7f7      	b.n	800170c <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 800171c:	9b01      	ldr	r3, [sp, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f3      	beq.n	800170a <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001722:	9b01      	ldr	r3, [sp, #4]
 8001724:	3b01      	subs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	d4f5      	bmi.n	800171c <SPI_EndRxTxTransaction+0x3c>
 8001730:	e7eb      	b.n	800170a <SPI_EndRxTxTransaction+0x2a>
 8001732:	bf00      	nop
 8001734:	2000000c 	.word	0x2000000c
 8001738:	016e3600 	.word	0x016e3600

0800173c <HAL_SPI_Init>:
{
 800173c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800173e:	4604      	mov	r4, r0
 8001740:	2800      	cmp	r0, #0
 8001742:	d036      	beq.n	80017b2 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001748:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800174c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001750:	b91b      	cbnz	r3, 800175a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001752:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001756:	f003 f8ad 	bl	80048b4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800175a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800175c:	68a0      	ldr	r0, [r4, #8]
 800175e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001760:	2302      	movs	r3, #2
 8001762:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001766:	680b      	ldr	r3, [r1, #0]
 8001768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800176c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	4303      	orrs	r3, r0
 8001772:	68e0      	ldr	r0, [r4, #12]
 8001774:	4303      	orrs	r3, r0
 8001776:	6920      	ldr	r0, [r4, #16]
 8001778:	4303      	orrs	r3, r0
 800177a:	6960      	ldr	r0, [r4, #20]
 800177c:	4303      	orrs	r3, r0
 800177e:	69e0      	ldr	r0, [r4, #28]
 8001780:	4303      	orrs	r3, r0
 8001782:	6a20      	ldr	r0, [r4, #32]
 8001784:	4303      	orrs	r3, r0
 8001786:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001788:	4303      	orrs	r3, r0
 800178a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800178e:	4303      	orrs	r3, r0
 8001790:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001792:	0c12      	lsrs	r2, r2, #16
 8001794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001796:	f002 0204 	and.w	r2, r2, #4
 800179a:	431a      	orrs	r2, r3
 800179c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800179e:	69cb      	ldr	r3, [r1, #28]
 80017a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017a6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80017a8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017aa:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017ac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80017b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
}
 80017b4:	bd10      	pop	{r4, pc}

080017b6 <HAL_SPI_Transmit>:
{
 80017b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80017ba:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80017bc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80017c0:	2b01      	cmp	r3, #1
{
 80017c2:	4604      	mov	r4, r0
 80017c4:	460d      	mov	r5, r1
 80017c6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80017c8:	f000 809b 	beq.w	8001902 <HAL_SPI_Transmit+0x14c>
 80017cc:	2301      	movs	r3, #1
 80017ce:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80017d2:	f7fe ff03 	bl	80005dc <HAL_GetTick>
 80017d6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80017d8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80017dc:	b2c0      	uxtb	r0, r0
 80017de:	2801      	cmp	r0, #1
 80017e0:	f040 808d 	bne.w	80018fe <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 80017e4:	2d00      	cmp	r5, #0
 80017e6:	d05d      	beq.n	80018a4 <HAL_SPI_Transmit+0xee>
 80017e8:	f1b8 0f00 	cmp.w	r8, #0
 80017ec:	d05a      	beq.n	80018a4 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017ee:	2303      	movs	r3, #3
 80017f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017f4:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017f6:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017f8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017fa:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80017fc:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001800:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001802:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001804:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001806:	6420      	str	r0, [r4, #64]	; 0x40
 8001808:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800180a:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800180c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001810:	bf08      	it	eq
 8001812:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001814:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001818:	bf04      	itt	eq
 800181a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 800181e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001820:	6803      	ldr	r3, [r0, #0]
 8001822:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001824:	bf5e      	ittt	pl
 8001826:	6803      	ldrpl	r3, [r0, #0]
 8001828:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800182c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800182e:	68e3      	ldr	r3, [r4, #12]
 8001830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001834:	6863      	ldr	r3, [r4, #4]
 8001836:	d13e      	bne.n	80018b6 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001838:	b113      	cbz	r3, 8001840 <HAL_SPI_Transmit+0x8a>
 800183a:	f1b8 0f01 	cmp.w	r8, #1
 800183e:	d107      	bne.n	8001850 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001840:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001844:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001846:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001848:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800184a:	3b01      	subs	r3, #1
 800184c:	b29b      	uxth	r3, r3
 800184e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001850:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001852:	b29b      	uxth	r3, r3
 8001854:	b9a3      	cbnz	r3, 8001880 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001856:	463a      	mov	r2, r7
 8001858:	4631      	mov	r1, r6
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff ff40 	bl	80016e0 <SPI_EndRxTxTransaction>
 8001860:	2800      	cmp	r0, #0
 8001862:	d149      	bne.n	80018f8 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001864:	68a3      	ldr	r3, [r4, #8]
 8001866:	b933      	cbnz	r3, 8001876 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001876:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001878:	3000      	adds	r0, #0
 800187a:	bf18      	it	ne
 800187c:	2001      	movne	r0, #1
 800187e:	e011      	b.n	80018a4 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	6893      	ldr	r3, [r2, #8]
 8001884:	0798      	lsls	r0, r3, #30
 8001886:	d505      	bpl.n	8001894 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001888:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800188a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800188e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001890:	6323      	str	r3, [r4, #48]	; 0x30
 8001892:	e7d9      	b.n	8001848 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001894:	f7fe fea2 	bl	80005dc <HAL_GetTick>
 8001898:	1bc0      	subs	r0, r0, r7
 800189a:	42b0      	cmp	r0, r6
 800189c:	d3d8      	bcc.n	8001850 <HAL_SPI_Transmit+0x9a>
 800189e:	1c71      	adds	r1, r6, #1
 80018a0:	d0d6      	beq.n	8001850 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80018a2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80018aa:	2300      	movs	r3, #0
 80018ac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80018b0:	b002      	add	sp, #8
 80018b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018b6:	b113      	cbz	r3, 80018be <HAL_SPI_Transmit+0x108>
 80018b8:	f1b8 0f01 	cmp.w	r8, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018be:	782b      	ldrb	r3, [r5, #0]
 80018c0:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018c4:	3301      	adds	r3, #1
 80018c6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80018c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80018d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0be      	beq.n	8001856 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	0792      	lsls	r2, r2, #30
 80018de:	d503      	bpl.n	80018e8 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018e2:	7812      	ldrb	r2, [r2, #0]
 80018e4:	731a      	strb	r2, [r3, #12]
 80018e6:	e7ec      	b.n	80018c2 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018e8:	f7fe fe78 	bl	80005dc <HAL_GetTick>
 80018ec:	1bc0      	subs	r0, r0, r7
 80018ee:	4286      	cmp	r6, r0
 80018f0:	d8ee      	bhi.n	80018d0 <HAL_SPI_Transmit+0x11a>
 80018f2:	1c73      	adds	r3, r6, #1
 80018f4:	d0ec      	beq.n	80018d0 <HAL_SPI_Transmit+0x11a>
 80018f6:	e7d4      	b.n	80018a2 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018f8:	2320      	movs	r3, #32
 80018fa:	6563      	str	r3, [r4, #84]	; 0x54
 80018fc:	e7b2      	b.n	8001864 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 80018fe:	2002      	movs	r0, #2
 8001900:	e7d0      	b.n	80018a4 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8001902:	2002      	movs	r0, #2
 8001904:	e7d4      	b.n	80018b0 <HAL_SPI_Transmit+0xfa>

08001906 <HAL_SPI_TransmitReceive>:
{
 8001906:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800190a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800190c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001910:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001912:	2b01      	cmp	r3, #1
{
 8001914:	4604      	mov	r4, r0
 8001916:	460d      	mov	r5, r1
 8001918:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800191a:	f000 80e2 	beq.w	8001ae2 <HAL_SPI_TransmitReceive+0x1dc>
 800191e:	2301      	movs	r3, #1
 8001920:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001924:	f7fe fe5a 	bl	80005dc <HAL_GetTick>
  tmp_state           = hspi->State;
 8001928:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800192c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800192e:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001930:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001932:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001934:	d00a      	beq.n	800194c <HAL_SPI_TransmitReceive+0x46>
 8001936:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800193a:	f040 80d0 	bne.w	8001ade <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800193e:	68a0      	ldr	r0, [r4, #8]
 8001940:	2800      	cmp	r0, #0
 8001942:	f040 80cc 	bne.w	8001ade <HAL_SPI_TransmitReceive+0x1d8>
 8001946:	2b04      	cmp	r3, #4
 8001948:	f040 80c9 	bne.w	8001ade <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800194c:	2d00      	cmp	r5, #0
 800194e:	f000 80c4 	beq.w	8001ada <HAL_SPI_TransmitReceive+0x1d4>
 8001952:	f1b9 0f00 	cmp.w	r9, #0
 8001956:	f000 80c0 	beq.w	8001ada <HAL_SPI_TransmitReceive+0x1d4>
 800195a:	2e00      	cmp	r6, #0
 800195c:	f000 80bd 	beq.w	8001ada <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001960:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001964:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001968:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800196a:	bf1c      	itt	ne
 800196c:	2305      	movne	r3, #5
 800196e:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001976:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001978:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800197a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800197c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800197e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001980:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001982:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001984:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001986:	bf58      	it	pl
 8001988:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800198a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800198c:	bf58      	it	pl
 800198e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001992:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001994:	bf58      	it	pl
 8001996:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001998:	68e2      	ldr	r2, [r4, #12]
 800199a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800199e:	d158      	bne.n	8001a52 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019a0:	b109      	cbz	r1, 80019a6 <HAL_SPI_TransmitReceive+0xa0>
 80019a2:	2e01      	cmp	r6, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019a6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80019aa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80019ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019ae:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80019b6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b9ab      	cbnz	r3, 80019ea <HAL_SPI_TransmitReceive+0xe4>
 80019be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	b993      	cbnz	r3, 80019ea <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019c4:	4642      	mov	r2, r8
 80019c6:	4639      	mov	r1, r7
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff fe89 	bl	80016e0 <SPI_EndRxTxTransaction>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	f040 8081 	bne.w	8001ad6 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019d4:	68a3      	ldr	r3, [r4, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d132      	bne.n	8001a40 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	9001      	str	r0, [sp, #4]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	9b01      	ldr	r3, [sp, #4]
 80019e8:	e02a      	b.n	8001a40 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	6893      	ldr	r3, [r2, #8]
 80019ee:	0799      	lsls	r1, r3, #30
 80019f0:	d50d      	bpl.n	8001a0e <HAL_SPI_TransmitReceive+0x108>
 80019f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b153      	cbz	r3, 8001a0e <HAL_SPI_TransmitReceive+0x108>
 80019f8:	b14d      	cbz	r5, 8001a0e <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019fc:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001a00:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a02:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001a0c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a0e:	6893      	ldr	r3, [r2, #8]
 8001a10:	07db      	lsls	r3, r3, #31
 8001a12:	d50c      	bpl.n	8001a2e <HAL_SPI_TransmitReceive+0x128>
 8001a14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	b14b      	cbz	r3, 8001a2e <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a1c:	68d2      	ldr	r2, [r2, #12]
 8001a1e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a22:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001a24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001a2c:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a2e:	f7fe fdd5 	bl	80005dc <HAL_GetTick>
 8001a32:	eba0 0008 	sub.w	r0, r0, r8
 8001a36:	4287      	cmp	r7, r0
 8001a38:	d8be      	bhi.n	80019b8 <HAL_SPI_TransmitReceive+0xb2>
 8001a3a:	1c7e      	adds	r6, r7, #1
 8001a3c:	d0bc      	beq.n	80019b8 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001a3e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a46:	2300      	movs	r3, #0
 8001a48:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001a4c:	b003      	add	sp, #12
 8001a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a52:	b109      	cbz	r1, 8001a58 <HAL_SPI_TransmitReceive+0x152>
 8001a54:	2e01      	cmp	r6, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a58:	782a      	ldrb	r2, [r5, #0]
 8001a5a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a5e:	3301      	adds	r3, #1
 8001a60:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001a6a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b91b      	cbnz	r3, 8001a7a <HAL_SPI_TransmitReceive+0x174>
 8001a72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0a4      	beq.n	80019c4 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a7a:	6822      	ldr	r2, [r4, #0]
 8001a7c:	6893      	ldr	r3, [r2, #8]
 8001a7e:	0798      	lsls	r0, r3, #30
 8001a80:	d50e      	bpl.n	8001aa0 <HAL_SPI_TransmitReceive+0x19a>
 8001a82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b15b      	cbz	r3, 8001aa0 <HAL_SPI_TransmitReceive+0x19a>
 8001a88:	b155      	cbz	r5, 8001aa0 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001a8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a92:	3301      	adds	r3, #1
 8001a94:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001a9e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001aa0:	6822      	ldr	r2, [r4, #0]
 8001aa2:	6893      	ldr	r3, [r2, #8]
 8001aa4:	07d9      	lsls	r1, r3, #31
 8001aa6:	d50d      	bpl.n	8001ac4 <HAL_SPI_TransmitReceive+0x1be>
 8001aa8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b153      	cbz	r3, 8001ac4 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001aae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ab0:	68d2      	ldr	r2, [r2, #12]
 8001ab2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ab4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001aba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001ac2:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ac4:	f7fe fd8a 	bl	80005dc <HAL_GetTick>
 8001ac8:	eba0 0008 	sub.w	r0, r0, r8
 8001acc:	4287      	cmp	r7, r0
 8001ace:	d8cd      	bhi.n	8001a6c <HAL_SPI_TransmitReceive+0x166>
 8001ad0:	1c7b      	adds	r3, r7, #1
 8001ad2:	d0cb      	beq.n	8001a6c <HAL_SPI_TransmitReceive+0x166>
 8001ad4:	e7b3      	b.n	8001a3e <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001ada:	2001      	movs	r0, #1
 8001adc:	e7b0      	b.n	8001a40 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8001ade:	2002      	movs	r0, #2
 8001ae0:	e7ae      	b.n	8001a40 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	e7b2      	b.n	8001a4c <HAL_SPI_TransmitReceive+0x146>

08001ae6 <HAL_SPI_Receive>:
{
 8001ae6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001aea:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001aec:	6843      	ldr	r3, [r0, #4]
 8001aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001af2:	4604      	mov	r4, r0
 8001af4:	4688      	mov	r8, r1
 8001af6:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001af8:	d10c      	bne.n	8001b14 <HAL_SPI_Receive+0x2e>
 8001afa:	6883      	ldr	r3, [r0, #8]
 8001afc:	b953      	cbnz	r3, 8001b14 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001afe:	2304      	movs	r3, #4
 8001b00:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001b04:	4613      	mov	r3, r2
 8001b06:	9500      	str	r5, [sp, #0]
 8001b08:	460a      	mov	r2, r1
 8001b0a:	f7ff fefc 	bl	8001906 <HAL_SPI_TransmitReceive>
}
 8001b0e:	b002      	add	sp, #8
 8001b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8001b14:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d079      	beq.n	8001c10 <HAL_SPI_Receive+0x12a>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001b22:	f7fe fd5b 	bl	80005dc <HAL_GetTick>
 8001b26:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001b28:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001b2c:	b2c0      	uxtb	r0, r0
 8001b2e:	2801      	cmp	r0, #1
 8001b30:	d16c      	bne.n	8001c0c <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 8001b32:	f1b8 0f00 	cmp.w	r8, #0
 8001b36:	d057      	beq.n	8001be8 <HAL_SPI_Receive+0x102>
 8001b38:	2f00      	cmp	r7, #0
 8001b3a:	d055      	beq.n	8001be8 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b46:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001b48:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001b4a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001b4c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001b4e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b50:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b52:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 8001b54:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b5a:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b5c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8001b60:	bf02      	ittt	eq
 8001b62:	681a      	ldreq	r2, [r3, #0]
 8001b64:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001b68:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001b6e:	bf5e      	ittt	pl
 8001b70:	681a      	ldrpl	r2, [r3, #0]
 8001b72:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001b76:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001b78:	68e3      	ldr	r3, [r4, #12]
 8001b7a:	b1f3      	cbz	r3, 8001bba <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8001b7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b1fb      	cbz	r3, 8001bc2 <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	07d2      	lsls	r2, r2, #31
 8001b88:	d535      	bpl.n	8001bf6 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b8e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b92:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001b94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001b9c:	e7ee      	b.n	8001b7c <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	07d0      	lsls	r0, r2, #31
 8001ba4:	d518      	bpl.n	8001bd8 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ba6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ba8:	7b1b      	ldrb	r3, [r3, #12]
 8001baa:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001bac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bae:	3301      	adds	r3, #1
 8001bb0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001bb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001bba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ed      	bne.n	8001b9e <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bc2:	4632      	mov	r2, r6
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7ff fd5f 	bl	800168a <SPI_EndRxTransaction>
 8001bcc:	b9d8      	cbnz	r0, 8001c06 <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001bd0:	3000      	adds	r0, #0
 8001bd2:	bf18      	it	ne
 8001bd4:	2001      	movne	r0, #1
 8001bd6:	e007      	b.n	8001be8 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bd8:	f7fe fd00 	bl	80005dc <HAL_GetTick>
 8001bdc:	1b80      	subs	r0, r0, r6
 8001bde:	4285      	cmp	r5, r0
 8001be0:	d8eb      	bhi.n	8001bba <HAL_SPI_Receive+0xd4>
 8001be2:	1c69      	adds	r1, r5, #1
 8001be4:	d0e9      	beq.n	8001bba <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 8001be6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001bf4:	e78b      	b.n	8001b0e <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bf6:	f7fe fcf1 	bl	80005dc <HAL_GetTick>
 8001bfa:	1b80      	subs	r0, r0, r6
 8001bfc:	4285      	cmp	r5, r0
 8001bfe:	d8bd      	bhi.n	8001b7c <HAL_SPI_Receive+0x96>
 8001c00:	1c6b      	adds	r3, r5, #1
 8001c02:	d0bb      	beq.n	8001b7c <HAL_SPI_Receive+0x96>
 8001c04:	e7ef      	b.n	8001be6 <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c06:	2320      	movs	r3, #32
 8001c08:	6563      	str	r3, [r4, #84]	; 0x54
 8001c0a:	e7e0      	b.n	8001bce <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	e7eb      	b.n	8001be8 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8001c10:	2002      	movs	r0, #2
 8001c12:	e77c      	b.n	8001b0e <HAL_SPI_Receive+0x28>

08001c14 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c14:	6a03      	ldr	r3, [r0, #32]
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c1c:	6a03      	ldr	r3, [r0, #32]
{
 8001c1e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c22:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c24:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c26:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c2a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c2c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001c2e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001c32:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c34:	4d0e      	ldr	r5, [pc, #56]	; (8001c70 <TIM_OC1_SetConfig+0x5c>)
 8001c36:	42a8      	cmp	r0, r5
 8001c38:	d002      	beq.n	8001c40 <TIM_OC1_SetConfig+0x2c>
 8001c3a:	4e0e      	ldr	r6, [pc, #56]	; (8001c74 <TIM_OC1_SetConfig+0x60>)
 8001c3c:	42b0      	cmp	r0, r6
 8001c3e:	d110      	bne.n	8001c62 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c40:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c42:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001c46:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c48:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c4a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c4e:	d002      	beq.n	8001c56 <TIM_OC1_SetConfig+0x42>
 8001c50:	4d08      	ldr	r5, [pc, #32]	; (8001c74 <TIM_OC1_SetConfig+0x60>)
 8001c52:	42a8      	cmp	r0, r5
 8001c54:	d105      	bne.n	8001c62 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c56:	694d      	ldr	r5, [r1, #20]
 8001c58:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c5a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c5e:	4335      	orrs	r5, r6
 8001c60:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c62:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c64:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c66:	684a      	ldr	r2, [r1, #4]
 8001c68:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c6a:	6203      	str	r3, [r0, #32]
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
 8001c6e:	bf00      	nop
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40010400 	.word	0x40010400

08001c78 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c78:	6a03      	ldr	r3, [r0, #32]
 8001c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c7e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c80:	6a03      	ldr	r3, [r0, #32]
{
 8001c82:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c86:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c8a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c8e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001c92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c9a:	4d11      	ldr	r5, [pc, #68]	; (8001ce0 <TIM_OC3_SetConfig+0x68>)
 8001c9c:	42a8      	cmp	r0, r5
 8001c9e:	d003      	beq.n	8001ca8 <TIM_OC3_SetConfig+0x30>
 8001ca0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ca4:	42a8      	cmp	r0, r5
 8001ca6:	d114      	bne.n	8001cd2 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ca8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cb2:	4d0b      	ldr	r5, [pc, #44]	; (8001ce0 <TIM_OC3_SetConfig+0x68>)
 8001cb4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cba:	d003      	beq.n	8001cc4 <TIM_OC3_SetConfig+0x4c>
 8001cbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cc0:	42a8      	cmp	r0, r5
 8001cc2:	d106      	bne.n	8001cd2 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001cc4:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001cc6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001cc8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ccc:	4335      	orrs	r5, r6
 8001cce:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cd2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cd4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001cd6:	684a      	ldr	r2, [r1, #4]
 8001cd8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cda:	6203      	str	r3, [r0, #32]
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ce4:	6a03      	ldr	r3, [r0, #32]
 8001ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cec:	6a03      	ldr	r3, [r0, #32]
{
 8001cee:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cf0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cf2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cf4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001cf6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cfa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001cfe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d04:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d08:	4d08      	ldr	r5, [pc, #32]	; (8001d2c <TIM_OC4_SetConfig+0x48>)
 8001d0a:	42a8      	cmp	r0, r5
 8001d0c:	d003      	beq.n	8001d16 <TIM_OC4_SetConfig+0x32>
 8001d0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d12:	42a8      	cmp	r0, r5
 8001d14:	d104      	bne.n	8001d20 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d16:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d18:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d1c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d22:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d24:	684a      	ldr	r2, [r1, #4]
 8001d26:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d28:	6203      	str	r3, [r0, #32]
 8001d2a:	bd30      	pop	{r4, r5, pc}
 8001d2c:	40010000 	.word	0x40010000

08001d30 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d40:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001d42:	bf1e      	ittt	ne
 8001d44:	681a      	ldrne	r2, [r3, #0]
 8001d46:	f042 0201 	orrne.w	r2, r2, #1
 8001d4a:	601a      	strne	r2, [r3, #0]
}
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_PWM_MspInit>:
 8001d50:	4770      	bx	lr

08001d52 <HAL_TIM_OC_DelayElapsedCallback>:
 8001d52:	4770      	bx	lr

08001d54 <HAL_TIM_IC_CaptureCallback>:
 8001d54:	4770      	bx	lr

08001d56 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_TriggerCallback>:
 8001d58:	4770      	bx	lr

08001d5a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d5a:	6803      	ldr	r3, [r0, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	0791      	lsls	r1, r2, #30
{
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d64:	d50e      	bpl.n	8001d84 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	0792      	lsls	r2, r2, #30
 8001d6a:	d50b      	bpl.n	8001d84 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d6c:	f06f 0202 	mvn.w	r2, #2
 8001d70:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d72:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d74:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d76:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d78:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d7a:	d077      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7c:	f7ff ffea 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d80:	2300      	movs	r3, #0
 8001d82:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	0750      	lsls	r0, r2, #29
 8001d8a:	d510      	bpl.n	8001dae <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	0751      	lsls	r1, r2, #29
 8001d90:	d50d      	bpl.n	8001dae <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d92:	f06f 0204 	mvn.w	r2, #4
 8001d96:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d98:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d9c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	d068      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	f7ff ffd5 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	2300      	movs	r3, #0
 8001dac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	0712      	lsls	r2, r2, #28
 8001db4:	d50f      	bpl.n	8001dd6 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	0710      	lsls	r0, r2, #28
 8001dba:	d50c      	bpl.n	8001dd6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dbc:	f06f 0208 	mvn.w	r2, #8
 8001dc0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc4:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc8:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dcc:	d05a      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	f7ff ffc1 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	06d2      	lsls	r2, r2, #27
 8001ddc:	d510      	bpl.n	8001e00 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	06d0      	lsls	r0, r2, #27
 8001de2:	d50d      	bpl.n	8001e00 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de4:	f06f 0210 	mvn.w	r2, #16
 8001de8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dec:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dee:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001df4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df6:	d04b      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001df8:	f7ff ffac 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	07d1      	lsls	r1, r2, #31
 8001e06:	d508      	bpl.n	8001e1a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	07d2      	lsls	r2, r2, #31
 8001e0c:	d505      	bpl.n	8001e1a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e0e:	f06f 0201 	mvn.w	r2, #1
 8001e12:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e14:	4620      	mov	r0, r4
 8001e16:	f002 fce3 	bl	80047e0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	0610      	lsls	r0, r2, #24
 8001e20:	d508      	bpl.n	8001e34 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	0611      	lsls	r1, r2, #24
 8001e26:	d505      	bpl.n	8001e34 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e2c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f000 fa49 	bl	80022c6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	0652      	lsls	r2, r2, #25
 8001e3a:	d508      	bpl.n	8001e4e <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	0650      	lsls	r0, r2, #25
 8001e40:	d505      	bpl.n	8001e4e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e46:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7ff ff85 	bl	8001d58 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	0691      	lsls	r1, r2, #26
 8001e54:	d522      	bpl.n	8001e9c <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	0692      	lsls	r2, r2, #26
 8001e5a:	d51f      	bpl.n	8001e9c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001e60:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e62:	611a      	str	r2, [r3, #16]
}
 8001e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001e68:	f000 ba2c 	b.w	80022c4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6c:	f7ff ff71 	bl	8001d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff ff70 	bl	8001d56 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e76:	e783      	b.n	8001d80 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e78:	f7ff ff6b 	bl	8001d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff ff6a 	bl	8001d56 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e82:	e792      	b.n	8001daa <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e84:	f7ff ff65 	bl	8001d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff ff64 	bl	8001d56 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e8e:	e7a0      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e90:	f7ff ff5f 	bl	8001d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff ff5e 	bl	8001d56 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e9a:	e7af      	b.n	8001dfc <HAL_TIM_IRQHandler+0xa2>
 8001e9c:	bd10      	pop	{r4, pc}
	...

08001ea0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	4a30      	ldr	r2, [pc, #192]	; (8001f64 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001ea2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea4:	4290      	cmp	r0, r2
 8001ea6:	d012      	beq.n	8001ece <TIM_Base_SetConfig+0x2e>
 8001ea8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001eac:	d00f      	beq.n	8001ece <TIM_Base_SetConfig+0x2e>
 8001eae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001eb2:	4290      	cmp	r0, r2
 8001eb4:	d00b      	beq.n	8001ece <TIM_Base_SetConfig+0x2e>
 8001eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	d007      	beq.n	8001ece <TIM_Base_SetConfig+0x2e>
 8001ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ec2:	4290      	cmp	r0, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0x2e>
 8001ec6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001eca:	4290      	cmp	r0, r2
 8001ecc:	d119      	bne.n	8001f02 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8001ece:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ed4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ed6:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <TIM_Base_SetConfig+0xc4>)
 8001ed8:	4290      	cmp	r0, r2
 8001eda:	d029      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001edc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ee0:	d026      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001ee2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ee6:	4290      	cmp	r0, r2
 8001ee8:	d022      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eee:	4290      	cmp	r0, r2
 8001ef0:	d01e      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ef6:	4290      	cmp	r0, r2
 8001ef8:	d01a      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001efa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001efe:	4290      	cmp	r0, r2
 8001f00:	d016      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001f02:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <TIM_Base_SetConfig+0xc8>)
 8001f04:	4290      	cmp	r0, r2
 8001f06:	d013      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001f08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f0c:	4290      	cmp	r0, r2
 8001f0e:	d00f      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001f10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f14:	4290      	cmp	r0, r2
 8001f16:	d00b      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001f18:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001f1c:	4290      	cmp	r0, r2
 8001f1e:	d007      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001f20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f24:	4290      	cmp	r0, r2
 8001f26:	d003      	beq.n	8001f30 <TIM_Base_SetConfig+0x90>
 8001f28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f2c:	4290      	cmp	r0, r2
 8001f2e:	d103      	bne.n	8001f38 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f30:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f36:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f38:	694a      	ldr	r2, [r1, #20]
 8001f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f3e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001f40:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f42:	688b      	ldr	r3, [r1, #8]
 8001f44:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f46:	680b      	ldr	r3, [r1, #0]
 8001f48:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <TIM_Base_SetConfig+0xc4>)
 8001f4c:	4298      	cmp	r0, r3
 8001f4e:	d003      	beq.n	8001f58 <TIM_Base_SetConfig+0xb8>
 8001f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f54:	4298      	cmp	r0, r3
 8001f56:	d101      	bne.n	8001f5c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001f58:	690b      	ldr	r3, [r1, #16]
 8001f5a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	6143      	str	r3, [r0, #20]
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40014000 	.word	0x40014000

08001f6c <HAL_TIM_Base_Init>:
{
 8001f6c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001f6e:	4604      	mov	r4, r0
 8001f70:	b1a0      	cbz	r0, 8001f9c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f7a:	b91b      	cbnz	r3, 8001f84 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001f7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f80:	f002 fcce 	bl	8004920 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	2302      	movs	r3, #2
 8001f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8a:	6820      	ldr	r0, [r4, #0]
 8001f8c:	1d21      	adds	r1, r4, #4
 8001f8e:	f7ff ff87 	bl	8001ea0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001f98:	2000      	movs	r0, #0
 8001f9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f9c:	2001      	movs	r0, #1
}
 8001f9e:	bd10      	pop	{r4, pc}

08001fa0 <HAL_TIM_PWM_Init>:
{
 8001fa0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	b1a0      	cbz	r0, 8001fd0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001faa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fae:	b91b      	cbnz	r3, 8001fb8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001fb4:	f7ff fecc 	bl	8001d50 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fbe:	6820      	ldr	r0, [r4, #0]
 8001fc0:	1d21      	adds	r1, r4, #4
 8001fc2:	f7ff ff6d 	bl	8001ea0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001fcc:	2000      	movs	r0, #0
 8001fce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
}
 8001fd2:	bd10      	pop	{r4, pc}

08001fd4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd4:	6a03      	ldr	r3, [r0, #32]
 8001fd6:	f023 0310 	bic.w	r3, r3, #16
 8001fda:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001fdc:	6a03      	ldr	r3, [r0, #32]
{
 8001fde:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001fe0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001fe2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fe4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fe6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001ff0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ff4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ff8:	4d10      	ldr	r5, [pc, #64]	; (800203c <TIM_OC2_SetConfig+0x68>)
 8001ffa:	42a8      	cmp	r0, r5
 8001ffc:	d003      	beq.n	8002006 <TIM_OC2_SetConfig+0x32>
 8001ffe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002002:	42a8      	cmp	r0, r5
 8002004:	d114      	bne.n	8002030 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002006:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800200c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002010:	4d0a      	ldr	r5, [pc, #40]	; (800203c <TIM_OC2_SetConfig+0x68>)
 8002012:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002018:	d003      	beq.n	8002022 <TIM_OC2_SetConfig+0x4e>
 800201a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800201e:	42a8      	cmp	r0, r5
 8002020:	d106      	bne.n	8002030 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002022:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002024:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002026:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800202a:	4335      	orrs	r5, r6
 800202c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002030:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002032:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002034:	684a      	ldr	r2, [r1, #4]
 8002036:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002038:	6203      	str	r3, [r0, #32]
 800203a:	bd70      	pop	{r4, r5, r6, pc}
 800203c:	40010000 	.word	0x40010000

08002040 <HAL_TIM_PWM_ConfigChannel>:
{
 8002040:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002042:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002046:	2b01      	cmp	r3, #1
{
 8002048:	4604      	mov	r4, r0
 800204a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800204e:	d025      	beq.n	800209c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002050:	2301      	movs	r3, #1
 8002052:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002056:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800205a:	2a0c      	cmp	r2, #12
 800205c:	d818      	bhi.n	8002090 <HAL_TIM_PWM_ConfigChannel+0x50>
 800205e:	e8df f002 	tbb	[pc, r2]
 8002062:	1707      	.short	0x1707
 8002064:	171e1717 	.word	0x171e1717
 8002068:	172f1717 	.word	0x172f1717
 800206c:	1717      	.short	0x1717
 800206e:	40          	.byte	0x40
 800206f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002070:	6820      	ldr	r0, [r4, #0]
 8002072:	f7ff fdcf 	bl	8001c14 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002076:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002078:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	f042 0208 	orr.w	r2, r2, #8
 8002080:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	f022 0204 	bic.w	r2, r2, #4
 8002088:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800208e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002090:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002092:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002094:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002098:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800209c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800209e:	6820      	ldr	r0, [r4, #0]
 80020a0:	f7ff ff98 	bl	8001fd4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020a6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020be:	e7e6      	b.n	800208e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	f7ff fdd9 	bl	8001c78 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	f042 0208 	orr.w	r2, r2, #8
 80020d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	f022 0204 	bic.w	r2, r2, #4
 80020d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020de:	61da      	str	r2, [r3, #28]
      break;
 80020e0:	e7d6      	b.n	8002090 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020e2:	6820      	ldr	r0, [r4, #0]
 80020e4:	f7ff fdfe 	bl	8001ce4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002102:	e7ec      	b.n	80020de <HAL_TIM_PWM_ConfigChannel+0x9e>

08002104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002104:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002106:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002108:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800210e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002112:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002114:	6083      	str	r3, [r0, #8]
 8002116:	bd10      	pop	{r4, pc}

08002118 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002118:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800211c:	2b01      	cmp	r3, #1
{
 800211e:	b570      	push	{r4, r5, r6, lr}
 8002120:	4604      	mov	r4, r0
 8002122:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002126:	d019      	beq.n	800215c <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800212c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800212e:	2301      	movs	r3, #1
 8002130:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002134:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800213a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800213e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002140:	680b      	ldr	r3, [r1, #0]
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d065      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0xfa>
 8002146:	d815      	bhi.n	8002174 <HAL_TIM_ConfigClockSource+0x5c>
 8002148:	2b10      	cmp	r3, #16
 800214a:	d00c      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x4e>
 800214c:	d807      	bhi.n	800215e <HAL_TIM_ConfigClockSource+0x46>
 800214e:	b153      	cbz	r3, 8002166 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002150:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002152:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002154:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002158:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800215c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800215e:	2b20      	cmp	r3, #32
 8002160:	d001      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x4e>
 8002162:	2b30      	cmp	r3, #48	; 0x30
 8002164:	d1f4      	bne.n	8002150 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002166:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002168:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800216c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002170:	4313      	orrs	r3, r2
 8002172:	e01a      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002174:	2b60      	cmp	r3, #96	; 0x60
 8002176:	d034      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0xca>
 8002178:	d819      	bhi.n	80021ae <HAL_TIM_ConfigClockSource+0x96>
 800217a:	2b50      	cmp	r3, #80	; 0x50
 800217c:	d1e8      	bne.n	8002150 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800217e:	684a      	ldr	r2, [r1, #4]
 8002180:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002182:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002184:	6a05      	ldr	r5, [r0, #32]
 8002186:	f025 0501 	bic.w	r5, r5, #1
 800218a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800218c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002196:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800219a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800219c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800219e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021a0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021a6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80021aa:	6083      	str	r3, [r0, #8]
 80021ac:	e7d0      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80021ae:	2b70      	cmp	r3, #112	; 0x70
 80021b0:	d00c      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0xb4>
 80021b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b6:	d1cb      	bne.n	8002150 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80021b8:	68cb      	ldr	r3, [r1, #12]
 80021ba:	684a      	ldr	r2, [r1, #4]
 80021bc:	6889      	ldr	r1, [r1, #8]
 80021be:	f7ff ffa1 	bl	8002104 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	6893      	ldr	r3, [r2, #8]
 80021c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ca:	e008      	b.n	80021de <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80021cc:	68cb      	ldr	r3, [r1, #12]
 80021ce:	684a      	ldr	r2, [r1, #4]
 80021d0:	6889      	ldr	r1, [r1, #8]
 80021d2:	f7ff ff97 	bl	8002104 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021de:	6093      	str	r3, [r2, #8]
      break;
 80021e0:	e7b6      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021e2:	684d      	ldr	r5, [r1, #4]
 80021e4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021e6:	6a01      	ldr	r1, [r0, #32]
 80021e8:	f021 0110 	bic.w	r1, r1, #16
 80021ec:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ee:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80021f0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021f2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021fe:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002202:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002204:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002206:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800220c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002210:	e7cb      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002212:	684a      	ldr	r2, [r1, #4]
 8002214:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002216:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002218:	6a05      	ldr	r5, [r0, #32]
 800221a:	f025 0501 	bic.w	r5, r5, #1
 800221e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002220:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002222:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800222a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800222e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002230:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002232:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002234:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800223a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800223e:	e7b4      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x92>

08002240 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002240:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
{
 8002246:	b530      	push	{r4, r5, lr}
 8002248:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800224c:	d035      	beq.n	80022ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002252:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002254:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002256:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002258:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 800225c:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800225e:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8002260:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002264:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002266:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002268:	4c15      	ldr	r4, [pc, #84]	; (80022c0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800226a:	42a3      	cmp	r3, r4
 800226c:	d01a      	beq.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800226e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002272:	d017      	beq.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002274:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8002278:	42a3      	cmp	r3, r4
 800227a:	d013      	beq.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800227c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002280:	42a3      	cmp	r3, r4
 8002282:	d00f      	beq.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002284:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002288:	42a3      	cmp	r3, r4
 800228a:	d00b      	beq.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800228c:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002290:	42a3      	cmp	r3, r4
 8002292:	d007      	beq.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002294:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8002298:	42a3      	cmp	r3, r4
 800229a:	d003      	beq.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800229c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80022a0:	42a3      	cmp	r3, r4
 80022a2:	d104      	bne.n	80022ae <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022a4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022aa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022b4:	2300      	movs	r3, #0
 80022b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80022ba:	4618      	mov	r0, r3

  return HAL_OK;
}
 80022bc:	bd30      	pop	{r4, r5, pc}
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000

080022c4 <HAL_TIMEx_CommutCallback>:
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c6:	4770      	bx	lr

080022c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ca:	6803      	ldr	r3, [r0, #0]
 80022cc:	68c1      	ldr	r1, [r0, #12]
 80022ce:	691a      	ldr	r2, [r3, #16]
{
 80022d0:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80022d6:	430a      	orrs	r2, r1
 80022d8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022da:	6925      	ldr	r5, [r4, #16]
 80022dc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022de:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022e0:	69c0      	ldr	r0, [r0, #28]
 80022e2:	432a      	orrs	r2, r5
 80022e4:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80022e6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ea:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80022ec:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022f0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80022f2:	430a      	orrs	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	69a1      	ldr	r1, [r4, #24]
 80022fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022fe:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002300:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002304:	615a      	str	r2, [r3, #20]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002308:	d129      	bne.n	800235e <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <UART_SetConfig+0x4e>
 800230e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002312:	4293      	cmp	r3, r2
 8002314:	d120      	bne.n	8002358 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002316:	f7ff f94f 	bl	80015b8 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800231a:	6862      	ldr	r2, [r4, #4]
 800231c:	6825      	ldr	r5, [r4, #0]
 800231e:	1892      	adds	r2, r2, r2
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	f04f 0119 	mov.w	r1, #25
 8002328:	415b      	adcs	r3, r3
 800232a:	fba0 0101 	umull	r0, r1, r0, r1
 800232e:	f7fd ffa7 	bl	8000280 <__aeabi_uldivmod>
 8002332:	2164      	movs	r1, #100	; 0x64
 8002334:	fbb0 f4f1 	udiv	r4, r0, r1
 8002338:	fb01 0314 	mls	r3, r1, r4, r0
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	3332      	adds	r3, #50	; 0x32
 8002340:	fbb3 f3f1 	udiv	r3, r3, r1
 8002344:	f003 0207 	and.w	r2, r3, #7
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800234e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002352:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002354:	60ab      	str	r3, [r5, #8]
 8002356:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002358:	f7ff f91e 	bl	8001598 <HAL_RCC_GetPCLK1Freq>
 800235c:	e7dd      	b.n	800231a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800235e:	4293      	cmp	r3, r2
 8002360:	d002      	beq.n	8002368 <UART_SetConfig+0xa0>
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <UART_SetConfig+0xd8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d116      	bne.n	8002396 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002368:	f7ff f926 	bl	80015b8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800236c:	6863      	ldr	r3, [r4, #4]
 800236e:	6825      	ldr	r5, [r4, #0]
 8002370:	2119      	movs	r1, #25
 8002372:	009a      	lsls	r2, r3, #2
 8002374:	fba0 0101 	umull	r0, r1, r0, r1
 8002378:	0f9b      	lsrs	r3, r3, #30
 800237a:	f7fd ff81 	bl	8000280 <__aeabi_uldivmod>
 800237e:	2264      	movs	r2, #100	; 0x64
 8002380:	fbb0 f1f2 	udiv	r1, r0, r2
 8002384:	fb02 0311 	mls	r3, r2, r1, r0
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002390:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002394:	e7de      	b.n	8002354 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002396:	f7ff f8ff 	bl	8001598 <HAL_RCC_GetPCLK1Freq>
 800239a:	e7e7      	b.n	800236c <UART_SetConfig+0xa4>
 800239c:	40011000 	.word	0x40011000
 80023a0:	40011400 	.word	0x40011400

080023a4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	4604      	mov	r4, r0
 80023a8:	460e      	mov	r6, r1
 80023aa:	4617      	mov	r7, r2
 80023ac:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ae:	6821      	ldr	r1, [r4, #0]
 80023b0:	680b      	ldr	r3, [r1, #0]
 80023b2:	ea36 0303 	bics.w	r3, r6, r3
 80023b6:	d101      	bne.n	80023bc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80023b8:	2000      	movs	r0, #0
}
 80023ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80023bc:	1c6b      	adds	r3, r5, #1
 80023be:	d0f7      	beq.n	80023b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023c0:	b995      	cbnz	r5, 80023e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80023d4:	2320      	movs	r3, #32
 80023d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023da:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80023de:	2300      	movs	r3, #0
 80023e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80023e4:	2003      	movs	r0, #3
 80023e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023e8:	f7fe f8f8 	bl	80005dc <HAL_GetTick>
 80023ec:	1bc0      	subs	r0, r0, r7
 80023ee:	4285      	cmp	r5, r0
 80023f0:	d2dd      	bcs.n	80023ae <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80023f2:	e7e6      	b.n	80023c2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080023f4 <HAL_UART_Init>:
{
 80023f4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023f6:	4604      	mov	r4, r0
 80023f8:	b340      	cbz	r0, 800244c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002402:	b91b      	cbnz	r3, 800240c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002404:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002408:	f002 facc 	bl	80049a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800240c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800240e:	2324      	movs	r3, #36	; 0x24
 8002410:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002414:	68d3      	ldr	r3, [r2, #12]
 8002416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800241a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff ff53 	bl	80022c8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002432:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800243e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002440:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002442:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002446:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800244a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800244c:	2001      	movs	r0, #1
}
 800244e:	bd10      	pop	{r4, pc}

08002450 <HAL_UART_Transmit>:
{
 8002450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002454:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002456:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800245a:	2b20      	cmp	r3, #32
{
 800245c:	4604      	mov	r4, r0
 800245e:	460d      	mov	r5, r1
 8002460:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002462:	d151      	bne.n	8002508 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002464:	2900      	cmp	r1, #0
 8002466:	d04c      	beq.n	8002502 <HAL_UART_Transmit+0xb2>
 8002468:	2a00      	cmp	r2, #0
 800246a:	d04a      	beq.n	8002502 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 800246c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002470:	2b01      	cmp	r3, #1
 8002472:	d049      	beq.n	8002508 <HAL_UART_Transmit+0xb8>
 8002474:	2301      	movs	r3, #1
 8002476:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800247e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002480:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002484:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002488:	f7fe f8a8 	bl	80005dc <HAL_GetTick>
    huart->TxXferSize = Size;
 800248c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002490:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002492:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002496:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800249a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800249c:	b29b      	uxth	r3, r3
 800249e:	b95b      	cbnz	r3, 80024b8 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a0:	463b      	mov	r3, r7
 80024a2:	4632      	mov	r2, r6
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff ff7c 	bl	80023a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024ac:	b9a0      	cbnz	r0, 80024d8 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80024ae:	2320      	movs	r3, #32
 80024b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80024b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80024b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29b      	uxth	r3, r3
 80024be:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024c0:	68a3      	ldr	r3, [r4, #8]
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024c6:	4632      	mov	r2, r6
 80024c8:	463b      	mov	r3, r7
 80024ca:	f04f 0180 	mov.w	r1, #128	; 0x80
 80024ce:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024d0:	d10e      	bne.n	80024f0 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024d2:	f7ff ff67 	bl	80023a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024d6:	b110      	cbz	r0, 80024de <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80024d8:	2003      	movs	r0, #3
 80024da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024de:	882b      	ldrh	r3, [r5, #0]
 80024e0:	6822      	ldr	r2, [r4, #0]
 80024e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024e8:	6923      	ldr	r3, [r4, #16]
 80024ea:	b943      	cbnz	r3, 80024fe <HAL_UART_Transmit+0xae>
          pData += 2U;
 80024ec:	3502      	adds	r5, #2
 80024ee:	e7d4      	b.n	800249a <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f0:	f7ff ff58 	bl	80023a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d1ef      	bne.n	80024d8 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	782a      	ldrb	r2, [r5, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	3501      	adds	r5, #1
 8002500:	e7cb      	b.n	800249a <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8002502:	2001      	movs	r0, #1
 8002504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8002508:	2002      	movs	r0, #2
}
 800250a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800250e <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800250e:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002510:	f001 fe48 	bl	80041a4 <pvTimerGetTimerID>

  if (callb != NULL) {
 8002514:	b120      	cbz	r0, 8002520 <TimerCallback+0x12>
    callb->func (callb->arg);
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	6840      	ldr	r0, [r0, #4]
  }
}
 800251a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
 800251e:	4718      	bx	r3
 8002520:	bd10      	pop	{r4, pc}
	...

08002524 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002524:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8002528:	b113      	cbz	r3, 8002530 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800252a:	f06f 0005 	mvn.w	r0, #5
 800252e:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002530:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f8      	bne.n	800252a <osKernelInitialize+0x6>
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <osKernelInitialize+0x34>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	2802      	cmp	r0, #2
 800253e:	d106      	bne.n	800254e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002540:	f3ef 8311 	mrs	r3, BASEPRI
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <osKernelInitialize+0x6>
      stat = osError;
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
}
 800254c:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 800254e:	2800      	cmp	r0, #0
 8002550:	d1fa      	bne.n	8002548 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	4770      	bx	lr
 8002558:	200002ec 	.word	0x200002ec

0800255c <osKernelStart>:
osStatus_t osKernelStart (void) {
 800255c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800255e:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8002562:	b113      	cbz	r3, 800256a <osKernelStart+0xe>
    stat = osErrorISR;
 8002564:	f06f 0005 	mvn.w	r0, #5
 8002568:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800256a:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800256e:	2c00      	cmp	r4, #0
 8002570:	d1f8      	bne.n	8002564 <osKernelStart+0x8>
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <osKernelStart+0x3c>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2a02      	cmp	r2, #2
 8002578:	d106      	bne.n	8002588 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800257a:	f3ef 8311 	mrs	r3, BASEPRI
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <osKernelStart+0x8>
      stat = osError;
 8002582:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002586:	bd10      	pop	{r4, pc}
    if (KernelState == osKernelReady) {
 8002588:	2a01      	cmp	r2, #1
 800258a:	d1fa      	bne.n	8002582 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002590:	f001 f86a 	bl	8003668 <vTaskStartScheduler>
      stat = osOK;
 8002594:	4620      	mov	r0, r4
 8002596:	bd10      	pop	{r4, pc}
 8002598:	200002ec 	.word	0x200002ec

0800259c <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	b087      	sub	sp, #28
 80025a0:	4614      	mov	r4, r2
  hTask = NULL;
 80025a2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025a4:	460b      	mov	r3, r1
  hTask = NULL;
 80025a6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a8:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 80025ac:	bb72      	cbnz	r2, 800260c <osThreadNew+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ae:	f3ef 8210 	mrs	r2, PRIMASK
 80025b2:	bb5a      	cbnz	r2, 800260c <osThreadNew+0x70>
 80025b4:	4a28      	ldr	r2, [pc, #160]	; (8002658 <osThreadNew+0xbc>)
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	2a02      	cmp	r2, #2
 80025ba:	d102      	bne.n	80025c2 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025bc:	f3ef 8211 	mrs	r2, BASEPRI
 80025c0:	bb22      	cbnz	r2, 800260c <osThreadNew+0x70>
 80025c2:	b318      	cbz	r0, 800260c <osThreadNew+0x70>
    empty = '\0';
 80025c4:	2200      	movs	r2, #0
 80025c6:	f88d 2013 	strb.w	r2, [sp, #19]
    if (attr != NULL) {
 80025ca:	2c00      	cmp	r4, #0
 80025cc:	d03c      	beq.n	8002648 <osThreadNew+0xac>
      if (attr->name != NULL) {
 80025ce:	6821      	ldr	r1, [r4, #0]
 80025d0:	b909      	cbnz	r1, 80025d6 <osThreadNew+0x3a>
    name  = &empty;
 80025d2:	f10d 0113 	add.w	r1, sp, #19
      if (attr->priority != osPriorityNone) {
 80025d6:	69a5      	ldr	r5, [r4, #24]
 80025d8:	2d00      	cmp	r5, #0
 80025da:	bf08      	it	eq
 80025dc:	2518      	moveq	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025de:	1e6a      	subs	r2, r5, #1
 80025e0:	2a37      	cmp	r2, #55	; 0x37
 80025e2:	462f      	mov	r7, r5
 80025e4:	d835      	bhi.n	8002652 <osThreadNew+0xb6>
 80025e6:	6862      	ldr	r2, [r4, #4]
 80025e8:	07d2      	lsls	r2, r2, #31
 80025ea:	d432      	bmi.n	8002652 <osThreadNew+0xb6>
      if (attr->stack_size > 0U) {
 80025ec:	6966      	ldr	r6, [r4, #20]
 80025ee:	b186      	cbz	r6, 8002612 <osThreadNew+0x76>
        stack = attr->stack_size / sizeof(StackType_t);
 80025f0:	08b2      	lsrs	r2, r6, #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025f2:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80025f6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80025fa:	f1be 0f00 	cmp.w	lr, #0
 80025fe:	d00a      	beq.n	8002616 <osThreadNew+0x7a>
 8002600:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 8002604:	d902      	bls.n	800260c <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002606:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002608:	b104      	cbz	r4, 800260c <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800260a:	b9ae      	cbnz	r6, 8002638 <osThreadNew+0x9c>
  return ((osThreadId_t)hTask);
 800260c:	9805      	ldr	r0, [sp, #20]
}
 800260e:	b007      	add	sp, #28
 8002610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	e7ed      	b.n	80025f2 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002616:	f1bc 0f00 	cmp.w	ip, #0
 800261a:	d1f7      	bne.n	800260c <osThreadNew+0x70>
      if (mem == 0) {
 800261c:	6924      	ldr	r4, [r4, #16]
 800261e:	2c00      	cmp	r4, #0
 8002620:	d1f4      	bne.n	800260c <osThreadNew+0x70>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002622:	ac05      	add	r4, sp, #20
 8002624:	9401      	str	r4, [sp, #4]
 8002626:	9700      	str	r7, [sp, #0]
 8002628:	b292      	uxth	r2, r2
 800262a:	f000 fff0 	bl	800360e <xTaskCreate>
 800262e:	2801      	cmp	r0, #1
          hTask = NULL;
 8002630:	bf1c      	itt	ne
 8002632:	2300      	movne	r3, #0
 8002634:	9305      	strne	r3, [sp, #20]
 8002636:	e7e9      	b.n	800260c <osThreadNew+0x70>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002638:	f8cd e008 	str.w	lr, [sp, #8]
 800263c:	9401      	str	r4, [sp, #4]
 800263e:	9500      	str	r5, [sp, #0]
 8002640:	f000 ffae 	bl	80035a0 <xTaskCreateStatic>
 8002644:	9005      	str	r0, [sp, #20]
 8002646:	e7e1      	b.n	800260c <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8002648:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800264a:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 800264c:	f10d 0113 	add.w	r1, sp, #19
 8002650:	e7e7      	b.n	8002622 <osThreadNew+0x86>
        return (NULL);
 8002652:	2000      	movs	r0, #0
 8002654:	e7db      	b.n	800260e <osThreadNew+0x72>
 8002656:	bf00      	nop
 8002658:	200002ec 	.word	0x200002ec

0800265c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800265c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800265e:	4606      	mov	r6, r0
 8002660:	460d      	mov	r5, r1
 8002662:	4617      	mov	r7, r2
 8002664:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002666:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 800266a:	b113      	cbz	r3, 8002672 <osTimerNew+0x16>
  hTimer = NULL;
 800266c:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 800266e:	b003      	add	sp, #12
 8002670:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002672:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (func != NULL)) {
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f8      	bne.n	800266c <osTimerNew+0x10>
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <osTimerNew+0x78>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d103      	bne.n	800268a <osTimerNew+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002682:	f3ef 8311 	mrs	r3, BASEPRI
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <osTimerNew+0x10>
 800268a:	2e00      	cmp	r6, #0
 800268c:	d0ee      	beq.n	800266c <osTimerNew+0x10>
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800268e:	2008      	movs	r0, #8
 8002690:	f000 fa58 	bl	8002b44 <pvPortMalloc>
    if (callb != NULL) {
 8002694:	4603      	mov	r3, r0
 8002696:	2800      	cmp	r0, #0
 8002698:	d0e8      	beq.n	800266c <osTimerNew+0x10>
      if (type == osTimerOnce) {
 800269a:	1c2a      	adds	r2, r5, #0
      callb->arg  = argument;
 800269c:	e880 00c0 	stmia.w	r0, {r6, r7}
      if (type == osTimerOnce) {
 80026a0:	bf18      	it	ne
 80026a2:	2201      	movne	r2, #1
      if (attr != NULL) {
 80026a4:	b1a4      	cbz	r4, 80026d0 <osTimerNew+0x74>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80026a6:	68a1      	ldr	r1, [r4, #8]
        if (attr->name != NULL) {
 80026a8:	6820      	ldr	r0, [r4, #0]
 80026aa:	68e4      	ldr	r4, [r4, #12]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80026ac:	b141      	cbz	r1, 80026c0 <osTimerNew+0x64>
 80026ae:	2c2f      	cmp	r4, #47	; 0x2f
 80026b0:	d9dc      	bls.n	800266c <osTimerNew+0x10>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80026b2:	9101      	str	r1, [sp, #4]
 80026b4:	4908      	ldr	r1, [pc, #32]	; (80026d8 <osTimerNew+0x7c>)
 80026b6:	9100      	str	r1, [sp, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	f001 fbda 	bl	8003e72 <xTimerCreateStatic>
 80026be:	e7d6      	b.n	800266e <osTimerNew+0x12>
        if (mem == 0) {
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	d1d3      	bne.n	800266c <osTimerNew+0x10>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80026c4:	4904      	ldr	r1, [pc, #16]	; (80026d8 <osTimerNew+0x7c>)
 80026c6:	9100      	str	r1, [sp, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	f001 fbab 	bl	8003e24 <xTimerCreate>
  return ((osTimerId_t)hTimer);
 80026ce:	e7ce      	b.n	800266e <osTimerNew+0x12>
      name = NULL;
 80026d0:	4620      	mov	r0, r4
 80026d2:	e7f7      	b.n	80026c4 <osTimerNew+0x68>
 80026d4:	200002ec 	.word	0x200002ec
 80026d8:	0800250f 	.word	0x0800250f

080026dc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <vApplicationGetIdleTaskMemory+0x10>)
 80026de:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <vApplicationGetIdleTaskMemory+0x14>)
 80026e2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000290 	.word	0x20000290
 80026f0:	20000090 	.word	0x20000090

080026f4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <vApplicationGetTimerTaskMemory+0x10>)
 80026f6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <vApplicationGetTimerTaskMemory+0x14>)
 80026fa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4770      	bx	lr
 8002704:	200006f0 	.word	0x200006f0
 8002708:	200002f0 	.word	0x200002f0

0800270c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800270c:	f100 0308 	add.w	r3, r0, #8
 8002710:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002712:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002716:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002718:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800271a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800271c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800271e:	6003      	str	r3, [r0, #0]
 8002720:	4770      	bx	lr

08002722 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	6103      	str	r3, [r0, #16]
 8002726:	4770      	bx	lr

08002728 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002728:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800272a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002734:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002736:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002738:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800273a:	3301      	adds	r3, #1
 800273c:	6003      	str	r3, [r0, #0]
 800273e:	4770      	bx	lr

08002740 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002740:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002742:	1c53      	adds	r3, r2, #1
{
 8002744:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002746:	d10a      	bne.n	800275e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002748:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800274e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002750:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002752:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002754:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002756:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002758:	3301      	adds	r3, #1
 800275a:	6003      	str	r3, [r0, #0]
 800275c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800275e:	f100 0308 	add.w	r3, r0, #8
 8002762:	685c      	ldr	r4, [r3, #4]
 8002764:	6825      	ldr	r5, [r4, #0]
 8002766:	42aa      	cmp	r2, r5
 8002768:	d3ef      	bcc.n	800274a <vListInsert+0xa>
 800276a:	4623      	mov	r3, r4
 800276c:	e7f9      	b.n	8002762 <vListInsert+0x22>

0800276e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800276e:	6841      	ldr	r1, [r0, #4]
 8002770:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002772:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002774:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002776:	6882      	ldr	r2, [r0, #8]
 8002778:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800277e:	bf08      	it	eq
 8002780:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002782:	2200      	movs	r2, #0
 8002784:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	3a01      	subs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800278c:	6818      	ldr	r0, [r3, #0]
}
 800278e:	4770      	bx	lr

08002790 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002790:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <prvTaskExitError+0x3c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	d008      	beq.n	80027b0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	e7fe      	b.n	80027ae <prvTaskExitError+0x1e>
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027c0:	9b01      	ldr	r3, [sp, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0fc      	beq.n	80027c0 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027c6:	b002      	add	sp, #8
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000008 	.word	0x20000008

080027d0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027d0:	4808      	ldr	r0, [pc, #32]	; (80027f4 <prvPortStartFirstTask+0x24>)
 80027d2:	6800      	ldr	r0, [r0, #0]
 80027d4:	6800      	ldr	r0, [r0, #0]
 80027d6:	f380 8808 	msr	MSP, r0
 80027da:	f04f 0000 	mov.w	r0, #0
 80027de:	f380 8814 	msr	CONTROL, r0
 80027e2:	b662      	cpsie	i
 80027e4:	b661      	cpsie	f
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	df00      	svc	0
 80027f0:	bf00      	nop
 80027f2:	0000      	.short	0x0000
 80027f4:	e000ed08 	.word	0xe000ed08

080027f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80027f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002808 <vPortEnableVFP+0x10>
 80027fc:	6801      	ldr	r1, [r0, #0]
 80027fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002802:	6001      	str	r1, [r0, #0]
 8002804:	4770      	bx	lr
 8002806:	0000      	.short	0x0000
 8002808:	e000ed88 	.word	0xe000ed88

0800280c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800280c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002810:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <pxPortInitialiseStack+0x28>)
 8002816:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800281a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800281e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002822:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002826:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800282a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800282e:	3844      	subs	r0, #68	; 0x44
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	08002791 	.word	0x08002791
	...

08002840 <SVC_Handler>:
	__asm volatile (
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <pxCurrentTCBConst2>)
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	6808      	ldr	r0, [r1, #0]
 8002846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284a:	f380 8809 	msr	PSP, r0
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f380 8811 	msr	BASEPRI, r0
 800285a:	4770      	bx	lr
 800285c:	f3af 8000 	nop.w

08002860 <pxCurrentTCBConst2>:
 8002860:	2000436c 	.word	0x2000436c

08002864 <vPortEnterCritical>:
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <vPortEnterCritical+0x3c>)
 8002876:	6813      	ldr	r3, [r2, #0]
 8002878:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800287a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800287c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800287e:	d10d      	bne.n	800289c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <vPortEnterCritical+0x40>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002888:	d008      	beq.n	800289c <vPortEnterCritical+0x38>
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	e7fe      	b.n	800289a <vPortEnterCritical+0x36>
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000008 	.word	0x20000008
 80028a4:	e000ed04 	.word	0xe000ed04

080028a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80028a8:	4a08      	ldr	r2, [pc, #32]	; (80028cc <vPortExitCritical+0x24>)
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	b943      	cbnz	r3, 80028c0 <vPortExitCritical+0x18>
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	e7fe      	b.n	80028be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80028c0:	3b01      	subs	r3, #1
 80028c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80028c4:	b90b      	cbnz	r3, 80028ca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	4770      	bx	lr
 80028cc:	20000008 	.word	0x20000008

080028d0 <PendSV_Handler>:
	__asm volatile
 80028d0:	f3ef 8009 	mrs	r0, PSP
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <pxCurrentTCBConst>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	f01e 0f10 	tst.w	lr, #16
 80028e0:	bf08      	it	eq
 80028e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ea:	6010      	str	r0, [r2, #0]
 80028ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028f4:	f380 8811 	msr	BASEPRI, r0
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f001 f854 	bl	80039ac <vTaskSwitchContext>
 8002904:	f04f 0000 	mov.w	r0, #0
 8002908:	f380 8811 	msr	BASEPRI, r0
 800290c:	bc09      	pop	{r0, r3}
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	6808      	ldr	r0, [r1, #0]
 8002912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002916:	f01e 0f10 	tst.w	lr, #16
 800291a:	bf08      	it	eq
 800291c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002920:	f380 8809 	msr	PSP, r0
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	f3af 8000 	nop.w

08002930 <pxCurrentTCBConst>:
 8002930:	2000436c 	.word	0x2000436c

08002934 <SysTick_Handler>:
{
 8002934:	b508      	push	{r3, lr}
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002946:	f000 fee1 	bl	800370c <xTaskIncrementTick>
 800294a:	b118      	cbz	r0, 8002954 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <SysTick_Handler+0x28>)
 800294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002952:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002954:	2300      	movs	r3, #0
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	bd08      	pop	{r3, pc}
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002960:	4a08      	ldr	r2, [pc, #32]	; (8002984 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002962:	4909      	ldr	r1, [pc, #36]	; (8002988 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002964:	2300      	movs	r3, #0
 8002966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002968:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <vPortSetupTimerInterrupt+0x2c>)
 800296c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	fbb3 f3f1 	udiv	r3, r3, r1
 8002976:	4906      	ldr	r1, [pc, #24]	; (8002990 <vPortSetupTimerInterrupt+0x30>)
 8002978:	3b01      	subs	r3, #1
 800297a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800297c:	2307      	movs	r3, #7
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010
 8002988:	e000e018 	.word	0xe000e018
 800298c:	2000000c 	.word	0x2000000c
 8002990:	e000e014 	.word	0xe000e014

08002994 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <xPortStartScheduler+0xe8>)
 8002996:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <xPortStartScheduler+0xec>)
{
 8002998:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	4291      	cmp	r1, r2
 800299e:	d108      	bne.n	80029b2 <xPortStartScheduler+0x1e>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	e7fe      	b.n	80029b0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <xPortStartScheduler+0xf0>)
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d108      	bne.n	80029cc <xPortStartScheduler+0x38>
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	e7fe      	b.n	80029ca <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029cc:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <xPortStartScheduler+0xf4>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029d4:	22ff      	movs	r2, #255	; 0xff
 80029d6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029d8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029da:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80029e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029ea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <xPortStartScheduler+0xfc>)
 80029ee:	2207      	movs	r2, #7
 80029f0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029f2:	2100      	movs	r1, #0
 80029f4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80029f8:	0600      	lsls	r0, r0, #24
 80029fa:	f102 34ff 	add.w	r4, r2, #4294967295
 80029fe:	d40d      	bmi.n	8002a1c <xPortStartScheduler+0x88>
 8002a00:	b101      	cbz	r1, 8002a04 <xPortStartScheduler+0x70>
 8002a02:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2a03      	cmp	r2, #3
 8002a08:	d011      	beq.n	8002a2e <xPortStartScheduler+0x9a>
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	e7fe      	b.n	8002a1a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002a20:	0052      	lsls	r2, r2, #1
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f88d 2003 	strb.w	r2, [sp, #3]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	e7e2      	b.n	80029f4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a2e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a30:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002a34:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a36:	9b01      	ldr	r3, [sp, #4]
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <xPortStartScheduler+0xf4>)
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <xPortStartScheduler+0x100>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a46:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002a4e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002a50:	f7ff ff86 	bl	8002960 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <xPortStartScheduler+0x104>)
 8002a56:	2400      	movs	r4, #0
 8002a58:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002a5a:	f7ff fecd 	bl	80027f8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <xPortStartScheduler+0x108>)
 8002a60:	6813      	ldr	r3, [r2, #0]
 8002a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a66:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002a68:	f7ff feb2 	bl	80027d0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002a6c:	f000 ff9e 	bl	80039ac <vTaskSwitchContext>
	prvTaskExitError();
 8002a70:	f7ff fe8e 	bl	8002790 <prvTaskExitError>
}
 8002a74:	4620      	mov	r0, r4
 8002a76:	b002      	add	sp, #8
 8002a78:	bd10      	pop	{r4, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00
 8002a80:	410fc271 	.word	0x410fc271
 8002a84:	410fc270 	.word	0x410fc270
 8002a88:	e000e400 	.word	0xe000e400
 8002a8c:	2000074c 	.word	0x2000074c
 8002a90:	20000750 	.word	0x20000750
 8002a94:	e000ed20 	.word	0xe000ed20
 8002a98:	20000008 	.word	0x20000008
 8002a9c:	e000ef34 	.word	0xe000ef34

08002aa0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002aa0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002aa4:	2b0f      	cmp	r3, #15
 8002aa6:	d90e      	bls.n	8002ac6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002aa8:	4a10      	ldr	r2, [pc, #64]	; (8002aec <vPortValidateInterruptPriority+0x4c>)
 8002aaa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002aac:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <vPortValidateInterruptPriority+0x50>)
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d908      	bls.n	8002ac6 <vPortValidateInterruptPriority+0x26>
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	e7fe      	b.n	8002ac4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <vPortValidateInterruptPriority+0x54>)
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <vPortValidateInterruptPriority+0x58>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d908      	bls.n	8002ae8 <vPortValidateInterruptPriority+0x48>
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	e7fe      	b.n	8002ae6 <vPortValidateInterruptPriority+0x46>
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e3f0 	.word	0xe000e3f0
 8002af0:	2000074c 	.word	0x2000074c
 8002af4:	e000ed0c 	.word	0xe000ed0c
 8002af8:	20000750 	.word	0x20000750

08002afc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002afc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <prvInsertBlockIntoFreeList+0x40>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4282      	cmp	r2, r0
 8002b04:	d318      	bcc.n	8002b38 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b06:	685c      	ldr	r4, [r3, #4]
 8002b08:	1919      	adds	r1, r3, r4
 8002b0a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b0c:	bf01      	itttt	eq
 8002b0e:	6841      	ldreq	r1, [r0, #4]
 8002b10:	4618      	moveq	r0, r3
 8002b12:	1909      	addeq	r1, r1, r4
 8002b14:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b16:	6844      	ldr	r4, [r0, #4]
 8002b18:	1901      	adds	r1, r0, r4
 8002b1a:	428a      	cmp	r2, r1
 8002b1c:	d107      	bne.n	8002b2e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <prvInsertBlockIntoFreeList+0x44>)
 8002b20:	6809      	ldr	r1, [r1, #0]
 8002b22:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b24:	bf1f      	itttt	ne
 8002b26:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b28:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b2a:	1909      	addne	r1, r1, r4
 8002b2c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b2e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b30:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b32:	bf18      	it	ne
 8002b34:	6018      	strne	r0, [r3, #0]
 8002b36:	bd10      	pop	{r4, pc}
 8002b38:	4613      	mov	r3, r2
 8002b3a:	e7e1      	b.n	8002b00 <prvInsertBlockIntoFreeList+0x4>
 8002b3c:	20004364 	.word	0x20004364
 8002b40:	20000754 	.word	0x20000754

08002b44 <pvPortMalloc>:
{
 8002b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b48:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002b4a:	f000 fdd1 	bl	80036f0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002b4e:	493e      	ldr	r1, [pc, #248]	; (8002c48 <pvPortMalloc+0x104>)
 8002b50:	4d3e      	ldr	r5, [pc, #248]	; (8002c4c <pvPortMalloc+0x108>)
 8002b52:	680b      	ldr	r3, [r1, #0]
 8002b54:	bb0b      	cbnz	r3, 8002b9a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002b56:	4a3e      	ldr	r2, [pc, #248]	; (8002c50 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b58:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b5a:	bf1f      	itttt	ne
 8002b5c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b5e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b62:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002b66:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b68:	bf14      	ite	ne
 8002b6a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b6c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b70:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002b72:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b74:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b78:	4e36      	ldr	r6, [pc, #216]	; (8002c54 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002b7a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b80:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002b82:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002b84:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b86:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b88:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b8a:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b8c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b8e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b90:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <pvPortMalloc+0x118>)
 8002b92:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b98:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b9a:	682f      	ldr	r7, [r5, #0]
 8002b9c:	4227      	tst	r7, r4
 8002b9e:	d116      	bne.n	8002bce <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002ba0:	2c00      	cmp	r4, #0
 8002ba2:	d041      	beq.n	8002c28 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002ba4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ba8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002baa:	bf1c      	itt	ne
 8002bac:	f023 0307 	bicne.w	r3, r3, #7
 8002bb0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002bb2:	b163      	cbz	r3, 8002bce <pvPortMalloc+0x8a>
 8002bb4:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <pvPortMalloc+0x118>)
 8002bb6:	6816      	ldr	r6, [r2, #0]
 8002bb8:	42b3      	cmp	r3, r6
 8002bba:	4690      	mov	r8, r2
 8002bbc:	d807      	bhi.n	8002bce <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002bbe:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <pvPortMalloc+0x110>)
 8002bc0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002bc2:	6868      	ldr	r0, [r5, #4]
 8002bc4:	4283      	cmp	r3, r0
 8002bc6:	d804      	bhi.n	8002bd2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002bc8:	6809      	ldr	r1, [r1, #0]
 8002bca:	428d      	cmp	r5, r1
 8002bcc:	d107      	bne.n	8002bde <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002bce:	2400      	movs	r4, #0
 8002bd0:	e02a      	b.n	8002c28 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002bd2:	682c      	ldr	r4, [r5, #0]
 8002bd4:	2c00      	cmp	r4, #0
 8002bd6:	d0f7      	beq.n	8002bc8 <pvPortMalloc+0x84>
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4625      	mov	r5, r4
 8002bdc:	e7f1      	b.n	8002bc2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002bde:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002be0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002be2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002be4:	1ac2      	subs	r2, r0, r3
 8002be6:	2a10      	cmp	r2, #16
 8002be8:	d90f      	bls.n	8002c0a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002bea:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bec:	0741      	lsls	r1, r0, #29
 8002bee:	d008      	beq.n	8002c02 <pvPortMalloc+0xbe>
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	e7fe      	b.n	8002c00 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c02:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002c04:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002c06:	f7ff ff79 	bl	8002afc <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c0a:	4913      	ldr	r1, [pc, #76]	; (8002c58 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c0c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c0e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c10:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c12:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c14:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002c16:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c1a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c1e:	bf38      	it	cc
 8002c20:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c22:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c24:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002c26:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002c28:	f000 fe00 	bl	800382c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c2c:	0763      	lsls	r3, r4, #29
 8002c2e:	d008      	beq.n	8002c42 <pvPortMalloc+0xfe>
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	e7fe      	b.n	8002c40 <pvPortMalloc+0xfc>
}
 8002c42:	4620      	mov	r0, r4
 8002c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c48:	20000754 	.word	0x20000754
 8002c4c:	20004358 	.word	0x20004358
 8002c50:	20000758 	.word	0x20000758
 8002c54:	20004364 	.word	0x20004364
 8002c58:	20004360 	.word	0x20004360
 8002c5c:	2000435c 	.word	0x2000435c

08002c60 <vPortFree>:
{
 8002c60:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002c62:	4604      	mov	r4, r0
 8002c64:	b370      	cbz	r0, 8002cc4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c66:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <vPortFree+0x68>)
 8002c68:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	4213      	tst	r3, r2
 8002c70:	d108      	bne.n	8002c84 <vPortFree+0x24>
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	e7fe      	b.n	8002c82 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c84:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002c88:	b141      	cbz	r1, 8002c9c <vPortFree+0x3c>
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	e7fe      	b.n	8002c9a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c9c:	ea23 0302 	bic.w	r3, r3, r2
 8002ca0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002ca4:	f000 fd24 	bl	80036f0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ca8:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <vPortFree+0x6c>)
 8002caa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002cae:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002cb0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002cb4:	440b      	add	r3, r1
 8002cb6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002cb8:	f7ff ff20 	bl	8002afc <prvInsertBlockIntoFreeList>
}
 8002cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002cc0:	f000 bdb4 	b.w	800382c <xTaskResumeAll>
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20004358 	.word	0x20004358
 8002ccc:	2000435c 	.word	0x2000435c

08002cd0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cd4:	f7ff fdc6 	bl	8002864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cd8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002cda:	f7ff fde5 	bl	80028a8 <vPortExitCritical>

	return xReturn;
}
 8002cde:	fab4 f084 	clz	r0, r4
 8002ce2:	0940      	lsrs	r0, r0, #5
 8002ce4:	bd10      	pop	{r4, pc}

08002ce6 <prvCopyDataToQueue>:
{
 8002ce6:	b570      	push	{r4, r5, r6, lr}
 8002ce8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cea:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cec:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002cee:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cf0:	b942      	cbnz	r2, 8002d04 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cf2:	6805      	ldr	r5, [r0, #0]
 8002cf4:	b99d      	cbnz	r5, 8002d1e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002cf6:	6840      	ldr	r0, [r0, #4]
 8002cf8:	f000 ff6a 	bl	8003bd0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002cfc:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cfe:	3601      	adds	r6, #1
 8002d00:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002d04:	b96d      	cbnz	r5, 8002d22 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d06:	6880      	ldr	r0, [r0, #8]
 8002d08:	f001 fff0 	bl	8004cec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d0c:	68a3      	ldr	r3, [r4, #8]
 8002d0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d10:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d12:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d14:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d301      	bcc.n	8002d1e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002d1e:	2000      	movs	r0, #0
 8002d20:	e7ed      	b.n	8002cfe <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d22:	68c0      	ldr	r0, [r0, #12]
 8002d24:	f001 ffe2 	bl	8004cec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d2a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d2c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d2e:	425b      	negs	r3, r3
 8002d30:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d32:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d34:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002d36:	bf3e      	ittt	cc
 8002d38:	6862      	ldrcc	r2, [r4, #4]
 8002d3a:	189b      	addcc	r3, r3, r2
 8002d3c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002d3e:	2d02      	cmp	r5, #2
 8002d40:	d1ed      	bne.n	8002d1e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d42:	b10e      	cbz	r6, 8002d48 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002d44:	3e01      	subs	r6, #1
 8002d46:	e7ea      	b.n	8002d1e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002d48:	4630      	mov	r0, r6
 8002d4a:	e7d8      	b.n	8002cfe <prvCopyDataToQueue+0x18>

08002d4c <prvCopyDataFromQueue>:
{
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002d52:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d54:	b162      	cbz	r2, 8002d70 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d56:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d58:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d5a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d5c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d5e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d60:	bf24      	itt	cs
 8002d62:	6819      	ldrcs	r1, [r3, #0]
 8002d64:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d66:	68d9      	ldr	r1, [r3, #12]
}
 8002d68:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d6c:	f001 bfbe 	b.w	8004cec <memcpy>
}
 8002d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <prvUnlockQueue>:
{
 8002d76:	b570      	push	{r4, r5, r6, lr}
 8002d78:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002d7a:	f7ff fd73 	bl	8002864 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002d7e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d82:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002d86:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	dc14      	bgt.n	8002db6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8002d8c:	23ff      	movs	r3, #255	; 0xff
 8002d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002d92:	f7ff fd89 	bl	80028a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002d96:	f7ff fd65 	bl	8002864 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002d9a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d9e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002da2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	dc12      	bgt.n	8002dce <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002da8:	23ff      	movs	r3, #255	; 0xff
 8002daa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8002dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002db2:	f7ff bd79 	b.w	80028a8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0e7      	beq.n	8002d8c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f000 fe69 	bl	8003a94 <xTaskRemoveFromEventList>
 8002dc2:	b108      	cbz	r0, 8002dc8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002dc4:	f000 feee 	bl	8003ba4 <vTaskMissedYield>
 8002dc8:	3d01      	subs	r5, #1
 8002dca:	b26d      	sxtb	r5, r5
 8002dcc:	e7dc      	b.n	8002d88 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dce:	6923      	ldr	r3, [r4, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0e9      	beq.n	8002da8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	f000 fe5d 	bl	8003a94 <xTaskRemoveFromEventList>
 8002dda:	b108      	cbz	r0, 8002de0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002ddc:	f000 fee2 	bl	8003ba4 <vTaskMissedYield>
 8002de0:	3d01      	subs	r5, #1
 8002de2:	b26d      	sxtb	r5, r5
 8002de4:	e7de      	b.n	8002da4 <prvUnlockQueue+0x2e>
	...

08002de8 <xQueueGenericReset>:
{
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002dec:	4604      	mov	r4, r0
 8002dee:	b940      	cbnz	r0, 8002e02 <xQueueGenericReset+0x1a>
 8002df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	e7fe      	b.n	8002e00 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002e02:	f7ff fd2f 	bl	8002864 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e06:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e0a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e0c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e0e:	4343      	muls	r3, r0
 8002e10:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e12:	1a1b      	subs	r3, r3, r0
 8002e14:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e16:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e18:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e1a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002e1c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e1e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002e20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002e28:	b995      	cbnz	r5, 8002e50 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2a:	6923      	ldr	r3, [r4, #16]
 8002e2c:	b163      	cbz	r3, 8002e48 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e2e:	f104 0010 	add.w	r0, r4, #16
 8002e32:	f000 fe2f 	bl	8003a94 <xTaskRemoveFromEventList>
 8002e36:	b138      	cbz	r0, 8002e48 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <xQueueGenericReset+0x7c>)
 8002e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002e48:	f7ff fd2e 	bl	80028a8 <vPortExitCritical>
}
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e50:	f104 0010 	add.w	r0, r4, #16
 8002e54:	f7ff fc5a 	bl	800270c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e5c:	f7ff fc56 	bl	800270c <vListInitialise>
 8002e60:	e7f2      	b.n	8002e48 <xQueueGenericReset+0x60>
 8002e62:	bf00      	nop
 8002e64:	e000ed04 	.word	0xe000ed04

08002e68 <xQueueGenericCreateStatic>:
	{
 8002e68:	b513      	push	{r0, r1, r4, lr}
 8002e6a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e6c:	b940      	cbnz	r0, 8002e80 <xQueueGenericCreateStatic+0x18>
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	e7fe      	b.n	8002e7e <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8002e80:	b943      	cbnz	r3, 8002e94 <xQueueGenericCreateStatic+0x2c>
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	e7fe      	b.n	8002e92 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e94:	b14a      	cbz	r2, 8002eaa <xQueueGenericCreateStatic+0x42>
 8002e96:	b9d9      	cbnz	r1, 8002ed0 <xQueueGenericCreateStatic+0x68>
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	e7fe      	b.n	8002ea8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002eaa:	b189      	cbz	r1, 8002ed0 <xQueueGenericCreateStatic+0x68>
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	e7fe      	b.n	8002ebc <xQueueGenericCreateStatic+0x54>
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	e7fe      	b.n	8002ece <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ed0:	2350      	movs	r3, #80	; 0x50
 8002ed2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ed4:	9b01      	ldr	r3, [sp, #4]
 8002ed6:	2b50      	cmp	r3, #80	; 0x50
 8002ed8:	d1f1      	bne.n	8002ebe <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002eda:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002edc:	2900      	cmp	r1, #0
 8002ede:	bf08      	it	eq
 8002ee0:	4622      	moveq	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ee2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8002ee6:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ee8:	6421      	str	r1, [r4, #64]	; 0x40
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002eea:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eec:	4619      	mov	r1, r3
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff ff7a 	bl	8002de8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002ef4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002ef8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8002efc:	4620      	mov	r0, r4
 8002efe:	b002      	add	sp, #8
 8002f00:	bd10      	pop	{r4, pc}
	...

08002f04 <xQueueGenericSend>:
{
 8002f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f08:	4689      	mov	r9, r1
 8002f0a:	9201      	str	r2, [sp, #4]
 8002f0c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002f0e:	4604      	mov	r4, r0
 8002f10:	b940      	cbnz	r0, 8002f24 <xQueueGenericSend+0x20>
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	e7fe      	b.n	8002f22 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f24:	2900      	cmp	r1, #0
 8002f26:	f040 8088 	bne.w	800303a <xQueueGenericSend+0x136>
 8002f2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8084 	beq.w	800303a <xQueueGenericSend+0x136>
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	e7fe      	b.n	8002f42 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f44:	9e01      	ldr	r6, [sp, #4]
 8002f46:	2e00      	cmp	r6, #0
 8002f48:	f000 8082 	beq.w	8003050 <xQueueGenericSend+0x14c>
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f5e:	9d01      	ldr	r5, [sp, #4]
 8002f60:	b91d      	cbnz	r5, 8002f6a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8002f62:	f7ff fca1 	bl	80028a8 <vPortExitCritical>
			return errQUEUE_FULL;
 8002f66:	2000      	movs	r0, #0
 8002f68:	e058      	b.n	800301c <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002f6a:	b916      	cbnz	r6, 8002f72 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f6c:	a802      	add	r0, sp, #8
 8002f6e:	f000 fdd1 	bl	8003b14 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002f72:	f7ff fc99 	bl	80028a8 <vPortExitCritical>
		vTaskSuspendAll();
 8002f76:	f000 fbbb 	bl	80036f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f7a:	f7ff fc73 	bl	8002864 <vPortEnterCritical>
 8002f7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002f82:	2bff      	cmp	r3, #255	; 0xff
 8002f84:	bf08      	it	eq
 8002f86:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002f8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002f8e:	2bff      	cmp	r3, #255	; 0xff
 8002f90:	bf08      	it	eq
 8002f92:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002f96:	f7ff fc87 	bl	80028a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f9a:	a901      	add	r1, sp, #4
 8002f9c:	a802      	add	r0, sp, #8
 8002f9e:	f000 fdc5 	bl	8003b2c <xTaskCheckForTimeOut>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d143      	bne.n	800302e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa6:	f7ff fc5d 	bl	8002864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002faa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002fac:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002fae:	f7ff fc7b 	bl	80028a8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fb2:	42ae      	cmp	r6, r5
 8002fb4:	d135      	bne.n	8003022 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fb6:	9901      	ldr	r1, [sp, #4]
 8002fb8:	f104 0010 	add.w	r0, r4, #16
 8002fbc:	f000 fd32 	bl	8003a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7ff fed8 	bl	8002d76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fc6:	f000 fc31 	bl	800382c <xTaskResumeAll>
 8002fca:	b938      	cbnz	r0, 8002fdc <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002fcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fd0:	f8ca 3000 	str.w	r3, [sl]
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002fde:	f7ff fc41 	bl	8002864 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d301      	bcc.n	8002fee <xQueueGenericSend+0xea>
 8002fea:	2f02      	cmp	r7, #2
 8002fec:	d1b7      	bne.n	8002f5e <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fee:	463a      	mov	r2, r7
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff fe77 	bl	8002ce6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ffa:	b11b      	cbz	r3, 8003004 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ffc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003000:	f000 fd48 	bl	8003a94 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003004:	b138      	cbz	r0, 8003016 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <xQueueGenericSend+0x168>)
 8003008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003016:	f7ff fc47 	bl	80028a8 <vPortExitCritical>
				return pdPASS;
 800301a:	2001      	movs	r0, #1
}
 800301c:	b004      	add	sp, #16
 800301e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003022:	4620      	mov	r0, r4
 8003024:	f7ff fea7 	bl	8002d76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003028:	f000 fc00 	bl	800382c <xTaskResumeAll>
 800302c:	e7d6      	b.n	8002fdc <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff fea1 	bl	8002d76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003034:	f000 fbfa 	bl	800382c <xTaskResumeAll>
 8003038:	e795      	b.n	8002f66 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800303a:	2f02      	cmp	r7, #2
 800303c:	d102      	bne.n	8003044 <xQueueGenericSend+0x140>
 800303e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10a      	bne.n	800305a <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003044:	f000 fdb4 	bl	8003bb0 <xTaskGetSchedulerState>
 8003048:	2800      	cmp	r0, #0
 800304a:	f43f af7b 	beq.w	8002f44 <xQueueGenericSend+0x40>
 800304e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003050:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003054:	f8df a014 	ldr.w	sl, [pc, #20]	; 800306c <xQueueGenericSend+0x168>
 8003058:	e7c1      	b.n	8002fde <xQueueGenericSend+0xda>
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	e7fe      	b.n	800306a <xQueueGenericSend+0x166>
 800306c:	e000ed04 	.word	0xe000ed04

08003070 <xQueueGenericSendFromISR>:
{
 8003070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003074:	4688      	mov	r8, r1
 8003076:	4691      	mov	r9, r2
 8003078:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800307a:	4604      	mov	r4, r0
 800307c:	b940      	cbnz	r0, 8003090 <xQueueGenericSendFromISR+0x20>
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	e7fe      	b.n	800308e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003090:	bb09      	cbnz	r1, 80030d6 <xQueueGenericSendFromISR+0x66>
 8003092:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003094:	b1fb      	cbz	r3, 80030d6 <xQueueGenericSendFromISR+0x66>
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	e7fe      	b.n	80030a6 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030ac:	f000 fcf2 	bl	8003a94 <xTaskRemoveFromEventList>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d034      	beq.n	800311e <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 80030b4:	f1b9 0f00 	cmp.w	r9, #0
 80030b8:	d031      	beq.n	800311e <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030ba:	2001      	movs	r0, #1
 80030bc:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80030c0:	f386 8811 	msr	BASEPRI, r6
}
 80030c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030c8:	3501      	adds	r5, #1
 80030ca:	b26d      	sxtb	r5, r5
 80030cc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80030d0:	e025      	b.n	800311e <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 80030d2:	2000      	movs	r0, #0
 80030d4:	e7f4      	b.n	80030c0 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030d6:	2f02      	cmp	r7, #2
 80030d8:	d102      	bne.n	80030e0 <xQueueGenericSendFromISR+0x70>
 80030da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d120      	bne.n	8003122 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030e0:	f7ff fcde 	bl	8002aa0 <vPortValidateInterruptPriority>
	__asm volatile
 80030e4:	f3ef 8611 	mrs	r6, BASEPRI
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80030fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d301      	bcc.n	8003104 <xQueueGenericSendFromISR+0x94>
 8003100:	2f02      	cmp	r7, #2
 8003102:	d1e6      	bne.n	80030d2 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003104:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003108:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800310a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800310c:	4641      	mov	r1, r8
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff fde9 	bl	8002ce6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003114:	1c6b      	adds	r3, r5, #1
 8003116:	d1d7      	bne.n	80030c8 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1c4      	bne.n	80030a8 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 800311e:	2001      	movs	r0, #1
 8003120:	e7ce      	b.n	80030c0 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	e7fe      	b.n	8003132 <xQueueGenericSendFromISR+0xc2>

08003134 <xQueueReceive>:
{
 8003134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003138:	b085      	sub	sp, #20
 800313a:	4688      	mov	r8, r1
 800313c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800313e:	4604      	mov	r4, r0
 8003140:	b940      	cbnz	r0, 8003154 <xQueueReceive+0x20>
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	e7fe      	b.n	8003152 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003154:	2900      	cmp	r1, #0
 8003156:	f040 8086 	bne.w	8003266 <xQueueReceive+0x132>
 800315a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8082 	beq.w	8003266 <xQueueReceive+0x132>
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	e7fe      	b.n	8003172 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003174:	9e01      	ldr	r6, [sp, #4]
 8003176:	2e00      	cmp	r6, #0
 8003178:	d07a      	beq.n	8003270 <xQueueReceive+0x13c>
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	e7fe      	b.n	800318a <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 800318c:	9d01      	ldr	r5, [sp, #4]
 800318e:	b91d      	cbnz	r5, 8003198 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8003190:	f7ff fb8a 	bl	80028a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003194:	2000      	movs	r0, #0
 8003196:	e052      	b.n	800323e <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8003198:	b916      	cbnz	r6, 80031a0 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800319a:	a802      	add	r0, sp, #8
 800319c:	f000 fcba 	bl	8003b14 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80031a0:	f7ff fb82 	bl	80028a8 <vPortExitCritical>
		vTaskSuspendAll();
 80031a4:	f000 faa4 	bl	80036f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031a8:	f7ff fb5c 	bl	8002864 <vPortEnterCritical>
 80031ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80031b0:	2bff      	cmp	r3, #255	; 0xff
 80031b2:	bf08      	it	eq
 80031b4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80031b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80031bc:	2bff      	cmp	r3, #255	; 0xff
 80031be:	bf08      	it	eq
 80031c0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80031c4:	f7ff fb70 	bl	80028a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031c8:	a901      	add	r1, sp, #4
 80031ca:	a802      	add	r0, sp, #8
 80031cc:	f000 fcae 	bl	8003b2c <xTaskCheckForTimeOut>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d13d      	bne.n	8003250 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff fd7b 	bl	8002cd0 <prvIsQueueEmpty>
 80031da:	b398      	cbz	r0, 8003244 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031dc:	9901      	ldr	r1, [sp, #4]
 80031de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80031e2:	f000 fc1f 	bl	8003a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff fdc5 	bl	8002d76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031ec:	f000 fb1e 	bl	800382c <xTaskResumeAll>
 80031f0:	b938      	cbnz	r0, 8003202 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 80031f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031f6:	f8c9 3000 	str.w	r3, [r9]
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003204:	f7ff fb2e 	bl	8002864 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003208:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800320a:	2d00      	cmp	r5, #0
 800320c:	d0be      	beq.n	800318c <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800320e:	4641      	mov	r1, r8
 8003210:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003212:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003214:	f7ff fd9a 	bl	8002d4c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003218:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800321a:	6923      	ldr	r3, [r4, #16]
 800321c:	b163      	cbz	r3, 8003238 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800321e:	f104 0010 	add.w	r0, r4, #16
 8003222:	f000 fc37 	bl	8003a94 <xTaskRemoveFromEventList>
 8003226:	b138      	cbz	r0, 8003238 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <xQueueReceive+0x144>)
 800322a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003238:	f7ff fb36 	bl	80028a8 <vPortExitCritical>
				return pdPASS;
 800323c:	2001      	movs	r0, #1
}
 800323e:	b005      	add	sp, #20
 8003240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8003244:	4620      	mov	r0, r4
 8003246:	f7ff fd96 	bl	8002d76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800324a:	f000 faef 	bl	800382c <xTaskResumeAll>
 800324e:	e7d8      	b.n	8003202 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff fd90 	bl	8002d76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003256:	f000 fae9 	bl	800382c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800325a:	4620      	mov	r0, r4
 800325c:	f7ff fd38 	bl	8002cd0 <prvIsQueueEmpty>
 8003260:	2800      	cmp	r0, #0
 8003262:	d0ce      	beq.n	8003202 <xQueueReceive+0xce>
 8003264:	e796      	b.n	8003194 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003266:	f000 fca3 	bl	8003bb0 <xTaskGetSchedulerState>
 800326a:	2800      	cmp	r0, #0
 800326c:	d082      	beq.n	8003174 <xQueueReceive+0x40>
 800326e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003270:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003272:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8003278 <xQueueReceive+0x144>
 8003276:	e7c5      	b.n	8003204 <xQueueReceive+0xd0>
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800327c:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003280:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003282:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003286:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800328a:	b91d      	cbnz	r5, 8003294 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800328c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003290:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003292:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003294:	3301      	adds	r3, #1
 8003296:	2b08      	cmp	r3, #8
 8003298:	d1f3      	bne.n	8003282 <vQueueAddToRegistry+0x6>
 800329a:	bd30      	pop	{r4, r5, pc}
 800329c:	200049a4 	.word	0x200049a4

080032a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4604      	mov	r4, r0
 80032a4:	460d      	mov	r5, r1
 80032a6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032a8:	f7ff fadc 	bl	8002864 <vPortEnterCritical>
 80032ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80032b0:	2bff      	cmp	r3, #255	; 0xff
 80032b2:	bf04      	itt	eq
 80032b4:	2300      	moveq	r3, #0
 80032b6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80032ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80032be:	2bff      	cmp	r3, #255	; 0xff
 80032c0:	bf04      	itt	eq
 80032c2:	2300      	moveq	r3, #0
 80032c4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80032c8:	f7ff faee 	bl	80028a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032ce:	b92b      	cbnz	r3, 80032dc <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032d0:	4632      	mov	r2, r6
 80032d2:	4629      	mov	r1, r5
 80032d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032d8:	f000 fbbe 	bl	8003a58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032dc:	4620      	mov	r0, r4
	}
 80032de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80032e2:	f7ff bd48 	b.w	8002d76 <prvUnlockQueue>
	...

080032e8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ec:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032ee:	f7ff fab9 	bl	8002864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 80032f4:	4d2e      	ldr	r5, [pc, #184]	; (80033b0 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4f2e      	ldr	r7, [pc, #184]	; (80033b4 <prvAddNewTaskToReadyList+0xcc>)
 80032fa:	3201      	adds	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80032fe:	682e      	ldr	r6, [r5, #0]
 8003300:	2e00      	cmp	r6, #0
 8003302:	d147      	bne.n	8003394 <prvAddNewTaskToReadyList+0xac>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003304:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d11d      	bne.n	8003348 <prvAddNewTaskToReadyList+0x60>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800330c:	19b8      	adds	r0, r7, r6
 800330e:	3614      	adds	r6, #20
 8003310:	f7ff f9fc 	bl	800270c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003314:	f5b6 6f8c 	cmp.w	r6, #1120	; 0x460
 8003318:	d1f8      	bne.n	800330c <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800331a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80033e0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800331e:	4e26      	ldr	r6, [pc, #152]	; (80033b8 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8003320:	4640      	mov	r0, r8
 8003322:	f7ff f9f3 	bl	800270c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003326:	4630      	mov	r0, r6
 8003328:	f7ff f9f0 	bl	800270c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800332c:	4823      	ldr	r0, [pc, #140]	; (80033bc <prvAddNewTaskToReadyList+0xd4>)
 800332e:	f7ff f9ed 	bl	800270c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003332:	4823      	ldr	r0, [pc, #140]	; (80033c0 <prvAddNewTaskToReadyList+0xd8>)
 8003334:	f7ff f9ea 	bl	800270c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003338:	4822      	ldr	r0, [pc, #136]	; (80033c4 <prvAddNewTaskToReadyList+0xdc>)
 800333a:	f7ff f9e7 	bl	800270c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <prvAddNewTaskToReadyList+0xe0>)
 8003340:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <prvAddNewTaskToReadyList+0xe4>)
 8003346:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8003348:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <prvAddNewTaskToReadyList+0xe8>)
 800334a:	6813      	ldr	r3, [r2, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003350:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003352:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003354:	6811      	ldr	r1, [r2, #0]
 8003356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003358:	2014      	movs	r0, #20
 800335a:	428b      	cmp	r3, r1
 800335c:	fb00 7003 	mla	r0, r0, r3, r7
 8003360:	f104 0104 	add.w	r1, r4, #4
 8003364:	bf88      	it	hi
 8003366:	6013      	strhi	r3, [r2, #0]
 8003368:	f7ff f9de 	bl	8002728 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800336c:	f7ff fa9c 	bl	80028a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <prvAddNewTaskToReadyList+0xf0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b163      	cbz	r3, 8003390 <prvAddNewTaskToReadyList+0xa8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800337c:	429a      	cmp	r2, r3
 800337e:	d207      	bcs.n	8003390 <prvAddNewTaskToReadyList+0xa8>
			taskYIELD_IF_USING_PREEMPTION();
 8003380:	4b16      	ldr	r3, [pc, #88]	; (80033dc <prvAddNewTaskToReadyList+0xf4>)
 8003382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <prvAddNewTaskToReadyList+0xf0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1d5      	bne.n	8003348 <prvAddNewTaskToReadyList+0x60>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800339c:	682b      	ldr	r3, [r5, #0]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033a2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80033a4:	bf98      	it	ls
 80033a6:	602c      	strls	r4, [r5, #0]
 80033a8:	e7ce      	b.n	8003348 <prvAddNewTaskToReadyList+0x60>
 80033aa:	bf00      	nop
 80033ac:	200047d8 	.word	0x200047d8
 80033b0:	2000436c 	.word	0x2000436c
 80033b4:	20004378 	.word	0x20004378
 80033b8:	20004804 	.word	0x20004804
 80033bc:	20004820 	.word	0x20004820
 80033c0:	2000484c 	.word	0x2000484c
 80033c4:	20004838 	.word	0x20004838
 80033c8:	20004370 	.word	0x20004370
 80033cc:	20004374 	.word	0x20004374
 80033d0:	200047e8 	.word	0x200047e8
 80033d4:	200047ec 	.word	0x200047ec
 80033d8:	20004834 	.word	0x20004834
 80033dc:	e000ed04 	.word	0xe000ed04
 80033e0:	200047f0 	.word	0x200047f0

080033e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e4:	4a06      	ldr	r2, [pc, #24]	; (8003400 <prvResetNextTaskUnblockTime+0x1c>)
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <prvResetNextTaskUnblockTime+0x20>)
 80033ec:	b919      	cbnz	r1, 80033f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033ee:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033fa:	68d2      	ldr	r2, [r2, #12]
 80033fc:	6852      	ldr	r2, [r2, #4]
 80033fe:	e7f8      	b.n	80033f2 <prvResetNextTaskUnblockTime+0xe>
 8003400:	20004370 	.word	0x20004370
 8003404:	20004818 	.word	0x20004818

08003408 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800340c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800340e:	9f09      	ldr	r7, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003410:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003412:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003414:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003416:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003418:	21a5      	movs	r1, #165	; 0xa5
 800341a:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800341c:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800341e:	f001 fc70 	bl	8004d02 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003422:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003424:	3e04      	subs	r6, #4
 8003426:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003428:	f026 0607 	bic.w	r6, r6, #7
 800342c:	1e6b      	subs	r3, r5, #1
 800342e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003432:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003434:	7859      	ldrb	r1, [r3, #1]
 8003436:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800343a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800343e:	b109      	cbz	r1, 8003444 <prvInitialiseNewTask.isra.2+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003440:	42ab      	cmp	r3, r5
 8003442:	d1f7      	bne.n	8003434 <prvInitialiseNewTask.isra.2+0x2c>
 8003444:	9d08      	ldr	r5, [sp, #32]
 8003446:	2d37      	cmp	r5, #55	; 0x37
 8003448:	bf28      	it	cs
 800344a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800344c:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8003450:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003452:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003454:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003456:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800345a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800345e:	f7ff f960 	bl	8002722 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003462:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003466:	f104 0018 	add.w	r0, r4, #24
 800346a:	f7ff f95a 	bl	8002722 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800346e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003472:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003474:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003476:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003478:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800347c:	464a      	mov	r2, r9
 800347e:	4641      	mov	r1, r8
 8003480:	4630      	mov	r0, r6
 8003482:	f7ff f9c3 	bl	800280c <pxPortInitialiseStack>
 8003486:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003488:	b107      	cbz	r7, 800348c <prvInitialiseNewTask.isra.2+0x84>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800348a:	603c      	str	r4, [r7, #0]
 800348c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003490 <prvDeleteTCB>:
	{
 8003490:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003492:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8003496:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003498:	b93b      	cbnz	r3, 80034aa <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800349a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800349c:	f7ff fbe0 	bl	8002c60 <vPortFree>
				vPortFree( pxTCB );
 80034a0:	4620      	mov	r0, r4
	}
 80034a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80034a6:	f7ff bbdb 	b.w	8002c60 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d0f9      	beq.n	80034a2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d008      	beq.n	80034c4 <prvDeleteTCB+0x34>
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	e7fe      	b.n	80034c2 <prvDeleteTCB+0x32>
 80034c4:	bd10      	pop	{r4, pc}
	...

080034c8 <prvIdleTask>:
{
 80034c8:	b580      	push	{r7, lr}
				taskYIELD();
 80034ca:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003528 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034ce:	4f12      	ldr	r7, [pc, #72]	; (8003518 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034d0:	4c12      	ldr	r4, [pc, #72]	; (800351c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80034d2:	4d13      	ldr	r5, [pc, #76]	; (8003520 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	b963      	cbnz	r3, 80034f2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034d8:	4b12      	ldr	r3, [pc, #72]	; (8003524 <prvIdleTask+0x5c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d9f8      	bls.n	80034d2 <prvIdleTask+0xa>
				taskYIELD();
 80034e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034e4:	f8c8 3000 	str.w	r3, [r8]
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	e7ee      	b.n	80034d0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80034f2:	f7ff f9b7 	bl	8002864 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034fa:	1d30      	adds	r0, r6, #4
 80034fc:	f7ff f937 	bl	800276e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	3b01      	subs	r3, #1
 800350a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800350c:	f7ff f9cc 	bl	80028a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003510:	4630      	mov	r0, r6
 8003512:	f7ff ffbd 	bl	8003490 <prvDeleteTCB>
 8003516:	e7dd      	b.n	80034d4 <prvIdleTask+0xc>
 8003518:	2000484c 	.word	0x2000484c
 800351c:	200047dc 	.word	0x200047dc
 8003520:	200047d8 	.word	0x200047d8
 8003524:	20004378 	.word	0x20004378
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003530:	4d16      	ldr	r5, [pc, #88]	; (800358c <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8003532:	681e      	ldr	r6, [r3, #0]
{
 8003534:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003536:	6828      	ldr	r0, [r5, #0]
 8003538:	3004      	adds	r0, #4
{
 800353a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800353c:	f7ff f917 	bl	800276e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003540:	1c63      	adds	r3, r4, #1
 8003542:	462b      	mov	r3, r5
 8003544:	d107      	bne.n	8003556 <prvAddCurrentTaskToDelayedList+0x2a>
 8003546:	b137      	cbz	r7, 8003556 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003548:	6829      	ldr	r1, [r5, #0]
 800354a:	4811      	ldr	r0, [pc, #68]	; (8003590 <prvAddCurrentTaskToDelayedList+0x64>)
 800354c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800354e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003552:	f7ff b8e9 	b.w	8002728 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003556:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003558:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800355a:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800355c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800355e:	d907      	bls.n	8003570 <prvAddCurrentTaskToDelayedList+0x44>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003560:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <prvAddCurrentTaskToDelayedList+0x68>)
 8003562:	6810      	ldr	r0, [r2, #0]
 8003564:	6819      	ldr	r1, [r3, #0]
}
 8003566:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800356a:	3104      	adds	r1, #4
 800356c:	f7ff b8e8 	b.w	8002740 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003570:	4a09      	ldr	r2, [pc, #36]	; (8003598 <prvAddCurrentTaskToDelayedList+0x6c>)
 8003572:	6810      	ldr	r0, [r2, #0]
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	3104      	adds	r1, #4
 8003578:	f7ff f8e2 	bl	8002740 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <prvAddCurrentTaskToDelayedList+0x70>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003582:	bf38      	it	cc
 8003584:	601c      	strcc	r4, [r3, #0]
 8003586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003588:	20004860 	.word	0x20004860
 800358c:	2000436c 	.word	0x2000436c
 8003590:	20004838 	.word	0x20004838
 8003594:	20004374 	.word	0x20004374
 8003598:	20004370 	.word	0x20004370
 800359c:	20004818 	.word	0x20004818

080035a0 <xTaskCreateStatic>:
	{
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80035a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80035a8:	b945      	cbnz	r5, 80035bc <xTaskCreateStatic+0x1c>
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	e7fe      	b.n	80035ba <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80035bc:	b944      	cbnz	r4, 80035d0 <xTaskCreateStatic+0x30>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	e7fe      	b.n	80035ce <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80035d0:	265c      	movs	r6, #92	; 0x5c
 80035d2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035d4:	9e04      	ldr	r6, [sp, #16]
 80035d6:	2e5c      	cmp	r6, #92	; 0x5c
 80035d8:	d008      	beq.n	80035ec <xTaskCreateStatic+0x4c>
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	e7fe      	b.n	80035ea <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035ec:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035ee:	2502      	movs	r5, #2
 80035f0:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035f4:	ad05      	add	r5, sp, #20
 80035f6:	9501      	str	r5, [sp, #4]
 80035f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80035fa:	9402      	str	r4, [sp, #8]
 80035fc:	9500      	str	r5, [sp, #0]
 80035fe:	f7ff ff03 	bl	8003408 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003602:	4620      	mov	r0, r4
 8003604:	f7ff fe70 	bl	80032e8 <prvAddNewTaskToReadyList>
	}
 8003608:	9805      	ldr	r0, [sp, #20]
 800360a:	b006      	add	sp, #24
 800360c:	bd70      	pop	{r4, r5, r6, pc}

0800360e <xTaskCreate>:
	{
 800360e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003612:	4607      	mov	r7, r0
 8003614:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003616:	0090      	lsls	r0, r2, #2
	{
 8003618:	4688      	mov	r8, r1
 800361a:	4616      	mov	r6, r2
 800361c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800361e:	f7ff fa91 	bl	8002b44 <pvPortMalloc>
			if( pxStack != NULL )
 8003622:	4605      	mov	r5, r0
 8003624:	b1e8      	cbz	r0, 8003662 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003626:	205c      	movs	r0, #92	; 0x5c
 8003628:	f7ff fa8c 	bl	8002b44 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800362c:	4604      	mov	r4, r0
 800362e:	b1a8      	cbz	r0, 800365c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003630:	2300      	movs	r3, #0
 8003632:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003638:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800363e:	9002      	str	r0, [sp, #8]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	4632      	mov	r2, r6
 8003644:	464b      	mov	r3, r9
 8003646:	4641      	mov	r1, r8
 8003648:	4638      	mov	r0, r7
 800364a:	f7ff fedd 	bl	8003408 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800364e:	4620      	mov	r0, r4
 8003650:	f7ff fe4a 	bl	80032e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003654:	2001      	movs	r0, #1
	}
 8003656:	b005      	add	sp, #20
 8003658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800365c:	4628      	mov	r0, r5
 800365e:	f7ff faff 	bl	8002c60 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003662:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003666:	e7f6      	b.n	8003656 <xTaskCreate+0x48>

08003668 <vTaskStartScheduler>:
{
 8003668:	b510      	push	{r4, lr}
 800366a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800366c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800366e:	aa07      	add	r2, sp, #28
 8003670:	a906      	add	r1, sp, #24
 8003672:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003674:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003676:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003678:	f7ff f830 	bl	80026dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800367c:	9b05      	ldr	r3, [sp, #20]
 800367e:	9302      	str	r3, [sp, #8]
 8003680:	9b06      	ldr	r3, [sp, #24]
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	9400      	str	r4, [sp, #0]
 8003686:	4623      	mov	r3, r4
 8003688:	9a07      	ldr	r2, [sp, #28]
 800368a:	4914      	ldr	r1, [pc, #80]	; (80036dc <vTaskStartScheduler+0x74>)
 800368c:	4814      	ldr	r0, [pc, #80]	; (80036e0 <vTaskStartScheduler+0x78>)
 800368e:	f7ff ff87 	bl	80035a0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003692:	b9a0      	cbnz	r0, 80036be <vTaskStartScheduler+0x56>
}
 8003694:	b008      	add	sp, #32
 8003696:	bd10      	pop	{r4, pc}
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <vTaskStartScheduler+0x7c>)
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <vTaskStartScheduler+0x80>)
 80036b2:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <vTaskStartScheduler+0x84>)
 80036b6:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80036b8:	f7ff f96c 	bl	8002994 <xPortStartScheduler>
 80036bc:	e7ea      	b.n	8003694 <vTaskStartScheduler+0x2c>
			xReturn = xTimerCreateTimerTask();
 80036be:	f000 fb7d 	bl	8003dbc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80036c2:	2801      	cmp	r0, #1
 80036c4:	d0e8      	beq.n	8003698 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036c6:	3001      	adds	r0, #1
 80036c8:	d1e4      	bne.n	8003694 <vTaskStartScheduler+0x2c>
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	e7fe      	b.n	80036da <vTaskStartScheduler+0x72>
 80036dc:	08005558 	.word	0x08005558
 80036e0:	080034c9 	.word	0x080034c9
 80036e4:	20004818 	.word	0x20004818
 80036e8:	20004834 	.word	0x20004834
 80036ec:	20004860 	.word	0x20004860

080036f0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80036f0:	4a02      	ldr	r2, [pc, #8]	; (80036fc <vTaskSuspendAll+0xc>)
 80036f2:	6813      	ldr	r3, [r2, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	200047e4 	.word	0x200047e4

08003700 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <xTaskGetTickCount+0x8>)
 8003702:	6818      	ldr	r0, [r3, #0]
}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20004860 	.word	0x20004860

0800370c <xTaskIncrementTick>:
{
 800370c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <xTaskIncrementTick+0xf4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d151      	bne.n	80037bc <xTaskIncrementTick+0xb0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003718:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <xTaskIncrementTick+0xf8>)
 800371a:	681c      	ldr	r4, [r3, #0]
 800371c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800371e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003720:	b9bc      	cbnz	r4, 8003752 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003722:	4b39      	ldr	r3, [pc, #228]	; (8003808 <xTaskIncrementTick+0xfc>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	b142      	cbz	r2, 800373c <xTaskIncrementTick+0x30>
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	e7fe      	b.n	800373a <xTaskIncrementTick+0x2e>
 800373c:	4a33      	ldr	r2, [pc, #204]	; (800380c <xTaskIncrementTick+0x100>)
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	6810      	ldr	r0, [r2, #0]
 8003742:	6018      	str	r0, [r3, #0]
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	4a32      	ldr	r2, [pc, #200]	; (8003810 <xTaskIncrementTick+0x104>)
 8003748:	6813      	ldr	r3, [r2, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	f7ff fe49 	bl	80033e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003752:	4d30      	ldr	r5, [pc, #192]	; (8003814 <xTaskIncrementTick+0x108>)
 8003754:	4f30      	ldr	r7, [pc, #192]	; (8003818 <xTaskIncrementTick+0x10c>)
 8003756:	682b      	ldr	r3, [r5, #0]
 8003758:	429c      	cmp	r4, r3
 800375a:	f04f 0b00 	mov.w	fp, #0
 800375e:	d33c      	bcc.n	80037da <xTaskIncrementTick+0xce>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003760:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003808 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8003764:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8003828 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003768:	f8d8 2000 	ldr.w	r2, [r8]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	bb62      	cbnz	r2, 80037ca <xTaskIncrementTick+0xbe>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003770:	f04f 32ff 	mov.w	r2, #4294967295
 8003774:	602a      	str	r2, [r5, #0]
					break;
 8003776:	e030      	b.n	80037da <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003778:	f106 0a04 	add.w	sl, r6, #4
 800377c:	4650      	mov	r0, sl
 800377e:	f7fe fff6 	bl	800276e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003782:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003784:	b119      	cbz	r1, 800378e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003786:	f106 0018 	add.w	r0, r6, #24
 800378a:	f7fe fff0 	bl	800276e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800378e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003790:	f8d9 1000 	ldr.w	r1, [r9]
 8003794:	4b21      	ldr	r3, [pc, #132]	; (800381c <xTaskIncrementTick+0x110>)
 8003796:	4288      	cmp	r0, r1
 8003798:	f04f 0214 	mov.w	r2, #20
 800379c:	bf88      	it	hi
 800379e:	f8c9 0000 	strhi.w	r0, [r9]
 80037a2:	4651      	mov	r1, sl
 80037a4:	fb02 3000 	mla	r0, r2, r0, r3
 80037a8:	f7fe ffbe 	bl	8002728 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ac:	6838      	ldr	r0, [r7, #0]
 80037ae:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80037b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80037b2:	4291      	cmp	r1, r2
 80037b4:	bf28      	it	cs
 80037b6:	f04f 0b01 	movcs.w	fp, #1
 80037ba:	e7d5      	b.n	8003768 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <xTaskIncrementTick+0x114>)
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80037c4:	f04f 0b00 	mov.w	fp, #0
 80037c8:	e011      	b.n	80037ee <xTaskIncrementTick+0xe2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037ca:	f8d8 2000 	ldr.w	r2, [r8]
 80037ce:	68d2      	ldr	r2, [r2, #12]
 80037d0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037d2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80037d4:	428c      	cmp	r4, r1
 80037d6:	d2cf      	bcs.n	8003778 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80037d8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <xTaskIncrementTick+0x110>)
 80037de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037e0:	2214      	movs	r2, #20
 80037e2:	434a      	muls	r2, r1
 80037e4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80037e6:	2a02      	cmp	r2, #2
 80037e8:	bf28      	it	cs
 80037ea:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80037ee:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <xTaskIncrementTick+0x118>)
 80037f0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	bf18      	it	ne
 80037f6:	f04f 0b01 	movne.w	fp, #1
}
 80037fa:	4658      	mov	r0, fp
 80037fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003800:	200047e4 	.word	0x200047e4
 8003804:	20004860 	.word	0x20004860
 8003808:	20004370 	.word	0x20004370
 800380c:	20004374 	.word	0x20004374
 8003810:	2000481c 	.word	0x2000481c
 8003814:	20004818 	.word	0x20004818
 8003818:	2000436c 	.word	0x2000436c
 800381c:	20004378 	.word	0x20004378
 8003820:	200047e0 	.word	0x200047e0
 8003824:	20004864 	.word	0x20004864
 8003828:	200047ec 	.word	0x200047ec

0800382c <xTaskResumeAll>:
{
 800382c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8003830:	4c2f      	ldr	r4, [pc, #188]	; (80038f0 <xTaskResumeAll+0xc4>)
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	b943      	cbnz	r3, 8003848 <xTaskResumeAll+0x1c>
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	e7fe      	b.n	8003846 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003848:	f7ff f80c 	bl	8002864 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	3b01      	subs	r3, #1
 8003850:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003852:	6824      	ldr	r4, [r4, #0]
 8003854:	b12c      	cbz	r4, 8003862 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003856:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003858:	f7ff f826 	bl	80028a8 <vPortExitCritical>
}
 800385c:	4620      	mov	r0, r4
 800385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <xTaskResumeAll+0xc8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f5      	beq.n	8003856 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800386a:	4e23      	ldr	r6, [pc, #140]	; (80038f8 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800386c:	4f23      	ldr	r7, [pc, #140]	; (80038fc <xTaskResumeAll+0xd0>)
 800386e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003910 <xTaskResumeAll+0xe4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003872:	6833      	ldr	r3, [r6, #0]
 8003874:	b9e3      	cbnz	r3, 80038b0 <xTaskResumeAll+0x84>
				if( pxTCB != NULL )
 8003876:	b10c      	cbz	r4, 800387c <xTaskResumeAll+0x50>
					prvResetNextTaskUnblockTime();
 8003878:	f7ff fdb4 	bl	80033e4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800387c:	4d20      	ldr	r5, [pc, #128]	; (8003900 <xTaskResumeAll+0xd4>)
 800387e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003880:	b144      	cbz	r4, 8003894 <xTaskResumeAll+0x68>
								xYieldPending = pdTRUE;
 8003882:	4e20      	ldr	r6, [pc, #128]	; (8003904 <xTaskResumeAll+0xd8>)
 8003884:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003886:	f7ff ff41 	bl	800370c <xTaskIncrementTick>
 800388a:	b100      	cbz	r0, 800388e <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 800388c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800388e:	3c01      	subs	r4, #1
 8003890:	d1f9      	bne.n	8003886 <xTaskResumeAll+0x5a>
						uxPendedTicks = 0;
 8003892:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003894:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <xTaskResumeAll+0xd8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0dc      	beq.n	8003856 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <xTaskResumeAll+0xdc>)
 800389e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80038ac:	2401      	movs	r4, #1
 80038ae:	e7d3      	b.n	8003858 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038b0:	68f3      	ldr	r3, [r6, #12]
 80038b2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038b4:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038b6:	f104 0018 	add.w	r0, r4, #24
 80038ba:	f7fe ff58 	bl	800276e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038be:	4628      	mov	r0, r5
 80038c0:	f7fe ff55 	bl	800276e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	2014      	movs	r0, #20
 80038ca:	4293      	cmp	r3, r2
 80038cc:	fb00 8003 	mla	r0, r0, r3, r8
 80038d0:	4629      	mov	r1, r5
 80038d2:	bf88      	it	hi
 80038d4:	603b      	strhi	r3, [r7, #0]
 80038d6:	f7fe ff27 	bl	8002728 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <xTaskResumeAll+0xe0>)
 80038dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80038e4:	bf22      	ittt	cs
 80038e6:	4b07      	ldrcs	r3, [pc, #28]	; (8003904 <xTaskResumeAll+0xd8>)
 80038e8:	2201      	movcs	r2, #1
 80038ea:	601a      	strcs	r2, [r3, #0]
 80038ec:	e7c1      	b.n	8003872 <xTaskResumeAll+0x46>
 80038ee:	bf00      	nop
 80038f0:	200047e4 	.word	0x200047e4
 80038f4:	200047d8 	.word	0x200047d8
 80038f8:	20004820 	.word	0x20004820
 80038fc:	200047ec 	.word	0x200047ec
 8003900:	200047e0 	.word	0x200047e0
 8003904:	20004864 	.word	0x20004864
 8003908:	e000ed04 	.word	0xe000ed04
 800390c:	2000436c 	.word	0x2000436c
 8003910:	20004378 	.word	0x20004378

08003914 <vTaskDelayUntil>:
	{
 8003914:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8003916:	b940      	cbnz	r0, 800392a <vTaskDelayUntil+0x16>
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	e7fe      	b.n	8003928 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 800392a:	b941      	cbnz	r1, 800393e <vTaskDelayUntil+0x2a>
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	e7fe      	b.n	800393c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 800393e:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <vTaskDelayUntil+0x8c>)
 8003940:	681c      	ldr	r4, [r3, #0]
 8003942:	b144      	cbz	r4, 8003956 <vTaskDelayUntil+0x42>
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	e7fe      	b.n	8003954 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8003956:	f7ff fecb 	bl	80036f0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800395c:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800395e:	681d      	ldr	r5, [r3, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8003960:	4295      	cmp	r5, r2
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003962:	eb01 0302 	add.w	r3, r1, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8003966:	d217      	bcs.n	8003998 <vTaskDelayUntil+0x84>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003968:	429a      	cmp	r2, r3
 800396a:	d903      	bls.n	8003974 <vTaskDelayUntil+0x60>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800396c:	429d      	cmp	r5, r3
 800396e:	bf2c      	ite	cs
 8003970:	2400      	movcs	r4, #0
 8003972:	2401      	movcc	r4, #1
			*pxPreviousWakeTime = xTimeToWake;
 8003974:	6003      	str	r3, [r0, #0]
			if( xShouldDelay != pdFALSE )
 8003976:	b11c      	cbz	r4, 8003980 <vTaskDelayUntil+0x6c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003978:	2100      	movs	r1, #0
 800397a:	1b58      	subs	r0, r3, r5
 800397c:	f7ff fdd6 	bl	800352c <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8003980:	f7ff ff54 	bl	800382c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003984:	b938      	cbnz	r0, 8003996 <vTaskDelayUntil+0x82>
			portYIELD_WITHIN_API();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <vTaskDelayUntil+0x94>)
 8003988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003998:	429a      	cmp	r2, r3
 800399a:	d9e7      	bls.n	800396c <vTaskDelayUntil+0x58>
					xShouldDelay = pdTRUE;
 800399c:	2401      	movs	r4, #1
 800399e:	e7e9      	b.n	8003974 <vTaskDelayUntil+0x60>
 80039a0:	200047e4 	.word	0x200047e4
 80039a4:	20004860 	.word	0x20004860
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039ac:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <vTaskSwitchContext+0x64>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <vTaskSwitchContext+0x68>)
{
 80039b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039b4:	b112      	cbz	r2, 80039bc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039bc:	4d16      	ldr	r5, [pc, #88]	; (8003a18 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 80039be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039c0:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <vTaskSwitchContext+0x70>)
 80039c2:	682b      	ldr	r3, [r5, #0]
 80039c4:	2714      	movs	r7, #20
 80039c6:	4616      	mov	r6, r2
 80039c8:	fb07 f103 	mul.w	r1, r7, r3
 80039cc:	1850      	adds	r0, r2, r1
 80039ce:	5854      	ldr	r4, [r2, r1]
 80039d0:	b18c      	cbz	r4, 80039f6 <vTaskSwitchContext+0x4a>
 80039d2:	6844      	ldr	r4, [r0, #4]
 80039d4:	3108      	adds	r1, #8
 80039d6:	6864      	ldr	r4, [r4, #4]
 80039d8:	6044      	str	r4, [r0, #4]
 80039da:	440a      	add	r2, r1
 80039dc:	4294      	cmp	r4, r2
 80039de:	bf04      	itt	eq
 80039e0:	6862      	ldreq	r2, [r4, #4]
 80039e2:	6042      	streq	r2, [r0, #4]
 80039e4:	2214      	movs	r2, #20
 80039e6:	fb02 6203 	mla	r2, r2, r3, r6
 80039ea:	6852      	ldr	r2, [r2, #4]
 80039ec:	68d1      	ldr	r1, [r2, #12]
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <vTaskSwitchContext+0x74>)
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f6:	b943      	cbnz	r3, 8003a0a <vTaskSwitchContext+0x5e>
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	e7fe      	b.n	8003a08 <vTaskSwitchContext+0x5c>
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	e7dc      	b.n	80039c8 <vTaskSwitchContext+0x1c>
 8003a0e:	bf00      	nop
 8003a10:	200047e4 	.word	0x200047e4
 8003a14:	20004864 	.word	0x20004864
 8003a18:	200047ec 	.word	0x200047ec
 8003a1c:	20004378 	.word	0x20004378
 8003a20:	2000436c 	.word	0x2000436c

08003a24 <vTaskPlaceOnEventList>:
{
 8003a24:	b510      	push	{r4, lr}
 8003a26:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003a28:	b940      	cbnz	r0, 8003a3c <vTaskPlaceOnEventList+0x18>
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	e7fe      	b.n	8003a3a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <vTaskPlaceOnEventList+0x30>)
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	3118      	adds	r1, #24
 8003a42:	f7fe fe7d 	bl	8002740 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a46:	4620      	mov	r0, r4
 8003a48:	2101      	movs	r1, #1
}
 8003a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a4e:	f7ff bd6d 	b.w	800352c <prvAddCurrentTaskToDelayedList>
 8003a52:	bf00      	nop
 8003a54:	2000436c 	.word	0x2000436c

08003a58 <vTaskPlaceOnEventListRestricted>:
	{
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	460d      	mov	r5, r1
 8003a5c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8003a5e:	b940      	cbnz	r0, 8003a72 <vTaskPlaceOnEventListRestricted+0x1a>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	e7fe      	b.n	8003a70 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <vTaskPlaceOnEventListRestricted+0x38>)
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	3118      	adds	r1, #24
 8003a78:	f7fe fe56 	bl	8002728 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8003a7c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a7e:	4621      	mov	r1, r4
 8003a80:	bf0c      	ite	eq
 8003a82:	4628      	moveq	r0, r5
 8003a84:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8003a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a8c:	f7ff bd4e 	b.w	800352c <prvAddCurrentTaskToDelayedList>
 8003a90:	2000436c 	.word	0x2000436c

08003a94 <xTaskRemoveFromEventList>:
{
 8003a94:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a96:	68c3      	ldr	r3, [r0, #12]
 8003a98:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003a9a:	b944      	cbnz	r4, 8003aae <xTaskRemoveFromEventList+0x1a>
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	e7fe      	b.n	8003aac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003aae:	f104 0518 	add.w	r5, r4, #24
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f7fe fe5b 	bl	800276e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <xTaskRemoveFromEventList+0x68>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	b9db      	cbnz	r3, 8003af6 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003abe:	1d25      	adds	r5, r4, #4
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f7fe fe54 	bl	800276e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <xTaskRemoveFromEventList+0x6c>)
 8003ac8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003aca:	6811      	ldr	r1, [r2, #0]
 8003acc:	428b      	cmp	r3, r1
 8003ace:	bf88      	it	hi
 8003ad0:	6013      	strhi	r3, [r2, #0]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <xTaskRemoveFromEventList+0x70>)
 8003ad4:	2014      	movs	r0, #20
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003adc:	f7fe fe24 	bl	8002728 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <xTaskRemoveFromEventList+0x74>)
 8003ae2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003aea:	bf83      	ittte	hi
 8003aec:	4b07      	ldrhi	r3, [pc, #28]	; (8003b0c <xTaskRemoveFromEventList+0x78>)
 8003aee:	2001      	movhi	r0, #1
 8003af0:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003af2:	2000      	movls	r0, #0
}
 8003af4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003af6:	4629      	mov	r1, r5
 8003af8:	4805      	ldr	r0, [pc, #20]	; (8003b10 <xTaskRemoveFromEventList+0x7c>)
 8003afa:	e7ef      	b.n	8003adc <xTaskRemoveFromEventList+0x48>
 8003afc:	200047e4 	.word	0x200047e4
 8003b00:	200047ec 	.word	0x200047ec
 8003b04:	20004378 	.word	0x20004378
 8003b08:	2000436c 	.word	0x2000436c
 8003b0c:	20004864 	.word	0x20004864
 8003b10:	20004820 	.word	0x20004820

08003b14 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <vTaskInternalSetTimeOutState+0x10>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b1a:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <vTaskInternalSetTimeOutState+0x14>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6043      	str	r3, [r0, #4]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2000481c 	.word	0x2000481c
 8003b28:	20004860 	.word	0x20004860

08003b2c <xTaskCheckForTimeOut>:
{
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003b30:	4605      	mov	r5, r0
 8003b32:	b940      	cbnz	r0, 8003b46 <xTaskCheckForTimeOut+0x1a>
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	e7fe      	b.n	8003b44 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003b46:	b941      	cbnz	r1, 8003b5a <xTaskCheckForTimeOut+0x2e>
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	e7fe      	b.n	8003b58 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003b5a:	f7fe fe83 	bl	8002864 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b60:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003b62:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	1c58      	adds	r0, r3, #1
 8003b68:	d00e      	beq.n	8003b88 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b6a:	480d      	ldr	r0, [pc, #52]	; (8003ba0 <xTaskCheckForTimeOut+0x74>)
 8003b6c:	682e      	ldr	r6, [r5, #0]
 8003b6e:	6800      	ldr	r0, [r0, #0]
 8003b70:	4286      	cmp	r6, r0
 8003b72:	d001      	beq.n	8003b78 <xTaskCheckForTimeOut+0x4c>
 8003b74:	428a      	cmp	r2, r1
 8003b76:	d20e      	bcs.n	8003b96 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b78:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d209      	bcs.n	8003b92 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b82:	4628      	mov	r0, r5
 8003b84:	f7ff ffc6 	bl	8003b14 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8003b88:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003b8a:	f7fe fe8d 	bl	80028a8 <vPortExitCritical>
}
 8003b8e:	4620      	mov	r0, r4
 8003b90:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003b96:	2401      	movs	r4, #1
 8003b98:	e7f7      	b.n	8003b8a <xTaskCheckForTimeOut+0x5e>
 8003b9a:	bf00      	nop
 8003b9c:	20004860 	.word	0x20004860
 8003ba0:	2000481c 	.word	0x2000481c

08003ba4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003ba4:	4b01      	ldr	r3, [pc, #4]	; (8003bac <vTaskMissedYield+0x8>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	4770      	bx	lr
 8003bac:	20004864 	.word	0x20004864

08003bb0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <xTaskGetSchedulerState+0x18>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	b133      	cbz	r3, 8003bc4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <xTaskGetSchedulerState+0x1c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2002      	moveq	r0, #2
 8003bc0:	2000      	movne	r0, #0
 8003bc2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bc4:	2001      	movs	r0, #1
	}
 8003bc6:	4770      	bx	lr
 8003bc8:	20004834 	.word	0x20004834
 8003bcc:	200047e4 	.word	0x200047e4

08003bd0 <xTaskPriorityDisinherit>:
	{
 8003bd0:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	b908      	cbnz	r0, 8003bda <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <xTaskPriorityDisinherit+0x78>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4298      	cmp	r0, r3
 8003be0:	d008      	beq.n	8003bf4 <xTaskPriorityDisinherit+0x24>
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	e7fe      	b.n	8003bf2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bf4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003bf6:	b943      	cbnz	r3, 8003c0a <xTaskPriorityDisinherit+0x3a>
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	e7fe      	b.n	8003c08 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003c0c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8003c0e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c10:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003c12:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c14:	d0df      	beq.n	8003bd6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1dd      	bne.n	8003bd6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c1a:	1d05      	adds	r5, r0, #4
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f7fe fda6 	bl	800276e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c24:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c2a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <xTaskPriorityDisinherit+0x7c>)
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	428b      	cmp	r3, r1
 8003c32:	bf88      	it	hi
 8003c34:	6013      	strhi	r3, [r2, #0]
 8003c36:	4a06      	ldr	r2, [pc, #24]	; (8003c50 <xTaskPriorityDisinherit+0x80>)
 8003c38:	2014      	movs	r0, #20
 8003c3a:	fb00 2003 	mla	r0, r0, r3, r2
 8003c3e:	4629      	mov	r1, r5
 8003c40:	f7fe fd72 	bl	8002728 <vListInsertEnd>
					xReturn = pdTRUE;
 8003c44:	2001      	movs	r0, #1
	}
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	2000436c 	.word	0x2000436c
 8003c4c:	200047ec 	.word	0x200047ec
 8003c50:	20004378 	.word	0x20004378

08003c54 <vTaskNotifyGiveFromISR>:
	{
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	460d      	mov	r5, r1
		configASSERT( xTaskToNotify );
 8003c58:	4604      	mov	r4, r0
 8003c5a:	b940      	cbnz	r0, 8003c6e <vTaskNotifyGiveFromISR+0x1a>
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	e7fe      	b.n	8003c6c <vTaskNotifyGiveFromISR+0x18>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c6e:	f7fe ff17 	bl	8002aa0 <vPortValidateInterruptPriority>
	__asm volatile
 8003c72:	f3ef 8711 	mrs	r7, BASEPRI
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003c86:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003c88:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003c8c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			( pxTCB->ulNotifiedValue )++;
 8003c90:	6d63      	ldr	r3, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003c92:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8003c94:	f103 0301 	add.w	r3, r3, #1
 8003c98:	6563      	str	r3, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003c9a:	d127      	bne.n	8003cec <vTaskNotifyGiveFromISR+0x98>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003c9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c9e:	b143      	cbz	r3, 8003cb2 <vTaskNotifyGiveFromISR+0x5e>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskNotifyGiveFromISR+0x5c>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <vTaskNotifyGiveFromISR+0xac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	b9e3      	cbnz	r3, 8003cf2 <vTaskNotifyGiveFromISR+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb8:	1d26      	adds	r6, r4, #4
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f7fe fd57 	bl	800276e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc0:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <vTaskNotifyGiveFromISR+0xb0>)
 8003cc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cc4:	6811      	ldr	r1, [r2, #0]
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	bf88      	it	hi
 8003cca:	6013      	strhi	r3, [r2, #0]
 8003ccc:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <vTaskNotifyGiveFromISR+0xb4>)
 8003cce:	2014      	movs	r0, #20
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003cd6:	f7fe fd27 	bl	8002728 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <vTaskNotifyGiveFromISR+0xb8>)
 8003cdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d902      	bls.n	8003cec <vTaskNotifyGiveFromISR+0x98>
 8003ce6:	2301      	movs	r3, #1
					if( pxHigherPriorityTaskWoken != NULL )
 8003ce8:	b13d      	cbz	r5, 8003cfa <vTaskNotifyGiveFromISR+0xa6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003cea:	602b      	str	r3, [r5, #0]
	__asm volatile
 8003cec:	f387 8811 	msr	BASEPRI, r7
 8003cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003cf2:	f104 0118 	add.w	r1, r4, #24
 8003cf6:	4806      	ldr	r0, [pc, #24]	; (8003d10 <vTaskNotifyGiveFromISR+0xbc>)
 8003cf8:	e7ed      	b.n	8003cd6 <vTaskNotifyGiveFromISR+0x82>
						xYieldPending = pdTRUE;
 8003cfa:	4a06      	ldr	r2, [pc, #24]	; (8003d14 <vTaskNotifyGiveFromISR+0xc0>)
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e7f5      	b.n	8003cec <vTaskNotifyGiveFromISR+0x98>
 8003d00:	200047e4 	.word	0x200047e4
 8003d04:	200047ec 	.word	0x200047ec
 8003d08:	20004378 	.word	0x20004378
 8003d0c:	2000436c 	.word	0x2000436c
 8003d10:	20004820 	.word	0x20004820
 8003d14:	20004864 	.word	0x20004864

08003d18 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003d1a:	4c11      	ldr	r4, [pc, #68]	; (8003d60 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8003d1c:	f7fe fda2 	bl	8002864 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003d20:	6825      	ldr	r5, [r4, #0]
 8003d22:	b9bd      	cbnz	r5, 8003d54 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d24:	4f0f      	ldr	r7, [pc, #60]	; (8003d64 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8003d26:	4e10      	ldr	r6, [pc, #64]	; (8003d68 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8003d28:	4638      	mov	r0, r7
 8003d2a:	f7fe fcef 	bl	800270c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f7fe fcec 	bl	800270c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d36:	4a0e      	ldr	r2, [pc, #56]	; (8003d70 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8003d38:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d3c:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8003d3e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d40:	200a      	movs	r0, #10
 8003d42:	9500      	str	r5, [sp, #0]
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <prvCheckForValidListAndQueue+0x60>)
 8003d46:	f7ff f88f 	bl	8002e68 <xQueueGenericCreateStatic>
 8003d4a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d4c:	b110      	cbz	r0, 8003d54 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d4e:	490b      	ldr	r1, [pc, #44]	; (8003d7c <prvCheckForValidListAndQueue+0x64>)
 8003d50:	f7ff fa94 	bl	800327c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8003d54:	b003      	add	sp, #12
 8003d56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8003d5a:	f7fe bda5 	b.w	80028a8 <vPortExitCritical>
 8003d5e:	bf00      	nop
 8003d60:	2000498c 	.word	0x2000498c
 8003d64:	20004910 	.word	0x20004910
 8003d68:	20004924 	.word	0x20004924
 8003d6c:	20004868 	.word	0x20004868
 8003d70:	20004870 	.word	0x20004870
 8003d74:	2000486c 	.word	0x2000486c
 8003d78:	2000493c 	.word	0x2000493c
 8003d7c:	0800555d 	.word	0x0800555d

08003d80 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8003d80:	4291      	cmp	r1, r2
{
 8003d82:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d84:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d86:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8003d88:	d80a      	bhi.n	8003da0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d8a:	1ad2      	subs	r2, r2, r3
 8003d8c:	6983      	ldr	r3, [r0, #24]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d20d      	bcs.n	8003dae <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <prvInsertTimerInActiveList+0x34>)
 8003d94:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f7fe fcd2 	bl	8002740 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d201      	bcs.n	8003da8 <prvInsertTimerInActiveList+0x28>
 8003da4:	4299      	cmp	r1, r3
 8003da6:	d202      	bcs.n	8003dae <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003da8:	1d01      	adds	r1, r0, #4
 8003daa:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <prvInsertTimerInActiveList+0x38>)
 8003dac:	e7f3      	b.n	8003d96 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8003dae:	2001      	movs	r0, #1
}
 8003db0:	bd08      	pop	{r3, pc}
 8003db2:	bf00      	nop
 8003db4:	2000486c 	.word	0x2000486c
 8003db8:	20004868 	.word	0x20004868

08003dbc <xTimerCreateTimerTask>:
{
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8003dc0:	f7ff ffaa 	bl	8003d18 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <xTimerCreateTimerTask+0x58>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	b943      	cbnz	r3, 8003ddc <xTimerCreateTimerTask+0x20>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	e7fe      	b.n	8003dda <xTimerCreateTimerTask+0x1e>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ddc:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003dde:	aa07      	add	r2, sp, #28
 8003de0:	a906      	add	r1, sp, #24
 8003de2:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003de4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003de6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003de8:	f7fe fc84 	bl	80026f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003dec:	9b05      	ldr	r3, [sp, #20]
 8003dee:	9302      	str	r3, [sp, #8]
 8003df0:	9b06      	ldr	r3, [sp, #24]
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	2302      	movs	r3, #2
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	9a07      	ldr	r2, [sp, #28]
 8003dfa:	4907      	ldr	r1, [pc, #28]	; (8003e18 <xTimerCreateTimerTask+0x5c>)
 8003dfc:	4807      	ldr	r0, [pc, #28]	; (8003e1c <xTimerCreateTimerTask+0x60>)
 8003dfe:	4623      	mov	r3, r4
 8003e00:	f7ff fbce 	bl	80035a0 <xTaskCreateStatic>
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <xTimerCreateTimerTask+0x64>)
 8003e06:	6018      	str	r0, [r3, #0]
	configASSERT( xReturn );
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d0de      	beq.n	8003dca <xTimerCreateTimerTask+0xe>
}
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	b008      	add	sp, #32
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	bf00      	nop
 8003e14:	2000498c 	.word	0x2000498c
 8003e18:	08005562 	.word	0x08005562
 8003e1c:	08003fc1 	.word	0x08003fc1
 8003e20:	20004990 	.word	0x20004990

08003e24 <xTimerCreate>:
	{
 8003e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e28:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003e2a:	2030      	movs	r0, #48	; 0x30
	{
 8003e2c:	460d      	mov	r5, r1
 8003e2e:	4617      	mov	r7, r2
 8003e30:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003e32:	f7fe fe87 	bl	8002b44 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8003e36:	4604      	mov	r4, r0
 8003e38:	b1c0      	cbz	r0, 8003e6c <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003e3a:	b945      	cbnz	r5, 8003e4e <xTimerCreate+0x2a>
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	e7fe      	b.n	8003e4c <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8003e4e:	f7ff ff63 	bl	8003d18 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003e52:	9b06      	ldr	r3, [sp, #24]
 8003e54:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8003e56:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003e5a:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003e5c:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003e5e:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003e60:	1d20      	adds	r0, r4, #4
 8003e62:	f7fe fc5e 	bl	8002722 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e72 <xTimerCreateStatic>:
	{
 8003e72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003e76:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003e78:	2330      	movs	r3, #48	; 0x30
 8003e7a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003e7c:	9b01      	ldr	r3, [sp, #4]
	{
 8003e7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8003e80:	2b30      	cmp	r3, #48	; 0x30
	{
 8003e82:	4680      	mov	r8, r0
 8003e84:	460d      	mov	r5, r1
 8003e86:	4617      	mov	r7, r2
			configASSERT( xSize == sizeof( Timer_t ) );
 8003e88:	d008      	beq.n	8003e9c <xTimerCreateStatic+0x2a>
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	e7fe      	b.n	8003e9a <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8003e9c:	b944      	cbnz	r4, 8003eb0 <xTimerCreateStatic+0x3e>
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	e7fe      	b.n	8003eae <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003eb0:	b941      	cbnz	r1, 8003ec4 <xTimerCreateStatic+0x52>
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	e7fe      	b.n	8003ec2 <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8003ec4:	f7ff ff28 	bl	8003d18 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003ec8:	9b08      	ldr	r3, [sp, #32]
 8003eca:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003ecc:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 8003ece:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003ed2:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003ed4:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003ed6:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003ed8:	f7fe fc23 	bl	8002722 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003edc:	2301      	movs	r3, #1
	}
 8003ede:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003ee0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8003ee4:	b002      	add	sp, #8
 8003ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003eec <xTimerGenericCommand>:
{
 8003eec:	b530      	push	{r4, r5, lr}
 8003eee:	4615      	mov	r5, r2
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	b940      	cbnz	r0, 8003f0a <xTimerGenericCommand+0x1e>
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	e7fe      	b.n	8003f08 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8003f0a:	4c0d      	ldr	r4, [pc, #52]	; (8003f40 <xTimerGenericCommand+0x54>)
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	b180      	cbz	r0, 8003f32 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f10:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f12:	e88d 0022 	stmia.w	sp, {r1, r5}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003f16:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f18:	dc0d      	bgt.n	8003f36 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f1a:	f7ff fe49 	bl	8003bb0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f1e:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f20:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f22:	bf08      	it	eq
 8003f24:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f26:	6820      	ldr	r0, [r4, #0]
 8003f28:	bf18      	it	ne
 8003f2a:	461a      	movne	r2, r3
 8003f2c:	4669      	mov	r1, sp
 8003f2e:	f7fe ffe9 	bl	8002f04 <xQueueGenericSend>
}
 8003f32:	b005      	add	sp, #20
 8003f34:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f36:	2300      	movs	r3, #0
 8003f38:	4669      	mov	r1, sp
 8003f3a:	f7ff f899 	bl	8003070 <xQueueGenericSendFromISR>
 8003f3e:	e7f8      	b.n	8003f32 <xTimerGenericCommand+0x46>
 8003f40:	2000498c 	.word	0x2000498c

08003f44 <prvSwitchTimerLists>:
{
 8003f44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f48:	4d1b      	ldr	r5, [pc, #108]	; (8003fb8 <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f4a:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f4e:	682b      	ldr	r3, [r5, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	b932      	cbnz	r2, 8003f62 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <prvSwitchTimerLists+0x78>)
 8003f56:	6811      	ldr	r1, [r2, #0]
 8003f58:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 8003f5a:	6013      	str	r3, [r2, #0]
}
 8003f5c:	b002      	add	sp, #8
 8003f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f62:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f64:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f66:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f68:	1d27      	adds	r7, r4, #4
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f7fe fbff 	bl	800276e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f72:	4620      	mov	r0, r4
 8003f74:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f76:	69e3      	ldr	r3, [r4, #28]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d1e8      	bne.n	8003f4e <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f7c:	69a3      	ldr	r3, [r4, #24]
 8003f7e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8003f80:	429e      	cmp	r6, r3
 8003f82:	d206      	bcs.n	8003f92 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f84:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f86:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f88:	4639      	mov	r1, r7
 8003f8a:	6828      	ldr	r0, [r5, #0]
 8003f8c:	f7fe fbd8 	bl	8002740 <vListInsert>
 8003f90:	e7dd      	b.n	8003f4e <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8cd 8000 	str.w	r8, [sp]
 8003f98:	4632      	mov	r2, r6
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7ff ffa5 	bl	8003eec <xTimerGenericCommand>
				configASSERT( xResult );
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d1d3      	bne.n	8003f4e <prvSwitchTimerLists+0xa>
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	e7fe      	b.n	8003fb6 <prvSwitchTimerLists+0x72>
 8003fb8:	20004868 	.word	0x20004868
 8003fbc:	2000486c 	.word	0x2000486c

08003fc0 <prvTimerTask>:
{
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fc4:	4d72      	ldr	r5, [pc, #456]	; (8004190 <prvTimerTask+0x1d0>)
					portYIELD_WITHIN_API();
 8003fc6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80041a0 <prvTimerTask+0x1e0>
{
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8003fd4:	f1bb 0f00 	cmp.w	fp, #0
 8003fd8:	d044      	beq.n	8004064 <prvTimerTask+0xa4>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8003fe0:	f7ff fb86 	bl	80036f0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003fe4:	f7ff fb8c 	bl	8003700 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003fe8:	4b6a      	ldr	r3, [pc, #424]	; (8004194 <prvTimerTask+0x1d4>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8003fee:	4682      	mov	sl, r0
 8003ff0:	461e      	mov	r6, r3
	if( xTimeNow < xLastTime )
 8003ff2:	d239      	bcs.n	8004068 <prvTimerTask+0xa8>
 8003ff4:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 8003ff6:	f7ff ffa5 	bl	8003f44 <prvSwitchTimerLists>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 8003ffc:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
 8003ffe:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 8004002:	2c00      	cmp	r4, #0
 8004004:	f040 808a 	bne.w	800411c <prvTimerTask+0x15c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004008:	f1bb 0f00 	cmp.w	fp, #0
 800400c:	d06b      	beq.n	80040e6 <prvTimerTask+0x126>
 800400e:	45d1      	cmp	r9, sl
 8004010:	f200 8082 	bhi.w	8004118 <prvTimerTask+0x158>
				( void ) xTaskResumeAll();
 8004014:	f7ff fc0a 	bl	800382c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004020:	f10b 0004 	add.w	r0, fp, #4
 8004024:	f7fe fba3 	bl	800276e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004028:	f8db 301c 	ldr.w	r3, [fp, #28]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d11d      	bne.n	800406c <prvTimerTask+0xac>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004030:	f8db 1018 	ldr.w	r1, [fp, #24]
 8004034:	464b      	mov	r3, r9
 8004036:	4652      	mov	r2, sl
 8004038:	4449      	add	r1, r9
 800403a:	4658      	mov	r0, fp
 800403c:	f7ff fea0 	bl	8003d80 <prvInsertTimerInActiveList>
 8004040:	b1a0      	cbz	r0, 800406c <prvTimerTask+0xac>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004042:	9400      	str	r4, [sp, #0]
 8004044:	4623      	mov	r3, r4
 8004046:	464a      	mov	r2, r9
 8004048:	4621      	mov	r1, r4
 800404a:	4658      	mov	r0, fp
 800404c:	f7ff ff4e 	bl	8003eec <xTimerGenericCommand>
			configASSERT( xResult );
 8004050:	b960      	cbnz	r0, 800406c <prvTimerTask+0xac>
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	e7fe      	b.n	8004062 <prvTimerTask+0xa2>
		xNextExpireTime = ( TickType_t ) 0U;
 8004064:	46d9      	mov	r9, fp
 8004066:	e7bb      	b.n	8003fe0 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 8004068:	2400      	movs	r4, #0
 800406a:	e7c8      	b.n	8003ffe <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800406c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8004070:	4658      	mov	r0, fp
 8004072:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004074:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800419c <prvTimerTask+0x1dc>
 8004078:	f8d9 0000 	ldr.w	r0, [r9]
 800407c:	2200      	movs	r2, #0
 800407e:	a904      	add	r1, sp, #16
 8004080:	f7ff f858 	bl	8003134 <xQueueReceive>
 8004084:	2800      	cmp	r0, #0
 8004086:	d0a2      	beq.n	8003fce <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004088:	9b04      	ldr	r3, [sp, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	da03      	bge.n	8004096 <prvTimerTask+0xd6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800408e:	9907      	ldr	r1, [sp, #28]
 8004090:	9806      	ldr	r0, [sp, #24]
 8004092:	9b05      	ldr	r3, [sp, #20]
 8004094:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004096:	9b04      	ldr	r3, [sp, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	dbed      	blt.n	8004078 <prvTimerTask+0xb8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800409c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800409e:	6963      	ldr	r3, [r4, #20]
 80040a0:	b113      	cbz	r3, 80040a8 <prvTimerTask+0xe8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a2:	1d20      	adds	r0, r4, #4
 80040a4:	f7fe fb63 	bl	800276e <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80040a8:	f7ff fb2a 	bl	8003700 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80040ac:	6833      	ldr	r3, [r6, #0]
 80040ae:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80040b0:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80040b2:	d201      	bcs.n	80040b8 <prvTimerTask+0xf8>
		prvSwitchTimerLists();
 80040b4:	f7ff ff46 	bl	8003f44 <prvSwitchTimerLists>
 80040b8:	9a04      	ldr	r2, [sp, #16]
	xLastTime = xTimeNow;
 80040ba:	f8c6 b000 	str.w	fp, [r6]
 80040be:	2a09      	cmp	r2, #9
 80040c0:	d8da      	bhi.n	8004078 <prvTimerTask+0xb8>
 80040c2:	2301      	movs	r3, #1
 80040c4:	4093      	lsls	r3, r2
 80040c6:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80040ca:	d14e      	bne.n	800416a <prvTimerTask+0x1aa>
 80040cc:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80040d0:	d127      	bne.n	8004122 <prvTimerTask+0x162>
 80040d2:	069b      	lsls	r3, r3, #26
 80040d4:	d5d0      	bpl.n	8004078 <prvTimerTask+0xb8>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040d6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1cc      	bne.n	8004078 <prvTimerTask+0xb8>
							vPortFree( pxTimer );
 80040de:	4620      	mov	r0, r4
 80040e0:	f7fe fdbe 	bl	8002c60 <vPortFree>
 80040e4:	e7c8      	b.n	8004078 <prvTimerTask+0xb8>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040e6:	4b2c      	ldr	r3, [pc, #176]	; (8004198 <prvTimerTask+0x1d8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	fab2 f282 	clz	r2, r2
 80040f0:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040f2:	4b2a      	ldr	r3, [pc, #168]	; (800419c <prvTimerTask+0x1dc>)
 80040f4:	eba9 010a 	sub.w	r1, r9, sl
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f7ff f8d1 	bl	80032a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040fe:	f7ff fb95 	bl	800382c <xTaskResumeAll>
 8004102:	2800      	cmp	r0, #0
 8004104:	d1b6      	bne.n	8004074 <prvTimerTask+0xb4>
					portYIELD_WITHIN_API();
 8004106:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800410a:	f8c8 3000 	str.w	r3, [r8]
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	e7ad      	b.n	8004074 <prvTimerTask+0xb4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004118:	4622      	mov	r2, r4
 800411a:	e7ea      	b.n	80040f2 <prvTimerTask+0x132>
			( void ) xTaskResumeAll();
 800411c:	f7ff fb86 	bl	800382c <xTaskResumeAll>
 8004120:	e7a8      	b.n	8004074 <prvTimerTask+0xb4>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004122:	69a1      	ldr	r1, [r4, #24]
 8004124:	9b05      	ldr	r3, [sp, #20]
 8004126:	465a      	mov	r2, fp
 8004128:	4419      	add	r1, r3
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff fe28 	bl	8003d80 <prvInsertTimerInActiveList>
 8004130:	2800      	cmp	r0, #0
 8004132:	d0a1      	beq.n	8004078 <prvTimerTask+0xb8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004136:	4620      	mov	r0, r4
 8004138:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800413a:	69e3      	ldr	r3, [r4, #28]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d19b      	bne.n	8004078 <prvTimerTask+0xb8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004140:	69a2      	ldr	r2, [r4, #24]
 8004142:	9905      	ldr	r1, [sp, #20]
 8004144:	f8cd a000 	str.w	sl, [sp]
 8004148:	440a      	add	r2, r1
 800414a:	4653      	mov	r3, sl
 800414c:	4651      	mov	r1, sl
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff fecc 	bl	8003eec <xTimerGenericCommand>
							configASSERT( xResult );
 8004154:	2800      	cmp	r0, #0
 8004156:	d18f      	bne.n	8004078 <prvTimerTask+0xb8>
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	e7fe      	b.n	8004168 <prvTimerTask+0x1a8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800416a:	9905      	ldr	r1, [sp, #20]
 800416c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800416e:	b941      	cbnz	r1, 8004182 <prvTimerTask+0x1c2>
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	e7fe      	b.n	8004180 <prvTimerTask+0x1c0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004182:	465b      	mov	r3, fp
 8004184:	465a      	mov	r2, fp
 8004186:	4459      	add	r1, fp
 8004188:	4620      	mov	r0, r4
 800418a:	f7ff fdf9 	bl	8003d80 <prvInsertTimerInActiveList>
 800418e:	e773      	b.n	8004078 <prvTimerTask+0xb8>
 8004190:	20004868 	.word	0x20004868
 8004194:	20004938 	.word	0x20004938
 8004198:	2000486c 	.word	0x2000486c
 800419c:	2000498c 	.word	0x2000498c
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80041a4:	b510      	push	{r4, lr}
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 80041a6:	4604      	mov	r4, r0
 80041a8:	b940      	cbnz	r0, 80041bc <pvTimerGetTimerID+0x18>
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	e7fe      	b.n	80041ba <pvTimerGetTimerID+0x16>

	taskENTER_CRITICAL();
 80041bc:	f7fe fb52 	bl	8002864 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80041c0:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 80041c2:	f7fe fb71 	bl	80028a8 <vPortExitCritical>

	return pvReturn;
}
 80041c6:	4620      	mov	r0, r4
 80041c8:	bd10      	pop	{r4, pc}

080041ca <Callback01>:
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);    //just check t transmission
	vTaskNotifyGiveFromISR(xTaskToNotify,NULL);        // &xHigherPriorityTaskWoken
}
/* Callback01 function */
void Callback01(void *argument)
{
 80041ca:	4770      	bx	lr

080041cc <StartTask02>:
{
 80041cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  			xLastWakeTime = xTaskGetTickCount();
 80041ce:	f7ff fa97 	bl	8003700 <xTaskGetTickCount>
  	HAL_UART_Transmit(&huart4,(uint8_t*)"In SPI\r\n",6,10);
 80041d2:	230a      	movs	r3, #10
  			xLastWakeTime = xTaskGetTickCount();
 80041d4:	9001      	str	r0, [sp, #4]
  	HAL_UART_Transmit(&huart4,(uint8_t*)"In SPI\r\n",6,10);
 80041d6:	2206      	movs	r2, #6
 80041d8:	4943      	ldr	r1, [pc, #268]	; (80042e8 <StartTask02+0x11c>)
 80041da:	4844      	ldr	r0, [pc, #272]	; (80042ec <StartTask02+0x120>)
  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);//>bring slave select low
 80041dc:	4d44      	ldr	r5, [pc, #272]	; (80042f0 <StartTask02+0x124>)
  	  	  			HAL_SPI_Transmit(&hspi1,spiTxbuff,2,50);
 80041de:	4e45      	ldr	r6, [pc, #276]	; (80042f4 <StartTask02+0x128>)
  	HAL_UART_Transmit(&huart4,(uint8_t*)"In SPI\r\n",6,10);
 80041e0:	f7fe f936 	bl	8002450 <HAL_UART_Transmit>
  	  	  			spiTxbuff[0]=0x20;//2.transmit register+data
 80041e4:	4c44      	ldr	r4, [pc, #272]	; (80042f8 <StartTask02+0x12c>)
  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);//>bring slave select low
 80041e6:	4628      	mov	r0, r5
 80041e8:	2200      	movs	r2, #0
 80041ea:	2108      	movs	r1, #8
 80041ec:	f7fc ff52 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  			spiTxbuff[0]=0x20;//2.transmit register+data
 80041f0:	2320      	movs	r3, #32
 80041f2:	7023      	strb	r3, [r4, #0]
  	  	  			spiTxbuff[1]=0x17;
 80041f4:	2317      	movs	r3, #23
 80041f6:	7063      	strb	r3, [r4, #1]
  	  	  			HAL_SPI_Transmit(&hspi1,spiTxbuff,2,50);
 80041f8:	4621      	mov	r1, r4
 80041fa:	2332      	movs	r3, #50	; 0x32
 80041fc:	2202      	movs	r2, #2
 80041fe:	4630      	mov	r0, r6
 8004200:	f7fd fad9 	bl	80017b6 <HAL_SPI_Transmit>
  	  	  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET );	//3. Bring slave select high
 8004204:	4628      	mov	r0, r5
 8004206:	2201      	movs	r2, #1
 8004208:	2108      	movs	r1, #8
 800420a:	f7fc ff43 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);//1.bring slave select low
 800420e:	4628      	mov	r0, r5
 8004210:	2200      	movs	r2, #0
 8004212:	2108      	movs	r1, #8
 8004214:	f7fc ff3e 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  		spiTxbuff[0]=0x20|0x80;//2.Transmit Register + 0x80 (to set msb for read mode )
 8004218:	23a0      	movs	r3, #160	; 0xa0
 800421a:	7023      	strb	r3, [r4, #0]
  	  	  		HAL_SPI_Transmit(&hspi1,spiTxbuff,1,50);
 800421c:	4621      	mov	r1, r4
 800421e:	2332      	movs	r3, #50	; 0x32
 8004220:	2201      	movs	r2, #1
 8004222:	4630      	mov	r0, r6
 8004224:	f7fd fac7 	bl	80017b6 <HAL_SPI_Transmit>
  	  	  		HAL_SPI_Receive(&hspi1,spiRxbuff,1,50);
 8004228:	2332      	movs	r3, #50	; 0x32
 800422a:	2201      	movs	r2, #1
 800422c:	4933      	ldr	r1, [pc, #204]	; (80042fc <StartTask02+0x130>)
 800422e:	4630      	mov	r0, r6
 8004230:	f7fd fc59 	bl	8001ae6 <HAL_SPI_Receive>
  	  	  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET );
 8004234:	4628      	mov	r0, r5
 8004236:	2201      	movs	r2, #1
 8004238:	2108      	movs	r1, #8
 800423a:	f7fc ff2b 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800423e:	4628      	mov	r0, r5
 8004240:	2200      	movs	r2, #0
 8004242:	2108      	movs	r1, #8
 8004244:	f7fc ff26 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  				spiTxbuff[0]=0x29|0x80;
 8004248:	23a9      	movs	r3, #169	; 0xa9
 800424a:	7023      	strb	r3, [r4, #0]
  	  	  				HAL_SPI_Transmit(&hspi1,spiTxbuff,1,50);
 800424c:	4621      	mov	r1, r4
 800424e:	2332      	movs	r3, #50	; 0x32
 8004250:	2201      	movs	r2, #1
 8004252:	4630      	mov	r0, r6
 8004254:	f7fd faaf 	bl	80017b6 <HAL_SPI_Transmit>
  	  	  				HAL_SPI_Receive(&hspi1,spiRx_x,1,50);
 8004258:	2332      	movs	r3, #50	; 0x32
 800425a:	2201      	movs	r2, #1
 800425c:	4928      	ldr	r1, [pc, #160]	; (8004300 <StartTask02+0x134>)
 800425e:	4630      	mov	r0, r6
 8004260:	f7fd fc41 	bl	8001ae6 <HAL_SPI_Receive>
  	  	  				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8004264:	2201      	movs	r2, #1
 8004266:	2108      	movs	r1, #8
 8004268:	4628      	mov	r0, r5
 800426a:	f7fc ff13 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  				HAL_Delay(10);
 800426e:	200a      	movs	r0, #10
 8004270:	f7fc f9ba 	bl	80005e8 <HAL_Delay>
  	  	  				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8004274:	4628      	mov	r0, r5
 8004276:	2200      	movs	r2, #0
 8004278:	2108      	movs	r1, #8
 800427a:	f7fc ff0b 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  				spiTxbuff[0]=0x2B|0x80;
 800427e:	23ab      	movs	r3, #171	; 0xab
 8004280:	7023      	strb	r3, [r4, #0]
  	  	  				HAL_SPI_Transmit(&hspi1,spiTxbuff,1,50);
 8004282:	4621      	mov	r1, r4
 8004284:	2332      	movs	r3, #50	; 0x32
 8004286:	2201      	movs	r2, #1
 8004288:	4630      	mov	r0, r6
 800428a:	f7fd fa94 	bl	80017b6 <HAL_SPI_Transmit>
  	  	  				HAL_SPI_Receive(&hspi1,spiRx_y,1,50);
 800428e:	2332      	movs	r3, #50	; 0x32
 8004290:	2201      	movs	r2, #1
 8004292:	491c      	ldr	r1, [pc, #112]	; (8004304 <StartTask02+0x138>)
 8004294:	4630      	mov	r0, r6
 8004296:	f7fd fc26 	bl	8001ae6 <HAL_SPI_Receive>
  	  	  				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 800429a:	2201      	movs	r2, #1
 800429c:	2108      	movs	r1, #8
 800429e:	4628      	mov	r0, r5
 80042a0:	f7fc fef8 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  				HAL_Delay(10);
 80042a4:	200a      	movs	r0, #10
 80042a6:	f7fc f99f 	bl	80005e8 <HAL_Delay>
  	  	  				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80042aa:	4628      	mov	r0, r5
 80042ac:	2200      	movs	r2, #0
 80042ae:	2108      	movs	r1, #8
 80042b0:	f7fc fef0 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  				spiTxbuff[0]=0x2D|0x80;
 80042b4:	23ad      	movs	r3, #173	; 0xad
 80042b6:	7023      	strb	r3, [r4, #0]
  	  	  				HAL_SPI_Transmit(&hspi1,spiTxbuff,1,50);
 80042b8:	4621      	mov	r1, r4
 80042ba:	2332      	movs	r3, #50	; 0x32
 80042bc:	2201      	movs	r2, #1
 80042be:	4630      	mov	r0, r6
 80042c0:	f7fd fa79 	bl	80017b6 <HAL_SPI_Transmit>
  	  	  				HAL_SPI_Receive(&hspi1,spiRx_z,1,50);
 80042c4:	2332      	movs	r3, #50	; 0x32
 80042c6:	2201      	movs	r2, #1
 80042c8:	490f      	ldr	r1, [pc, #60]	; (8004308 <StartTask02+0x13c>)
 80042ca:	4630      	mov	r0, r6
 80042cc:	f7fd fc0b 	bl	8001ae6 <HAL_SPI_Receive>
  	  	  				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80042d0:	4628      	mov	r0, r5
 80042d2:	2201      	movs	r2, #1
 80042d4:	2108      	movs	r1, #8
 80042d6:	f7fc fedd 	bl	8001094 <HAL_GPIO_WritePin>
  	  	  				vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80042da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042de:	a801      	add	r0, sp, #4
 80042e0:	f7ff fb18 	bl	8003914 <vTaskDelayUntil>
 80042e4:	e77e      	b.n	80041e4 <StartTask02+0x18>
 80042e6:	bf00      	nop
 80042e8:	080055d0 	.word	0x080055d0
 80042ec:	20004ba8 	.word	0x20004ba8
 80042f0:	40021000 	.word	0x40021000
 80042f4:	20004be8 	.word	0x20004be8
 80042f8:	20004d2c 	.word	0x20004d2c
 80042fc:	20004cc8 	.word	0x20004cc8
 8004300:	20004ad0 	.word	0x20004ad0
 8004304:	20004d2e 	.word	0x20004d2e
 8004308:	20004c42 	.word	0x20004c42

0800430c <SystemClock_Config>:
{
 800430c:	b510      	push	{r4, lr}
 800430e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004310:	2230      	movs	r2, #48	; 0x30
 8004312:	2100      	movs	r1, #0
 8004314:	a808      	add	r0, sp, #32
 8004316:	f000 fcf4 	bl	8004d02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800431a:	2214      	movs	r2, #20
 800431c:	2100      	movs	r1, #0
 800431e:	a803      	add	r0, sp, #12
 8004320:	f000 fcef 	bl	8004d02 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <SystemClock_Config+0x98>)
 8004326:	2100      	movs	r1, #0
 8004328:	9101      	str	r1, [sp, #4]
 800432a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <SystemClock_Config+0x9c>)
 800433e:	9102      	str	r1, [sp, #8]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434e:	9302      	str	r3, [sp, #8]
 8004350:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004352:	2301      	movs	r3, #1
 8004354:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800435a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800435c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004360:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004362:	2304      	movs	r3, #4
 8004364:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004366:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004368:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 800436a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800436c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800436e:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004370:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004372:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004374:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004376:	f7fc fe9f 	bl	80010b8 <HAL_RCC_OscConfig>
 800437a:	b100      	cbz	r0, 800437e <SystemClock_Config+0x72>
 800437c:	e7fe      	b.n	800437c <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800437e:	230f      	movs	r3, #15
 8004380:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004386:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004388:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800438a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800438c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004390:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004392:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004394:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004396:	f7fd f863 	bl	8001460 <HAL_RCC_ClockConfig>
 800439a:	b100      	cbz	r0, 800439e <SystemClock_Config+0x92>
 800439c:	e7fe      	b.n	800439c <SystemClock_Config+0x90>
}
 800439e:	b014      	add	sp, #80	; 0x50
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40007000 	.word	0x40007000

080043ac <main>:
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b098      	sub	sp, #96	; 0x60
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043b0:	2400      	movs	r4, #0
 80043b2:	4da8      	ldr	r5, [pc, #672]	; (8004654 <main+0x2a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043b4:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8004688 <main+0x2dc>
  HAL_Init();
 80043b8:	f7fc f8ea 	bl	8000590 <HAL_Init>
  SystemClock_Config();
 80043bc:	f7ff ffa6 	bl	800430c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	2214      	movs	r2, #20
 80043c2:	2100      	movs	r1, #0
 80043c4:	a80e      	add	r0, sp, #56	; 0x38
 80043c6:	f000 fc9c 	bl	8004d02 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ca:	9402      	str	r4, [sp, #8]
 80043cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80043ce:	48a2      	ldr	r0, [pc, #648]	; (8004658 <main+0x2ac>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043d0:	f043 0310 	orr.w	r3, r3, #16
 80043d4:	632b      	str	r3, [r5, #48]	; 0x30
 80043d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	9302      	str	r3, [sp, #8]
 80043de:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043e0:	9403      	str	r4, [sp, #12]
 80043e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80043e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e8:	632b      	str	r3, [r5, #48]	; 0x30
 80043ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	9303      	str	r3, [sp, #12]
 80043f2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f4:	9404      	str	r4, [sp, #16]
 80043f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	632b      	str	r3, [r5, #48]	; 0x30
 80043fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	9304      	str	r3, [sp, #16]
 8004406:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004408:	9405      	str	r4, [sp, #20]
 800440a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	632b      	str	r3, [r5, #48]	; 0x30
 8004412:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	9305      	str	r3, [sp, #20]
 800441a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800441c:	9406      	str	r4, [sp, #24]
 800441e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004420:	f043 0308 	orr.w	r3, r3, #8
 8004424:	632b      	str	r3, [r5, #48]	; 0x30
 8004426:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	9306      	str	r3, [sp, #24]
 800442e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004430:	9407      	str	r4, [sp, #28]
 8004432:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	632b      	str	r3, [r5, #48]	; 0x30
 800443a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8004442:	4622      	mov	r2, r4
 8004444:	2108      	movs	r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004446:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8004448:	f7fc fe24 	bl	8001094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800444c:	4622      	mov	r2, r4
 800444e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004452:	4882      	ldr	r0, [pc, #520]	; (800465c <main+0x2b0>)
 8004454:	f7fc fe1e 	bl	8001094 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004458:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800445a:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800445c:	a90e      	add	r1, sp, #56	; 0x38
 800445e:	487e      	ldr	r0, [pc, #504]	; (8004658 <main+0x2ac>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004460:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004462:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004466:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004468:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800446a:	f7fc fd33 	bl	8000ed4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446e:	a90e      	add	r1, sp, #56	; 0x38
 8004470:	487b      	ldr	r0, [pc, #492]	; (8004660 <main+0x2b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004472:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004474:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800447a:	f7fc fd2b 	bl	8000ed4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800447e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004482:	a90e      	add	r1, sp, #56	; 0x38
 8004484:	4875      	ldr	r0, [pc, #468]	; (800465c <main+0x2b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004486:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004488:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448c:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800448e:	f7fc fd21 	bl	8000ed4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004492:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004496:	a90e      	add	r1, sp, #56	; 0x38
 8004498:	4872      	ldr	r0, [pc, #456]	; (8004664 <main+0x2b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800449a:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800449c:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449e:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a0:	f7fc fd18 	bl	8000ed4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044a4:	a90e      	add	r1, sp, #56	; 0x38
 80044a6:	486c      	ldr	r0, [pc, #432]	; (8004658 <main+0x2ac>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044a8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044aa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044b0:	f7fc fd10 	bl	8000ed4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80044b4:	4622      	mov	r2, r4
 80044b6:	2105      	movs	r1, #5
 80044b8:	2006      	movs	r0, #6
 80044ba:	f7fc fb7b 	bl	8000bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80044be:	2006      	movs	r0, #6
 80044c0:	f7fc fbac 	bl	8000c1c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044c4:	9401      	str	r4, [sp, #4]
 80044c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80044c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044cc:	632b      	str	r3, [r5, #48]	; 0x30
 80044ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80044d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80044d4:	4622      	mov	r2, r4
 80044d6:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044d8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80044da:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044dc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80044de:	f7fc fb69 	bl	8000bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80044e2:	200d      	movs	r0, #13
 80044e4:	f7fc fb9a 	bl	8000c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80044e8:	4622      	mov	r2, r4
 80044ea:	2105      	movs	r1, #5
 80044ec:	200f      	movs	r0, #15
 80044ee:	f7fc fb61 	bl	8000bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80044f2:	200f      	movs	r0, #15
 80044f4:	f7fc fb92 	bl	8000c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80044f8:	4622      	mov	r2, r4
 80044fa:	2105      	movs	r1, #5
 80044fc:	2010      	movs	r0, #16
 80044fe:	f7fc fb59 	bl	8000bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004502:	2010      	movs	r0, #16
 8004504:	f7fc fb8a 	bl	8000c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8004508:	4622      	mov	r2, r4
 800450a:	2105      	movs	r1, #5
 800450c:	2011      	movs	r0, #17
 800450e:	f7fc fb51 	bl	8000bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004512:	2011      	movs	r0, #17
 8004514:	f7fc fb82 	bl	8000c1c <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8004518:	4853      	ldr	r0, [pc, #332]	; (8004668 <main+0x2bc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800451a:	4b54      	ldr	r3, [pc, #336]	; (800466c <main+0x2c0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800451c:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800451e:	f44f 7582 	mov.w	r5, #260	; 0x104
 8004522:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800452a:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800452c:	2318      	movs	r3, #24
 800452e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8004530:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004532:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004534:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004536:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004538:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800453a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800453e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004540:	f7fd f8fc 	bl	800173c <HAL_SPI_Init>
 8004544:	4605      	mov	r5, r0
 8004546:	b100      	cbz	r0, 800454a <main+0x19e>
 8004548:	e7fe      	b.n	8004548 <main+0x19c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800454a:	f04f 0810 	mov.w	r8, #16
 800454e:	4601      	mov	r1, r0
 8004550:	4642      	mov	r2, r8
 8004552:	a80a      	add	r0, sp, #40	; 0x28
 8004554:	f000 fbd5 	bl	8004d02 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004558:	221c      	movs	r2, #28
 800455a:	4629      	mov	r1, r5
 800455c:	a80e      	add	r0, sp, #56	; 0x38
  htim3.Instance = TIM3;
 800455e:	4c44      	ldr	r4, [pc, #272]	; (8004670 <main+0x2c4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004560:	9508      	str	r5, [sp, #32]
 8004562:	9509      	str	r5, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004564:	f000 fbcd 	bl	8004d02 <memset>
  htim3.Instance = TIM3;
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <main+0x2c8>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800456a:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 16;
 800456c:	e884 0108 	stmia.w	r4, {r3, r8}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004570:	4620      	mov	r0, r4
  htim3.Init.Period = 100;
 8004572:	2364      	movs	r3, #100	; 0x64
 8004574:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004576:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004578:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800457a:	f7fd fcf7 	bl	8001f6c <HAL_TIM_Base_Init>
 800457e:	b100      	cbz	r0, 8004582 <main+0x1d6>
 8004580:	e7fe      	b.n	8004580 <main+0x1d4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004586:	a90a      	add	r1, sp, #40	; 0x28
 8004588:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800458a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800458c:	f7fd fdc4 	bl	8002118 <HAL_TIM_ConfigClockSource>
 8004590:	b100      	cbz	r0, 8004594 <main+0x1e8>
 8004592:	e7fe      	b.n	8004592 <main+0x1e6>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004594:	4620      	mov	r0, r4
 8004596:	f7fd fd03 	bl	8001fa0 <HAL_TIM_PWM_Init>
 800459a:	b100      	cbz	r0, 800459e <main+0x1f2>
 800459c:	e7fe      	b.n	800459c <main+0x1f0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800459e:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045a0:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045a2:	a908      	add	r1, sp, #32
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7fd fe4b 	bl	8002240 <HAL_TIMEx_MasterConfigSynchronization>
 80045aa:	4602      	mov	r2, r0
 80045ac:	b100      	cbz	r0, 80045b0 <main+0x204>
 80045ae:	e7fe      	b.n	80045ae <main+0x202>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045b0:	2360      	movs	r3, #96	; 0x60
 80045b2:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045b4:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.Pulse = 50;
 80045b6:	2332      	movs	r3, #50	; 0x32
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045b8:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045ba:	a90e      	add	r1, sp, #56	; 0x38
 80045bc:	4620      	mov	r0, r4
  sConfigOC.Pulse = 50;
 80045be:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045c0:	f7fd fd3e 	bl	8002040 <HAL_TIM_PWM_ConfigChannel>
 80045c4:	b100      	cbz	r0, 80045c8 <main+0x21c>
 80045c6:	e7fe      	b.n	80045c6 <main+0x21a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80045c8:	2204      	movs	r2, #4
 80045ca:	a90e      	add	r1, sp, #56	; 0x38
 80045cc:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80045ce:	9710      	str	r7, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80045d0:	f7fd fd36 	bl	8002040 <HAL_TIM_PWM_ConfigChannel>
 80045d4:	4605      	mov	r5, r0
 80045d6:	b100      	cbz	r0, 80045da <main+0x22e>
 80045d8:	e7fe      	b.n	80045d8 <main+0x22c>
  HAL_TIM_MspPostInit(&htim3);
 80045da:	4620      	mov	r0, r4
 80045dc:	f000 f9b8 	bl	8004950 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80045e0:	4825      	ldr	r0, [pc, #148]	; (8004678 <main+0x2cc>)
  huart2.Init.BaudRate = 115200;
 80045e2:	4b26      	ldr	r3, [pc, #152]	; (800467c <main+0x2d0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045e4:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80045e6:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
 80045ea:	e880 0018 	stmia.w	r0, {r3, r4}
  huart2.Init.StopBits = UART_STOPBITS_2;
 80045ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045f2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045f4:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 80045f6:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045f8:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045fa:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045fc:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045fe:	f7fd fef9 	bl	80023f4 <HAL_UART_Init>
 8004602:	b100      	cbz	r0, 8004606 <main+0x25a>
 8004604:	e7fe      	b.n	8004604 <main+0x258>
  hcan1.Instance = CAN1;
 8004606:	4c1e      	ldr	r4, [pc, #120]	; (8004680 <main+0x2d4>)
  hcan1.Init.Prescaler = 126;
 8004608:	491e      	ldr	r1, [pc, #120]	; (8004684 <main+0x2d8>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800460a:	60a0      	str	r0, [r4, #8]
  hcan1.Init.Prescaler = 126;
 800460c:	237e      	movs	r3, #126	; 0x7e
 800460e:	e884 000a 	stmia.w	r4, {r1, r3}
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8004612:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004616:	60e0      	str	r0, [r4, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8004618:	6123      	str	r3, [r4, #16]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800461a:	7620      	strb	r0, [r4, #24]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800461c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
  hcan1.Init.AutoBusOff = DISABLE;
 8004620:	7660      	strb	r0, [r4, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004622:	76a0      	strb	r0, [r4, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004624:	76e0      	strb	r0, [r4, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004626:	7720      	strb	r0, [r4, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004628:	7760      	strb	r0, [r4, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800462a:	4620      	mov	r0, r4
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800462c:	6163      	str	r3, [r4, #20]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800462e:	f7fb ffef 	bl	8000610 <HAL_CAN_Init>
 8004632:	b100      	cbz	r0, 8004636 <main+0x28a>
 8004634:	e7fe      	b.n	8004634 <main+0x288>
  	can1_filter_init.FilterBank = 0;
 8004636:	9013      	str	r0, [sp, #76]	; 0x4c
  	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004638:	9012      	str	r0, [sp, #72]	; 0x48
  	can1_filter_init.FilterIdHigh=0x0000;
 800463a:	900e      	str	r0, [sp, #56]	; 0x38
  	can1_filter_init.FilterIdLow = 0x0000;
 800463c:	900f      	str	r0, [sp, #60]	; 0x3c
  	can1_filter_init.FilterMaskIdHigh = 0x0000;
 800463e:	9010      	str	r0, [sp, #64]	; 0x40
  	can1_filter_init.FilterMaskIdLow=0x0000;
 8004640:	9011      	str	r0, [sp, #68]	; 0x44
  	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8004642:	9014      	str	r0, [sp, #80]	; 0x50
  	if(HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init)!=HAL_OK)
 8004644:	a90e      	add	r1, sp, #56	; 0x38
 8004646:	4620      	mov	r0, r4
  	can1_filter_init.FilterActivation = ENABLE;
 8004648:	9616      	str	r6, [sp, #88]	; 0x58
  	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800464a:	9615      	str	r6, [sp, #84]	; 0x54
  	if(HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init)!=HAL_OK)
 800464c:	f7fc f85c 	bl	8000708 <HAL_CAN_ConfigFilter>
 8004650:	b1e0      	cbz	r0, 800468c <main+0x2e0>
 8004652:	e7fe      	b.n	8004652 <main+0x2a6>
 8004654:	40023800 	.word	0x40023800
 8004658:	40021000 	.word	0x40021000
 800465c:	40020c00 	.word	0x40020c00
 8004660:	40020400 	.word	0x40020400
 8004664:	40020800 	.word	0x40020800
 8004668:	20004be8 	.word	0x20004be8
 800466c:	40013000 	.word	0x40013000
 8004670:	20004af4 	.word	0x20004af4
 8004674:	40000400 	.word	0x40000400
 8004678:	20004c44 	.word	0x20004c44
 800467c:	40004400 	.word	0x40004400
 8004680:	20004c84 	.word	0x20004c84
 8004684:	40006400 	.word	0x40006400
 8004688:	10110000 	.word	0x10110000
  	if(HAL_CAN_Start(&hcan1)!=HAL_OK){
 800468c:	481c      	ldr	r0, [pc, #112]	; (8004700 <main+0x354>)
 800468e:	f7fc f8c3 	bl	8000818 <HAL_CAN_Start>
 8004692:	b100      	cbz	r0, 8004696 <main+0x2ea>
 8004694:	e7fe      	b.n	8004694 <main+0x2e8>
  	  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK)
 8004696:	2102      	movs	r1, #2
 8004698:	4819      	ldr	r0, [pc, #100]	; (8004700 <main+0x354>)
 800469a:	f7fc f95e 	bl	800095a <HAL_CAN_ActivateNotification>
 800469e:	b100      	cbz	r0, 80046a2 <main+0x2f6>
 80046a0:	e7fe      	b.n	80046a0 <main+0x2f4>
  huart4.Instance = UART4;
 80046a2:	4c18      	ldr	r4, [pc, #96]	; (8004704 <main+0x358>)
  huart4.Init.BaudRate = 115200;
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <main+0x35c>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80046a6:	60a0      	str	r0, [r4, #8]
  huart4.Init.BaudRate = 115200;
 80046a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80046ac:	e884 000c 	stmia.w	r4, {r2, r3}
  huart4.Init.StopBits = UART_STOPBITS_2;
 80046b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046b4:	60e3      	str	r3, [r4, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80046b6:	6120      	str	r0, [r4, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80046b8:	230c      	movs	r3, #12
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046ba:	61a0      	str	r0, [r4, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80046bc:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80046be:	4620      	mov	r0, r4
  huart4.Init.Mode = UART_MODE_TX_RX;
 80046c0:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80046c2:	f7fd fe97 	bl	80023f4 <HAL_UART_Init>
 80046c6:	4605      	mov	r5, r0
 80046c8:	b100      	cbz	r0, 80046cc <main+0x320>
 80046ca:	e7fe      	b.n	80046ca <main+0x31e>
  HAL_UART_Transmit(&huart4,(uint8_t*)"Real Time Accident Alert System\r\n",32,10);
 80046cc:	230a      	movs	r3, #10
 80046ce:	2220      	movs	r2, #32
 80046d0:	490e      	ldr	r1, [pc, #56]	; (800470c <main+0x360>)
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7fd febc 	bl	8002450 <HAL_UART_Transmit>
  osKernelInitialize();
 80046d8:	f7fd ff24 	bl	8002524 <osKernelInitialize>
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <main+0x364>)
 80046de:	480d      	ldr	r0, [pc, #52]	; (8004714 <main+0x368>)
 80046e0:	462a      	mov	r2, r5
 80046e2:	2101      	movs	r1, #1
 80046e4:	f7fd ffba 	bl	800265c <osTimerNew>
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <main+0x36c>)
  SPI_TaskHandle = osThreadNew(StartTask02, NULL, &SPI_Task_attributes);
 80046ea:	4a0c      	ldr	r2, [pc, #48]	; (800471c <main+0x370>)
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 80046ec:	6018      	str	r0, [r3, #0]
  SPI_TaskHandle = osThreadNew(StartTask02, NULL, &SPI_Task_attributes);
 80046ee:	4629      	mov	r1, r5
 80046f0:	480b      	ldr	r0, [pc, #44]	; (8004720 <main+0x374>)
 80046f2:	f7fd ff53 	bl	800259c <osThreadNew>
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <main+0x378>)
 80046f8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80046fa:	f7fd ff2f 	bl	800255c <osKernelStart>
 80046fe:	e7fe      	b.n	80046fe <main+0x352>
 8004700:	20004c84 	.word	0x20004c84
 8004704:	20004ba8 	.word	0x20004ba8
 8004708:	40004c00 	.word	0x40004c00
 800470c:	080055d9 	.word	0x080055d9
 8004710:	080055fc 	.word	0x080055fc
 8004714:	080041cb 	.word	0x080041cb
 8004718:	20004ba0 	.word	0x20004ba0
 800471c:	080055ac 	.word	0x080055ac
 8004720:	080041cd 	.word	0x080041cd
 8004724:	20004acc 	.word	0x20004acc

08004728 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8004728:	b538      	push	{r3, r4, r5, lr}
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,(uint8_t*)RxData) != HAL_OK)
 800472a:	4c22      	ldr	r4, [pc, #136]	; (80047b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
	HAL_UART_Transmit(&huart4,(uint8_t*)"In CAN Rx\r\n",12,10);
 800472c:	4922      	ldr	r1, [pc, #136]	; (80047b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
{
 800472e:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart4,(uint8_t*)"In CAN Rx\r\n",12,10);
 8004730:	230a      	movs	r3, #10
 8004732:	220c      	movs	r2, #12
 8004734:	4821      	ldr	r0, [pc, #132]	; (80047bc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004736:	f7fd fe8b 	bl	8002450 <HAL_UART_Transmit>
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,(uint8_t*)RxData) != HAL_OK)
 800473a:	4628      	mov	r0, r5
 800473c:	4623      	mov	r3, r4
 800473e:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8004740:	2100      	movs	r1, #0
 8004742:	f7fc f894 	bl	800086e <HAL_CAN_GetRxMessage>
 8004746:	4605      	mov	r5, r0
 8004748:	b100      	cbz	r0, 800474c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
 800474a:	e7fe      	b.n	800474a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	HAL_UART_Transmit(&huart4,(uint8_t*)"In CAN Rx1\r\n",13,10);
 800474c:	230a      	movs	r3, #10
 800474e:	220d      	movs	r2, #13
 8004750:	491c      	ldr	r1, [pc, #112]	; (80047c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8004752:	481a      	ldr	r0, [pc, #104]	; (80047bc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8004754:	f7fd fe7c 	bl	8002450 <HAL_UART_Transmit>
			sprintf(temp,"temp=%u",RxData[0]);
 8004758:	7822      	ldrb	r2, [r4, #0]
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800475c:	481b      	ldr	r0, [pc, #108]	; (80047cc <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800475e:	f000 fad9 	bl	8004d14 <siprintf>
			sprintf(IR_data,"IR_data=%u",RxData[1]);
 8004762:	7862      	ldrb	r2, [r4, #1]
 8004764:	491a      	ldr	r1, [pc, #104]	; (80047d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8004766:	481b      	ldr	r0, [pc, #108]	; (80047d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8004768:	f000 fad4 	bl	8004d14 <siprintf>
		  	HAL_UART_Transmit(&huart4,(uint8_t*)IR_data,strlen(IR_data),10);
 800476c:	4819      	ldr	r0, [pc, #100]	; (80047d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800476e:	f7fb fd2f 	bl	80001d0 <strlen>
 8004772:	230a      	movs	r3, #10
 8004774:	b282      	uxth	r2, r0
 8004776:	4917      	ldr	r1, [pc, #92]	; (80047d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8004778:	4810      	ldr	r0, [pc, #64]	; (80047bc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800477a:	f7fd fe69 	bl	8002450 <HAL_UART_Transmit>
		  	HAL_UART_Transmit(&huart4,(uint8_t*)temp,strlen(temp),10);
 800477e:	4813      	ldr	r0, [pc, #76]	; (80047cc <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8004780:	f7fb fd26 	bl	80001d0 <strlen>
 8004784:	230a      	movs	r3, #10
 8004786:	b282      	uxth	r2, r0
 8004788:	4910      	ldr	r1, [pc, #64]	; (80047cc <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800478a:	480c      	ldr	r0, [pc, #48]	; (80047bc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800478c:	f7fd fe60 	bl	8002450 <HAL_UART_Transmit>
		  sprintf(msg,"Data Received %s\n\r",RxData); // it is behaving like a concatination function
 8004790:	4622      	mov	r2, r4
 8004792:	4911      	ldr	r1, [pc, #68]	; (80047d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8004794:	4811      	ldr	r0, [pc, #68]	; (80047dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8004796:	f000 fabd 	bl	8004d14 <siprintf>
		  HAL_UART_Transmit(&huart4,(uint8_t*)msg,15,10);  // put 3rd perameter carefully bcs its taking CAN DATA
 800479a:	230a      	movs	r3, #10
 800479c:	490f      	ldr	r1, [pc, #60]	; (80047dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800479e:	4807      	ldr	r0, [pc, #28]	; (80047bc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80047a0:	220f      	movs	r2, #15
 80047a2:	f7fd fe55 	bl	8002450 <HAL_UART_Transmit>
	vTaskNotifyGiveFromISR(xTaskToNotify,NULL);        // &xHigherPriorityTaskWoken
 80047a6:	4629      	mov	r1, r5
 80047a8:	4628      	mov	r0, r5
}
 80047aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskNotifyGiveFromISR(xTaskToNotify,NULL);        // &xHigherPriorityTaskWoken
 80047ae:	f7ff ba51 	b.w	8003c54 <vTaskNotifyGiveFromISR>
 80047b2:	bf00      	nop
 80047b4:	20004c40 	.word	0x20004c40
 80047b8:	0800556a 	.word	0x0800556a
 80047bc:	20004ba8 	.word	0x20004ba8
 80047c0:	20004cac 	.word	0x20004cac
 80047c4:	08005576 	.word	0x08005576
 80047c8:	08005583 	.word	0x08005583
 80047cc:	20004ae9 	.word	0x20004ae9
 80047d0:	0800558b 	.word	0x0800558b
 80047d4:	20004b94 	.word	0x20004b94
 80047d8:	08005596 	.word	0x08005596
 80047dc:	20004ad2 	.word	0x20004ad2

080047e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80047e0:	6802      	ldr	r2, [r0, #0]
 80047e2:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80047e8:	f7fb beec 	b.w	80005c4 <HAL_IncTick>
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000

080047f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047f4:	e7fe      	b.n	80047f4 <Error_Handler>
	...

080047f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047f8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <HAL_MspInit+0x40>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	9200      	str	r2, [sp, #0]
 8004800:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004802:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004806:	6459      	str	r1, [r3, #68]	; 0x44
 8004808:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800480a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800480e:	9100      	str	r1, [sp, #0]
 8004810:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004812:	9201      	str	r2, [sp, #4]
 8004814:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004816:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800481a:	6419      	str	r1, [r3, #64]	; 0x40
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004822:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004824:	210f      	movs	r1, #15
 8004826:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800482c:	f7fc f9c2 	bl	8000bb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004830:	b003      	add	sp, #12
 8004832:	f85d fb04 	ldr.w	pc, [sp], #4
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800

0800483c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800483c:	b510      	push	{r4, lr}
 800483e:	4604      	mov	r4, r0
 8004840:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004842:	2214      	movs	r2, #20
 8004844:	2100      	movs	r1, #0
 8004846:	a803      	add	r0, sp, #12
 8004848:	f000 fa5b 	bl	8004d02 <memset>
  if(hcan->Instance==CAN1)
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	4b17      	ldr	r3, [pc, #92]	; (80048ac <HAL_CAN_MspInit+0x70>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d129      	bne.n	80048a8 <HAL_CAN_MspInit+0x6c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004854:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004858:	2400      	movs	r4, #0
 800485a:	9401      	str	r4, [sp, #4]
 800485c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800485e:	4814      	ldr	r0, [pc, #80]	; (80048b0 <HAL_CAN_MspInit+0x74>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004860:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
 8004866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004868:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800486c:	9201      	str	r2, [sp, #4]
 800486e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004870:	9402      	str	r4, [sp, #8]
 8004872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004874:	f042 0208 	orr.w	r2, r2, #8
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	9302      	str	r3, [sp, #8]
 8004882:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004884:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004886:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004888:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800488c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800488e:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004890:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004892:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004894:	f7fc fb1e 	bl	8000ed4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004898:	2014      	movs	r0, #20
 800489a:	4622      	mov	r2, r4
 800489c:	2105      	movs	r1, #5
 800489e:	f7fc f989 	bl	8000bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80048a2:	2014      	movs	r0, #20
 80048a4:	f7fc f9ba 	bl	8000c1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80048a8:	b008      	add	sp, #32
 80048aa:	bd10      	pop	{r4, pc}
 80048ac:	40006400 	.word	0x40006400
 80048b0:	40020c00 	.word	0x40020c00

080048b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048b4:	b510      	push	{r4, lr}
 80048b6:	4604      	mov	r4, r0
 80048b8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ba:	2214      	movs	r2, #20
 80048bc:	2100      	movs	r1, #0
 80048be:	a803      	add	r0, sp, #12
 80048c0:	f000 fa1f 	bl	8004d02 <memset>
  if(hspi->Instance==SPI1)
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <HAL_SPI_MspInit+0x64>)
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d122      	bne.n	8004912 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048cc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80048d0:	2100      	movs	r1, #0
 80048d2:	9101      	str	r1, [sp, #4]
 80048d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d6:	4811      	ldr	r0, [pc, #68]	; (800491c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
 80048de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048e4:	9201      	str	r2, [sp, #4]
 80048e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e8:	9102      	str	r1, [sp, #8]
 80048ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	631a      	str	r2, [r3, #48]	; 0x30
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	9302      	str	r3, [sp, #8]
 80048fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80048fc:	23e0      	movs	r3, #224	; 0xe0
 80048fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004900:	2302      	movs	r3, #2
 8004902:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004904:	2303      	movs	r3, #3
 8004906:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004908:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800490a:	2305      	movs	r3, #5
 800490c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490e:	f7fc fae1 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004912:	b008      	add	sp, #32
 8004914:	bd10      	pop	{r4, pc}
 8004916:	bf00      	nop
 8004918:	40013000 	.word	0x40013000
 800491c:	40020000 	.word	0x40020000

08004920 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8004920:	6802      	ldr	r2, [r0, #0]
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_TIM_Base_MspInit+0x28>)
 8004924:	429a      	cmp	r2, r3
{
 8004926:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8004928:	d10b      	bne.n	8004942 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <HAL_TIM_Base_MspInit+0x2c>)
 8004930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004932:	f042 0202 	orr.w	r2, r2, #2
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004942:	b002      	add	sp, #8
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40000400 	.word	0x40000400
 800494c:	40023800 	.word	0x40023800

08004950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004950:	b510      	push	{r4, lr}
 8004952:	4604      	mov	r4, r0
 8004954:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004956:	2214      	movs	r2, #20
 8004958:	2100      	movs	r1, #0
 800495a:	a801      	add	r0, sp, #4
 800495c:	f000 f9d1 	bl	8004d02 <memset>
  if(htim->Instance==TIM3)
 8004960:	6822      	ldr	r2, [r4, #0]
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_TIM_MspPostInit+0x48>)
 8004964:	429a      	cmp	r2, r3
 8004966:	d114      	bne.n	8004992 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004968:	2300      	movs	r3, #0
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800496e:	480c      	ldr	r0, [pc, #48]	; (80049a0 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004972:	f042 0204 	orr.w	r2, r2, #4
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004982:	23c0      	movs	r3, #192	; 0xc0
 8004984:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004986:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004988:	2302      	movs	r3, #2
 800498a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800498c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800498e:	f7fc faa1 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004992:	b006      	add	sp, #24
 8004994:	bd10      	pop	{r4, pc}
 8004996:	bf00      	nop
 8004998:	40000400 	.word	0x40000400
 800499c:	40023800 	.word	0x40023800
 80049a0:	40020800 	.word	0x40020800

080049a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049a4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a6:	2214      	movs	r2, #20
{
 80049a8:	b08a      	sub	sp, #40	; 0x28
 80049aa:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ac:	2100      	movs	r1, #0
 80049ae:	eb0d 0002 	add.w	r0, sp, r2
 80049b2:	f000 f9a6 	bl	8004d02 <memset>
  if(huart->Instance==UART4)
 80049b6:	682b      	ldr	r3, [r5, #0]
 80049b8:	4a4c      	ldr	r2, [pc, #304]	; (8004aec <HAL_UART_MspInit+0x148>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d156      	bne.n	8004a6c <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80049be:	2600      	movs	r6, #0
 80049c0:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <HAL_UART_MspInit+0x14c>)
 80049c2:	9601      	str	r6, [sp, #4]
 80049c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c6:	484b      	ldr	r0, [pc, #300]	; (8004af4 <HAL_UART_MspInit+0x150>)

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80049c8:	4c4b      	ldr	r4, [pc, #300]	; (8004af8 <HAL_UART_MspInit+0x154>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80049ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40
 80049d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80049d6:	9201      	str	r2, [sp, #4]
 80049d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049da:	9602      	str	r6, [sp, #8]
 80049dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	9302      	str	r3, [sp, #8]
 80049ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ee:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049f0:	2303      	movs	r3, #3
 80049f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049f8:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80049fa:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80049fe:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a00:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a02:	f7fc fa67 	bl	8000ed4 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004a06:	493d      	ldr	r1, [pc, #244]	; (8004afc <HAL_UART_MspInit+0x158>)
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a08:	60a6      	str	r6, [r4, #8]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004a0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a0e:	e884 000a 	stmia.w	r4, {r1, r3}
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004a12:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a18:	60e6      	str	r6, [r4, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a1a:	6123      	str	r3, [r4, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a1c:	6166      	str	r6, [r4, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a1e:	61a6      	str	r6, [r4, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004a20:	61e6      	str	r6, [r4, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a22:	6226      	str	r6, [r4, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a24:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004a26:	f7fc f91d 	bl	8000c64 <HAL_DMA_Init>
 8004a2a:	b108      	cbz	r0, 8004a30 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8004a2c:	f7ff fee2 	bl	80047f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004a30:	636c      	str	r4, [r5, #52]	; 0x34

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004a32:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <HAL_UART_MspInit+0x15c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004a34:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004a36:	4c33      	ldr	r4, [pc, #204]	; (8004b04 <HAL_UART_MspInit+0x160>)
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004a38:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004a3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a3e:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a40:	2340      	movs	r3, #64	; 0x40
 8004a42:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a4c:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a4e:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a50:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004a52:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a54:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a56:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7fc f903 	bl	8000c64 <HAL_DMA_Init>
 8004a5e:	b108      	cbz	r0, 8004a64 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004a60:	f7ff fec8 	bl	80047f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004a64:	632c      	str	r4, [r5, #48]	; 0x30
 8004a66:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a68:	b00a      	add	sp, #40	; 0x28
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8004a6c:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <HAL_UART_MspInit+0x164>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d1fa      	bne.n	8004a68 <HAL_UART_MspInit+0xc4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a72:	2600      	movs	r6, #0
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <HAL_UART_MspInit+0x14c>)
 8004a76:	9603      	str	r6, [sp, #12]
 8004a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7a:	481e      	ldr	r0, [pc, #120]	; (8004af4 <HAL_UART_MspInit+0x150>)
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004a7c:	4c23      	ldr	r4, [pc, #140]	; (8004b0c <HAL_UART_MspInit+0x168>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
 8004a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a86:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004a8a:	9203      	str	r2, [sp, #12]
 8004a8c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8e:	9604      	str	r6, [sp, #16]
 8004a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	9304      	str	r3, [sp, #16]
 8004aa0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aae:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ab0:	2307      	movs	r3, #7
 8004ab2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab4:	f7fc fa0e 	bl	8000ed4 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004ab8:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <HAL_UART_MspInit+0x16c>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aba:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac0:	e884 000c 	stmia.w	r4, {r2, r3}
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004ac4:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aca:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004acc:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ace:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad0:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004ad2:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ad4:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ad6:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004ad8:	f7fc f8c4 	bl	8000c64 <HAL_DMA_Init>
 8004adc:	b108      	cbz	r0, 8004ae2 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8004ade:	f7ff fe89 	bl	80047f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ae2:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_UART_MspInit+0x170>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ae6:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004ae8:	4c0b      	ldr	r4, [pc, #44]	; (8004b18 <HAL_UART_MspInit+0x174>)
 8004aea:	e7a5      	b.n	8004a38 <HAL_UART_MspInit+0x94>
 8004aec:	40004c00 	.word	0x40004c00
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40020000 	.word	0x40020000
 8004af8:	20004a0c 	.word	0x20004a0c
 8004afc:	40026040 	.word	0x40026040
 8004b00:	40026070 	.word	0x40026070
 8004b04:	20004ccc 	.word	0x20004ccc
 8004b08:	40004400 	.word	0x40004400
 8004b0c:	20004a6c 	.word	0x20004a6c
 8004b10:	40026088 	.word	0x40026088
 8004b14:	400260a0 	.word	0x400260a0
 8004b18:	20004b34 	.word	0x20004b34

08004b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b1c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004b1e:	4601      	mov	r1, r0
{
 8004b20:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004b22:	2200      	movs	r2, #0
 8004b24:	2019      	movs	r0, #25
 8004b26:	f7fc f845 	bl	8000bb4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004b2a:	2019      	movs	r0, #25
 8004b2c:	f7fc f876 	bl	8000c1c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004b30:	2500      	movs	r5, #0
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <HAL_InitTick+0x6c>)
 8004b34:	9502      	str	r5, [sp, #8]
 8004b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004b38:	4c14      	ldr	r4, [pc, #80]	; (8004b8c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b48:	a901      	add	r1, sp, #4
 8004b4a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004b4c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b4e:	f7fc fd43 	bl	80015d8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004b52:	f7fc fd31 	bl	80015b8 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8004b56:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_InitTick+0x74>)
 8004b58:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004b5a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004b5e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004b60:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HAL_InitTick+0x78>)
 8004b64:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b68:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8004b6a:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004b6c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8004b6e:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b70:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004b72:	f7fd f9fb 	bl	8001f6c <HAL_TIM_Base_Init>
 8004b76:	b920      	cbnz	r0, 8004b82 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f7fd f8d9 	bl	8001d30 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8004b7e:	b009      	add	sp, #36	; 0x24
 8004b80:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8004b82:	2001      	movs	r0, #1
 8004b84:	e7fb      	b.n	8004b7e <HAL_InitTick+0x62>
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	20004d30 	.word	0x20004d30
 8004b90:	40010000 	.word	0x40010000
 8004b94:	000f4240 	.word	0x000f4240

08004b98 <NMI_Handler>:
 8004b98:	4770      	bx	lr

08004b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b9a:	e7fe      	b.n	8004b9a <HardFault_Handler>

08004b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b9c:	e7fe      	b.n	8004b9c <MemManage_Handler>

08004b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b9e:	e7fe      	b.n	8004b9e <BusFault_Handler>

08004ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ba0:	e7fe      	b.n	8004ba0 <UsageFault_Handler>

08004ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ba2:	4770      	bx	lr

08004ba4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f7fc ba7b 	b.w	80010a0 <HAL_GPIO_EXTI_IRQHandler>
	...

08004bac <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <DMA1_Stream2_IRQHandler+0x8>)
 8004bae:	f7fc b8d7 	b.w	8000d60 <HAL_DMA_IRQHandler>
 8004bb2:	bf00      	nop
 8004bb4:	20004a0c 	.word	0x20004a0c

08004bb8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <DMA1_Stream4_IRQHandler+0x8>)
 8004bba:	f7fc b8d1 	b.w	8000d60 <HAL_DMA_IRQHandler>
 8004bbe:	bf00      	nop
 8004bc0:	20004ccc 	.word	0x20004ccc

08004bc4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <DMA1_Stream5_IRQHandler+0x8>)
 8004bc6:	f7fc b8cb 	b.w	8000d60 <HAL_DMA_IRQHandler>
 8004bca:	bf00      	nop
 8004bcc:	20004a6c 	.word	0x20004a6c

08004bd0 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004bd0:	4801      	ldr	r0, [pc, #4]	; (8004bd8 <DMA1_Stream6_IRQHandler+0x8>)
 8004bd2:	f7fc b8c5 	b.w	8000d60 <HAL_DMA_IRQHandler>
 8004bd6:	bf00      	nop
 8004bd8:	20004b34 	.word	0x20004b34

08004bdc <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  // USER CODE BEGIN CAN1_RX0_IRQn 0

   //USER CODE END CAN1_RX0_IRQn 0
  HAL_CAN_IRQHandler(&hcan1);
 8004bdc:	4801      	ldr	r0, [pc, #4]	; (8004be4 <CAN1_RX0_IRQHandler+0x8>)
 8004bde:	f7fb bed9 	b.w	8000994 <HAL_CAN_IRQHandler>
 8004be2:	bf00      	nop
 8004be4:	20004c84 	.word	0x20004c84

08004be8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004be8:	4801      	ldr	r0, [pc, #4]	; (8004bf0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8004bea:	f7fd b8b6 	b.w	8001d5a <HAL_TIM_IRQHandler>
 8004bee:	bf00      	nop
 8004bf0:	20004d30 	.word	0x20004d30

08004bf4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004bf4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <_sbrk+0x2c>)
 8004bf8:	6819      	ldr	r1, [r3, #0]
{
 8004bfa:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004bfc:	b909      	cbnz	r1, 8004c02 <_sbrk+0xe>
		heap_end = &end;
 8004bfe:	4909      	ldr	r1, [pc, #36]	; (8004c24 <_sbrk+0x30>)
 8004c00:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004c02:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004c04:	4669      	mov	r1, sp
 8004c06:	4402      	add	r2, r0
 8004c08:	428a      	cmp	r2, r1
 8004c0a:	d906      	bls.n	8004c1a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004c0c:	f000 f844 	bl	8004c98 <__errno>
 8004c10:	230c      	movs	r3, #12
 8004c12:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004c1a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004c1c:	bd08      	pop	{r3, pc}
 8004c1e:	bf00      	nop
 8004c20:	20004994 	.word	0x20004994
 8004c24:	20004d74 	.word	0x20004d74

08004c28 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <SystemInit+0x18>)
 8004c2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c2e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c4a:	e003      	b.n	8004c54 <LoopCopyDataInit>

08004c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c52:	3104      	adds	r1, #4

08004c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c54:	480b      	ldr	r0, [pc, #44]	; (8004c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c5c:	d3f6      	bcc.n	8004c4c <CopyDataInit>
  ldr  r2, =_sbss
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c60:	e002      	b.n	8004c68 <LoopFillZerobss>

08004c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c64:	f842 3b04 	str.w	r3, [r2], #4

08004c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c68:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c6c:	d3f9      	bcc.n	8004c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c6e:	f7ff ffdb 	bl	8004c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c72:	f000 f817 	bl	8004ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c76:	f7ff fb99 	bl	80043ac <main>
  bx  lr    
 8004c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c80:	0800567c 	.word	0x0800567c
  ldr  r0, =_sdata
 8004c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c88:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004c8c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8004c90:	20004d74 	.word	0x20004d74

08004c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c94:	e7fe      	b.n	8004c94 <ADC_IRQHandler>
	...

08004c98 <__errno>:
 8004c98:	4b01      	ldr	r3, [pc, #4]	; (8004ca0 <__errno+0x8>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000010 	.word	0x20000010

08004ca4 <__libc_init_array>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4e0d      	ldr	r6, [pc, #52]	; (8004cdc <__libc_init_array+0x38>)
 8004ca8:	4c0d      	ldr	r4, [pc, #52]	; (8004ce0 <__libc_init_array+0x3c>)
 8004caa:	1ba4      	subs	r4, r4, r6
 8004cac:	10a4      	asrs	r4, r4, #2
 8004cae:	2500      	movs	r5, #0
 8004cb0:	42a5      	cmp	r5, r4
 8004cb2:	d109      	bne.n	8004cc8 <__libc_init_array+0x24>
 8004cb4:	4e0b      	ldr	r6, [pc, #44]	; (8004ce4 <__libc_init_array+0x40>)
 8004cb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ce8 <__libc_init_array+0x44>)
 8004cb8:	f000 fc3e 	bl	8005538 <_init>
 8004cbc:	1ba4      	subs	r4, r4, r6
 8004cbe:	10a4      	asrs	r4, r4, #2
 8004cc0:	2500      	movs	r5, #0
 8004cc2:	42a5      	cmp	r5, r4
 8004cc4:	d105      	bne.n	8004cd2 <__libc_init_array+0x2e>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ccc:	4798      	blx	r3
 8004cce:	3501      	adds	r5, #1
 8004cd0:	e7ee      	b.n	8004cb0 <__libc_init_array+0xc>
 8004cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cd6:	4798      	blx	r3
 8004cd8:	3501      	adds	r5, #1
 8004cda:	e7f2      	b.n	8004cc2 <__libc_init_array+0x1e>
 8004cdc:	08005674 	.word	0x08005674
 8004ce0:	08005674 	.word	0x08005674
 8004ce4:	08005674 	.word	0x08005674
 8004ce8:	08005678 	.word	0x08005678

08004cec <memcpy>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	1e43      	subs	r3, r0, #1
 8004cf0:	440a      	add	r2, r1
 8004cf2:	4291      	cmp	r1, r2
 8004cf4:	d100      	bne.n	8004cf8 <memcpy+0xc>
 8004cf6:	bd10      	pop	{r4, pc}
 8004cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d00:	e7f7      	b.n	8004cf2 <memcpy+0x6>

08004d02 <memset>:
 8004d02:	4402      	add	r2, r0
 8004d04:	4603      	mov	r3, r0
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d100      	bne.n	8004d0c <memset+0xa>
 8004d0a:	4770      	bx	lr
 8004d0c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d10:	e7f9      	b.n	8004d06 <memset+0x4>
	...

08004d14 <siprintf>:
 8004d14:	b40e      	push	{r1, r2, r3}
 8004d16:	b500      	push	{lr}
 8004d18:	b09c      	sub	sp, #112	; 0x70
 8004d1a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004d1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d20:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004d24:	9002      	str	r0, [sp, #8]
 8004d26:	9006      	str	r0, [sp, #24]
 8004d28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d2c:	480a      	ldr	r0, [pc, #40]	; (8004d58 <siprintf+0x44>)
 8004d2e:	9104      	str	r1, [sp, #16]
 8004d30:	9107      	str	r1, [sp, #28]
 8004d32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d3a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004d3e:	6800      	ldr	r0, [r0, #0]
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	a902      	add	r1, sp, #8
 8004d44:	f000 f866 	bl	8004e14 <_svfiprintf_r>
 8004d48:	9b02      	ldr	r3, [sp, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	b01c      	add	sp, #112	; 0x70
 8004d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d54:	b003      	add	sp, #12
 8004d56:	4770      	bx	lr
 8004d58:	20000010 	.word	0x20000010

08004d5c <__ssputs_r>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	688e      	ldr	r6, [r1, #8]
 8004d62:	429e      	cmp	r6, r3
 8004d64:	4682      	mov	sl, r0
 8004d66:	460c      	mov	r4, r1
 8004d68:	4691      	mov	r9, r2
 8004d6a:	4698      	mov	r8, r3
 8004d6c:	d835      	bhi.n	8004dda <__ssputs_r+0x7e>
 8004d6e:	898a      	ldrh	r2, [r1, #12]
 8004d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d74:	d031      	beq.n	8004dda <__ssputs_r+0x7e>
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	6909      	ldr	r1, [r1, #16]
 8004d7a:	1a6f      	subs	r7, r5, r1
 8004d7c:	6965      	ldr	r5, [r4, #20]
 8004d7e:	2302      	movs	r3, #2
 8004d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d84:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d88:	f108 0301 	add.w	r3, r8, #1
 8004d8c:	443b      	add	r3, r7
 8004d8e:	429d      	cmp	r5, r3
 8004d90:	bf38      	it	cc
 8004d92:	461d      	movcc	r5, r3
 8004d94:	0553      	lsls	r3, r2, #21
 8004d96:	d531      	bpl.n	8004dfc <__ssputs_r+0xa0>
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f000 fb2d 	bl	80053f8 <_malloc_r>
 8004d9e:	4606      	mov	r6, r0
 8004da0:	b950      	cbnz	r0, 8004db8 <__ssputs_r+0x5c>
 8004da2:	230c      	movs	r3, #12
 8004da4:	f8ca 3000 	str.w	r3, [sl]
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	463a      	mov	r2, r7
 8004dba:	6921      	ldr	r1, [r4, #16]
 8004dbc:	f7ff ff96 	bl	8004cec <memcpy>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	6126      	str	r6, [r4, #16]
 8004dce:	6165      	str	r5, [r4, #20]
 8004dd0:	443e      	add	r6, r7
 8004dd2:	1bed      	subs	r5, r5, r7
 8004dd4:	6026      	str	r6, [r4, #0]
 8004dd6:	60a5      	str	r5, [r4, #8]
 8004dd8:	4646      	mov	r6, r8
 8004dda:	4546      	cmp	r6, r8
 8004ddc:	bf28      	it	cs
 8004dde:	4646      	movcs	r6, r8
 8004de0:	4632      	mov	r2, r6
 8004de2:	4649      	mov	r1, r9
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	f000 fa9f 	bl	8005328 <memmove>
 8004dea:	68a3      	ldr	r3, [r4, #8]
 8004dec:	1b9b      	subs	r3, r3, r6
 8004dee:	60a3      	str	r3, [r4, #8]
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	441e      	add	r6, r3
 8004df4:	6026      	str	r6, [r4, #0]
 8004df6:	2000      	movs	r0, #0
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	f000 fb59 	bl	80054b4 <_realloc_r>
 8004e02:	4606      	mov	r6, r0
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1e1      	bne.n	8004dcc <__ssputs_r+0x70>
 8004e08:	6921      	ldr	r1, [r4, #16]
 8004e0a:	4650      	mov	r0, sl
 8004e0c:	f000 faa6 	bl	800535c <_free_r>
 8004e10:	e7c7      	b.n	8004da2 <__ssputs_r+0x46>
	...

08004e14 <_svfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	b09d      	sub	sp, #116	; 0x74
 8004e1a:	4680      	mov	r8, r0
 8004e1c:	9303      	str	r3, [sp, #12]
 8004e1e:	898b      	ldrh	r3, [r1, #12]
 8004e20:	061c      	lsls	r4, r3, #24
 8004e22:	460d      	mov	r5, r1
 8004e24:	4616      	mov	r6, r2
 8004e26:	d50f      	bpl.n	8004e48 <_svfiprintf_r+0x34>
 8004e28:	690b      	ldr	r3, [r1, #16]
 8004e2a:	b96b      	cbnz	r3, 8004e48 <_svfiprintf_r+0x34>
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	f000 fae3 	bl	80053f8 <_malloc_r>
 8004e32:	6028      	str	r0, [r5, #0]
 8004e34:	6128      	str	r0, [r5, #16]
 8004e36:	b928      	cbnz	r0, 8004e44 <_svfiprintf_r+0x30>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	f8c8 3000 	str.w	r3, [r8]
 8004e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e42:	e0c5      	b.n	8004fd0 <_svfiprintf_r+0x1bc>
 8004e44:	2340      	movs	r3, #64	; 0x40
 8004e46:	616b      	str	r3, [r5, #20]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e52:	2330      	movs	r3, #48	; 0x30
 8004e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e58:	f04f 0b01 	mov.w	fp, #1
 8004e5c:	4637      	mov	r7, r6
 8004e5e:	463c      	mov	r4, r7
 8004e60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d13c      	bne.n	8004ee2 <_svfiprintf_r+0xce>
 8004e68:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e6c:	d00b      	beq.n	8004e86 <_svfiprintf_r+0x72>
 8004e6e:	4653      	mov	r3, sl
 8004e70:	4632      	mov	r2, r6
 8004e72:	4629      	mov	r1, r5
 8004e74:	4640      	mov	r0, r8
 8004e76:	f7ff ff71 	bl	8004d5c <__ssputs_r>
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	f000 80a3 	beq.w	8004fc6 <_svfiprintf_r+0x1b2>
 8004e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e82:	4453      	add	r3, sl
 8004e84:	9309      	str	r3, [sp, #36]	; 0x24
 8004e86:	783b      	ldrb	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 809c 	beq.w	8004fc6 <_svfiprintf_r+0x1b2>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f04f 32ff 	mov.w	r2, #4294967295
 8004e94:	9304      	str	r3, [sp, #16]
 8004e96:	9307      	str	r3, [sp, #28]
 8004e98:	9205      	str	r2, [sp, #20]
 8004e9a:	9306      	str	r3, [sp, #24]
 8004e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	7821      	ldrb	r1, [r4, #0]
 8004ea6:	4850      	ldr	r0, [pc, #320]	; (8004fe8 <_svfiprintf_r+0x1d4>)
 8004ea8:	f7fb f99a 	bl	80001e0 <memchr>
 8004eac:	1c67      	adds	r7, r4, #1
 8004eae:	9b04      	ldr	r3, [sp, #16]
 8004eb0:	b9d8      	cbnz	r0, 8004eea <_svfiprintf_r+0xd6>
 8004eb2:	06d9      	lsls	r1, r3, #27
 8004eb4:	bf44      	itt	mi
 8004eb6:	2220      	movmi	r2, #32
 8004eb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ebc:	071a      	lsls	r2, r3, #28
 8004ebe:	bf44      	itt	mi
 8004ec0:	222b      	movmi	r2, #43	; 0x2b
 8004ec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ec6:	7822      	ldrb	r2, [r4, #0]
 8004ec8:	2a2a      	cmp	r2, #42	; 0x2a
 8004eca:	d016      	beq.n	8004efa <_svfiprintf_r+0xe6>
 8004ecc:	9a07      	ldr	r2, [sp, #28]
 8004ece:	2100      	movs	r1, #0
 8004ed0:	200a      	movs	r0, #10
 8004ed2:	4627      	mov	r7, r4
 8004ed4:	3401      	adds	r4, #1
 8004ed6:	783b      	ldrb	r3, [r7, #0]
 8004ed8:	3b30      	subs	r3, #48	; 0x30
 8004eda:	2b09      	cmp	r3, #9
 8004edc:	d951      	bls.n	8004f82 <_svfiprintf_r+0x16e>
 8004ede:	b1c9      	cbz	r1, 8004f14 <_svfiprintf_r+0x100>
 8004ee0:	e011      	b.n	8004f06 <_svfiprintf_r+0xf2>
 8004ee2:	2b25      	cmp	r3, #37	; 0x25
 8004ee4:	d0c0      	beq.n	8004e68 <_svfiprintf_r+0x54>
 8004ee6:	4627      	mov	r7, r4
 8004ee8:	e7b9      	b.n	8004e5e <_svfiprintf_r+0x4a>
 8004eea:	4a3f      	ldr	r2, [pc, #252]	; (8004fe8 <_svfiprintf_r+0x1d4>)
 8004eec:	1a80      	subs	r0, r0, r2
 8004eee:	fa0b f000 	lsl.w	r0, fp, r0
 8004ef2:	4318      	orrs	r0, r3
 8004ef4:	9004      	str	r0, [sp, #16]
 8004ef6:	463c      	mov	r4, r7
 8004ef8:	e7d3      	b.n	8004ea2 <_svfiprintf_r+0x8e>
 8004efa:	9a03      	ldr	r2, [sp, #12]
 8004efc:	1d11      	adds	r1, r2, #4
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	9103      	str	r1, [sp, #12]
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	db01      	blt.n	8004f0a <_svfiprintf_r+0xf6>
 8004f06:	9207      	str	r2, [sp, #28]
 8004f08:	e004      	b.n	8004f14 <_svfiprintf_r+0x100>
 8004f0a:	4252      	negs	r2, r2
 8004f0c:	f043 0302 	orr.w	r3, r3, #2
 8004f10:	9207      	str	r2, [sp, #28]
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	783b      	ldrb	r3, [r7, #0]
 8004f16:	2b2e      	cmp	r3, #46	; 0x2e
 8004f18:	d10e      	bne.n	8004f38 <_svfiprintf_r+0x124>
 8004f1a:	787b      	ldrb	r3, [r7, #1]
 8004f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f1e:	f107 0101 	add.w	r1, r7, #1
 8004f22:	d132      	bne.n	8004f8a <_svfiprintf_r+0x176>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	1d1a      	adds	r2, r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	9203      	str	r2, [sp, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfb8      	it	lt
 8004f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f34:	3702      	adds	r7, #2
 8004f36:	9305      	str	r3, [sp, #20]
 8004f38:	4c2c      	ldr	r4, [pc, #176]	; (8004fec <_svfiprintf_r+0x1d8>)
 8004f3a:	7839      	ldrb	r1, [r7, #0]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7fb f94e 	bl	80001e0 <memchr>
 8004f44:	b138      	cbz	r0, 8004f56 <_svfiprintf_r+0x142>
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	1b00      	subs	r0, r0, r4
 8004f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	4303      	orrs	r3, r0
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	3701      	adds	r7, #1
 8004f56:	7839      	ldrb	r1, [r7, #0]
 8004f58:	4825      	ldr	r0, [pc, #148]	; (8004ff0 <_svfiprintf_r+0x1dc>)
 8004f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f5e:	2206      	movs	r2, #6
 8004f60:	1c7e      	adds	r6, r7, #1
 8004f62:	f7fb f93d 	bl	80001e0 <memchr>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d035      	beq.n	8004fd6 <_svfiprintf_r+0x1c2>
 8004f6a:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <_svfiprintf_r+0x1e0>)
 8004f6c:	b9fb      	cbnz	r3, 8004fae <_svfiprintf_r+0x19a>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	3307      	adds	r3, #7
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	3308      	adds	r3, #8
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7c:	444b      	add	r3, r9
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	e76c      	b.n	8004e5c <_svfiprintf_r+0x48>
 8004f82:	fb00 3202 	mla	r2, r0, r2, r3
 8004f86:	2101      	movs	r1, #1
 8004f88:	e7a3      	b.n	8004ed2 <_svfiprintf_r+0xbe>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9305      	str	r3, [sp, #20]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	240a      	movs	r4, #10
 8004f92:	460f      	mov	r7, r1
 8004f94:	3101      	adds	r1, #1
 8004f96:	783a      	ldrb	r2, [r7, #0]
 8004f98:	3a30      	subs	r2, #48	; 0x30
 8004f9a:	2a09      	cmp	r2, #9
 8004f9c:	d903      	bls.n	8004fa6 <_svfiprintf_r+0x192>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0ca      	beq.n	8004f38 <_svfiprintf_r+0x124>
 8004fa2:	9005      	str	r0, [sp, #20]
 8004fa4:	e7c8      	b.n	8004f38 <_svfiprintf_r+0x124>
 8004fa6:	fb04 2000 	mla	r0, r4, r0, r2
 8004faa:	2301      	movs	r3, #1
 8004fac:	e7f1      	b.n	8004f92 <_svfiprintf_r+0x17e>
 8004fae:	ab03      	add	r3, sp, #12
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <_svfiprintf_r+0x1e4>)
 8004fb6:	a904      	add	r1, sp, #16
 8004fb8:	4640      	mov	r0, r8
 8004fba:	f3af 8000 	nop.w
 8004fbe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004fc2:	4681      	mov	r9, r0
 8004fc4:	d1d9      	bne.n	8004f7a <_svfiprintf_r+0x166>
 8004fc6:	89ab      	ldrh	r3, [r5, #12]
 8004fc8:	065b      	lsls	r3, r3, #25
 8004fca:	f53f af38 	bmi.w	8004e3e <_svfiprintf_r+0x2a>
 8004fce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd0:	b01d      	add	sp, #116	; 0x74
 8004fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd6:	ab03      	add	r3, sp, #12
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	462a      	mov	r2, r5
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <_svfiprintf_r+0x1e4>)
 8004fde:	a904      	add	r1, sp, #16
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	f000 f881 	bl	80050e8 <_printf_i>
 8004fe6:	e7ea      	b.n	8004fbe <_svfiprintf_r+0x1aa>
 8004fe8:	08005637 	.word	0x08005637
 8004fec:	0800563d 	.word	0x0800563d
 8004ff0:	08005641 	.word	0x08005641
 8004ff4:	00000000 	.word	0x00000000
 8004ff8:	08004d5d 	.word	0x08004d5d

08004ffc <_printf_common>:
 8004ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005000:	4691      	mov	r9, r2
 8005002:	461f      	mov	r7, r3
 8005004:	688a      	ldr	r2, [r1, #8]
 8005006:	690b      	ldr	r3, [r1, #16]
 8005008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800500c:	4293      	cmp	r3, r2
 800500e:	bfb8      	it	lt
 8005010:	4613      	movlt	r3, r2
 8005012:	f8c9 3000 	str.w	r3, [r9]
 8005016:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800501a:	4606      	mov	r6, r0
 800501c:	460c      	mov	r4, r1
 800501e:	b112      	cbz	r2, 8005026 <_printf_common+0x2a>
 8005020:	3301      	adds	r3, #1
 8005022:	f8c9 3000 	str.w	r3, [r9]
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	0699      	lsls	r1, r3, #26
 800502a:	bf42      	ittt	mi
 800502c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005030:	3302      	addmi	r3, #2
 8005032:	f8c9 3000 	strmi.w	r3, [r9]
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	f015 0506 	ands.w	r5, r5, #6
 800503c:	d107      	bne.n	800504e <_printf_common+0x52>
 800503e:	f104 0a19 	add.w	sl, r4, #25
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	f8d9 2000 	ldr.w	r2, [r9]
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	429d      	cmp	r5, r3
 800504c:	db29      	blt.n	80050a2 <_printf_common+0xa6>
 800504e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	3300      	adds	r3, #0
 8005056:	bf18      	it	ne
 8005058:	2301      	movne	r3, #1
 800505a:	0692      	lsls	r2, r2, #26
 800505c:	d42e      	bmi.n	80050bc <_printf_common+0xc0>
 800505e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005062:	4639      	mov	r1, r7
 8005064:	4630      	mov	r0, r6
 8005066:	47c0      	blx	r8
 8005068:	3001      	adds	r0, #1
 800506a:	d021      	beq.n	80050b0 <_printf_common+0xb4>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	68e5      	ldr	r5, [r4, #12]
 8005070:	f8d9 2000 	ldr.w	r2, [r9]
 8005074:	f003 0306 	and.w	r3, r3, #6
 8005078:	2b04      	cmp	r3, #4
 800507a:	bf08      	it	eq
 800507c:	1aad      	subeq	r5, r5, r2
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	bf0c      	ite	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	2500      	movne	r5, #0
 800508a:	4293      	cmp	r3, r2
 800508c:	bfc4      	itt	gt
 800508e:	1a9b      	subgt	r3, r3, r2
 8005090:	18ed      	addgt	r5, r5, r3
 8005092:	f04f 0900 	mov.w	r9, #0
 8005096:	341a      	adds	r4, #26
 8005098:	454d      	cmp	r5, r9
 800509a:	d11b      	bne.n	80050d4 <_printf_common+0xd8>
 800509c:	2000      	movs	r0, #0
 800509e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a2:	2301      	movs	r3, #1
 80050a4:	4652      	mov	r2, sl
 80050a6:	4639      	mov	r1, r7
 80050a8:	4630      	mov	r0, r6
 80050aa:	47c0      	blx	r8
 80050ac:	3001      	adds	r0, #1
 80050ae:	d103      	bne.n	80050b8 <_printf_common+0xbc>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b8:	3501      	adds	r5, #1
 80050ba:	e7c2      	b.n	8005042 <_printf_common+0x46>
 80050bc:	18e1      	adds	r1, r4, r3
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	2030      	movs	r0, #48	; 0x30
 80050c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c6:	4422      	add	r2, r4
 80050c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050d0:	3302      	adds	r3, #2
 80050d2:	e7c4      	b.n	800505e <_printf_common+0x62>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4622      	mov	r2, r4
 80050d8:	4639      	mov	r1, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	47c0      	blx	r8
 80050de:	3001      	adds	r0, #1
 80050e0:	d0e6      	beq.n	80050b0 <_printf_common+0xb4>
 80050e2:	f109 0901 	add.w	r9, r9, #1
 80050e6:	e7d7      	b.n	8005098 <_printf_common+0x9c>

080050e8 <_printf_i>:
 80050e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050ec:	4617      	mov	r7, r2
 80050ee:	7e0a      	ldrb	r2, [r1, #24]
 80050f0:	b085      	sub	sp, #20
 80050f2:	2a6e      	cmp	r2, #110	; 0x6e
 80050f4:	4698      	mov	r8, r3
 80050f6:	4606      	mov	r6, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005100:	f000 80bc 	beq.w	800527c <_printf_i+0x194>
 8005104:	d81a      	bhi.n	800513c <_printf_i+0x54>
 8005106:	2a63      	cmp	r2, #99	; 0x63
 8005108:	d02e      	beq.n	8005168 <_printf_i+0x80>
 800510a:	d80a      	bhi.n	8005122 <_printf_i+0x3a>
 800510c:	2a00      	cmp	r2, #0
 800510e:	f000 80c8 	beq.w	80052a2 <_printf_i+0x1ba>
 8005112:	2a58      	cmp	r2, #88	; 0x58
 8005114:	f000 808a 	beq.w	800522c <_printf_i+0x144>
 8005118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800511c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005120:	e02a      	b.n	8005178 <_printf_i+0x90>
 8005122:	2a64      	cmp	r2, #100	; 0x64
 8005124:	d001      	beq.n	800512a <_printf_i+0x42>
 8005126:	2a69      	cmp	r2, #105	; 0x69
 8005128:	d1f6      	bne.n	8005118 <_printf_i+0x30>
 800512a:	6821      	ldr	r1, [r4, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005132:	d023      	beq.n	800517c <_printf_i+0x94>
 8005134:	1d11      	adds	r1, r2, #4
 8005136:	6019      	str	r1, [r3, #0]
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	e027      	b.n	800518c <_printf_i+0xa4>
 800513c:	2a73      	cmp	r2, #115	; 0x73
 800513e:	f000 80b4 	beq.w	80052aa <_printf_i+0x1c2>
 8005142:	d808      	bhi.n	8005156 <_printf_i+0x6e>
 8005144:	2a6f      	cmp	r2, #111	; 0x6f
 8005146:	d02a      	beq.n	800519e <_printf_i+0xb6>
 8005148:	2a70      	cmp	r2, #112	; 0x70
 800514a:	d1e5      	bne.n	8005118 <_printf_i+0x30>
 800514c:	680a      	ldr	r2, [r1, #0]
 800514e:	f042 0220 	orr.w	r2, r2, #32
 8005152:	600a      	str	r2, [r1, #0]
 8005154:	e003      	b.n	800515e <_printf_i+0x76>
 8005156:	2a75      	cmp	r2, #117	; 0x75
 8005158:	d021      	beq.n	800519e <_printf_i+0xb6>
 800515a:	2a78      	cmp	r2, #120	; 0x78
 800515c:	d1dc      	bne.n	8005118 <_printf_i+0x30>
 800515e:	2278      	movs	r2, #120	; 0x78
 8005160:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005164:	496e      	ldr	r1, [pc, #440]	; (8005320 <_printf_i+0x238>)
 8005166:	e064      	b.n	8005232 <_printf_i+0x14a>
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800516e:	1d11      	adds	r1, r2, #4
 8005170:	6019      	str	r1, [r3, #0]
 8005172:	6813      	ldr	r3, [r2, #0]
 8005174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005178:	2301      	movs	r3, #1
 800517a:	e0a3      	b.n	80052c4 <_printf_i+0x1dc>
 800517c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005180:	f102 0104 	add.w	r1, r2, #4
 8005184:	6019      	str	r1, [r3, #0]
 8005186:	d0d7      	beq.n	8005138 <_printf_i+0x50>
 8005188:	f9b2 3000 	ldrsh.w	r3, [r2]
 800518c:	2b00      	cmp	r3, #0
 800518e:	da03      	bge.n	8005198 <_printf_i+0xb0>
 8005190:	222d      	movs	r2, #45	; 0x2d
 8005192:	425b      	negs	r3, r3
 8005194:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005198:	4962      	ldr	r1, [pc, #392]	; (8005324 <_printf_i+0x23c>)
 800519a:	220a      	movs	r2, #10
 800519c:	e017      	b.n	80051ce <_printf_i+0xe6>
 800519e:	6820      	ldr	r0, [r4, #0]
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051a6:	d003      	beq.n	80051b0 <_printf_i+0xc8>
 80051a8:	1d08      	adds	r0, r1, #4
 80051aa:	6018      	str	r0, [r3, #0]
 80051ac:	680b      	ldr	r3, [r1, #0]
 80051ae:	e006      	b.n	80051be <_printf_i+0xd6>
 80051b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051b4:	f101 0004 	add.w	r0, r1, #4
 80051b8:	6018      	str	r0, [r3, #0]
 80051ba:	d0f7      	beq.n	80051ac <_printf_i+0xc4>
 80051bc:	880b      	ldrh	r3, [r1, #0]
 80051be:	4959      	ldr	r1, [pc, #356]	; (8005324 <_printf_i+0x23c>)
 80051c0:	2a6f      	cmp	r2, #111	; 0x6f
 80051c2:	bf14      	ite	ne
 80051c4:	220a      	movne	r2, #10
 80051c6:	2208      	moveq	r2, #8
 80051c8:	2000      	movs	r0, #0
 80051ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80051ce:	6865      	ldr	r5, [r4, #4]
 80051d0:	60a5      	str	r5, [r4, #8]
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	f2c0 809c 	blt.w	8005310 <_printf_i+0x228>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	f020 0004 	bic.w	r0, r0, #4
 80051de:	6020      	str	r0, [r4, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d13f      	bne.n	8005264 <_printf_i+0x17c>
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	f040 8095 	bne.w	8005314 <_printf_i+0x22c>
 80051ea:	4675      	mov	r5, lr
 80051ec:	2a08      	cmp	r2, #8
 80051ee:	d10b      	bne.n	8005208 <_printf_i+0x120>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07da      	lsls	r2, r3, #31
 80051f4:	d508      	bpl.n	8005208 <_printf_i+0x120>
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	6862      	ldr	r2, [r4, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	bfde      	ittt	le
 80051fe:	2330      	movle	r3, #48	; 0x30
 8005200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005208:	ebae 0305 	sub.w	r3, lr, r5
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	f8cd 8000 	str.w	r8, [sp]
 8005212:	463b      	mov	r3, r7
 8005214:	aa03      	add	r2, sp, #12
 8005216:	4621      	mov	r1, r4
 8005218:	4630      	mov	r0, r6
 800521a:	f7ff feef 	bl	8004ffc <_printf_common>
 800521e:	3001      	adds	r0, #1
 8005220:	d155      	bne.n	80052ce <_printf_i+0x1e6>
 8005222:	f04f 30ff 	mov.w	r0, #4294967295
 8005226:	b005      	add	sp, #20
 8005228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800522c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005230:	493c      	ldr	r1, [pc, #240]	; (8005324 <_printf_i+0x23c>)
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	f012 0f80 	tst.w	r2, #128	; 0x80
 800523a:	f100 0504 	add.w	r5, r0, #4
 800523e:	601d      	str	r5, [r3, #0]
 8005240:	d001      	beq.n	8005246 <_printf_i+0x15e>
 8005242:	6803      	ldr	r3, [r0, #0]
 8005244:	e002      	b.n	800524c <_printf_i+0x164>
 8005246:	0655      	lsls	r5, r2, #25
 8005248:	d5fb      	bpl.n	8005242 <_printf_i+0x15a>
 800524a:	8803      	ldrh	r3, [r0, #0]
 800524c:	07d0      	lsls	r0, r2, #31
 800524e:	bf44      	itt	mi
 8005250:	f042 0220 	orrmi.w	r2, r2, #32
 8005254:	6022      	strmi	r2, [r4, #0]
 8005256:	b91b      	cbnz	r3, 8005260 <_printf_i+0x178>
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	f022 0220 	bic.w	r2, r2, #32
 800525e:	6022      	str	r2, [r4, #0]
 8005260:	2210      	movs	r2, #16
 8005262:	e7b1      	b.n	80051c8 <_printf_i+0xe0>
 8005264:	4675      	mov	r5, lr
 8005266:	fbb3 f0f2 	udiv	r0, r3, r2
 800526a:	fb02 3310 	mls	r3, r2, r0, r3
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005274:	4603      	mov	r3, r0
 8005276:	2800      	cmp	r0, #0
 8005278:	d1f5      	bne.n	8005266 <_printf_i+0x17e>
 800527a:	e7b7      	b.n	80051ec <_printf_i+0x104>
 800527c:	6808      	ldr	r0, [r1, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	6949      	ldr	r1, [r1, #20]
 8005282:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005286:	d004      	beq.n	8005292 <_printf_i+0x1aa>
 8005288:	1d10      	adds	r0, r2, #4
 800528a:	6018      	str	r0, [r3, #0]
 800528c:	6813      	ldr	r3, [r2, #0]
 800528e:	6019      	str	r1, [r3, #0]
 8005290:	e007      	b.n	80052a2 <_printf_i+0x1ba>
 8005292:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005296:	f102 0004 	add.w	r0, r2, #4
 800529a:	6018      	str	r0, [r3, #0]
 800529c:	6813      	ldr	r3, [r2, #0]
 800529e:	d0f6      	beq.n	800528e <_printf_i+0x1a6>
 80052a0:	8019      	strh	r1, [r3, #0]
 80052a2:	2300      	movs	r3, #0
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	4675      	mov	r5, lr
 80052a8:	e7b1      	b.n	800520e <_printf_i+0x126>
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	1d11      	adds	r1, r2, #4
 80052ae:	6019      	str	r1, [r3, #0]
 80052b0:	6815      	ldr	r5, [r2, #0]
 80052b2:	6862      	ldr	r2, [r4, #4]
 80052b4:	2100      	movs	r1, #0
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7fa ff92 	bl	80001e0 <memchr>
 80052bc:	b108      	cbz	r0, 80052c2 <_printf_i+0x1da>
 80052be:	1b40      	subs	r0, r0, r5
 80052c0:	6060      	str	r0, [r4, #4]
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	2300      	movs	r3, #0
 80052c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052cc:	e79f      	b.n	800520e <_printf_i+0x126>
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	462a      	mov	r2, r5
 80052d2:	4639      	mov	r1, r7
 80052d4:	4630      	mov	r0, r6
 80052d6:	47c0      	blx	r8
 80052d8:	3001      	adds	r0, #1
 80052da:	d0a2      	beq.n	8005222 <_printf_i+0x13a>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	079b      	lsls	r3, r3, #30
 80052e0:	d507      	bpl.n	80052f2 <_printf_i+0x20a>
 80052e2:	2500      	movs	r5, #0
 80052e4:	f104 0919 	add.w	r9, r4, #25
 80052e8:	68e3      	ldr	r3, [r4, #12]
 80052ea:	9a03      	ldr	r2, [sp, #12]
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	429d      	cmp	r5, r3
 80052f0:	db05      	blt.n	80052fe <_printf_i+0x216>
 80052f2:	68e0      	ldr	r0, [r4, #12]
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	4298      	cmp	r0, r3
 80052f8:	bfb8      	it	lt
 80052fa:	4618      	movlt	r0, r3
 80052fc:	e793      	b.n	8005226 <_printf_i+0x13e>
 80052fe:	2301      	movs	r3, #1
 8005300:	464a      	mov	r2, r9
 8005302:	4639      	mov	r1, r7
 8005304:	4630      	mov	r0, r6
 8005306:	47c0      	blx	r8
 8005308:	3001      	adds	r0, #1
 800530a:	d08a      	beq.n	8005222 <_printf_i+0x13a>
 800530c:	3501      	adds	r5, #1
 800530e:	e7eb      	b.n	80052e8 <_printf_i+0x200>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1a7      	bne.n	8005264 <_printf_i+0x17c>
 8005314:	780b      	ldrb	r3, [r1, #0]
 8005316:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800531a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800531e:	e765      	b.n	80051ec <_printf_i+0x104>
 8005320:	08005659 	.word	0x08005659
 8005324:	08005648 	.word	0x08005648

08005328 <memmove>:
 8005328:	4288      	cmp	r0, r1
 800532a:	b510      	push	{r4, lr}
 800532c:	eb01 0302 	add.w	r3, r1, r2
 8005330:	d803      	bhi.n	800533a <memmove+0x12>
 8005332:	1e42      	subs	r2, r0, #1
 8005334:	4299      	cmp	r1, r3
 8005336:	d10c      	bne.n	8005352 <memmove+0x2a>
 8005338:	bd10      	pop	{r4, pc}
 800533a:	4298      	cmp	r0, r3
 800533c:	d2f9      	bcs.n	8005332 <memmove+0xa>
 800533e:	1881      	adds	r1, r0, r2
 8005340:	1ad2      	subs	r2, r2, r3
 8005342:	42d3      	cmn	r3, r2
 8005344:	d100      	bne.n	8005348 <memmove+0x20>
 8005346:	bd10      	pop	{r4, pc}
 8005348:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800534c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005350:	e7f7      	b.n	8005342 <memmove+0x1a>
 8005352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005356:	f802 4f01 	strb.w	r4, [r2, #1]!
 800535a:	e7eb      	b.n	8005334 <memmove+0xc>

0800535c <_free_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4605      	mov	r5, r0
 8005360:	2900      	cmp	r1, #0
 8005362:	d045      	beq.n	80053f0 <_free_r+0x94>
 8005364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005368:	1f0c      	subs	r4, r1, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	bfb8      	it	lt
 800536e:	18e4      	addlt	r4, r4, r3
 8005370:	f000 f8d6 	bl	8005520 <__malloc_lock>
 8005374:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <_free_r+0x98>)
 8005376:	6813      	ldr	r3, [r2, #0]
 8005378:	4610      	mov	r0, r2
 800537a:	b933      	cbnz	r3, 800538a <_free_r+0x2e>
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	6014      	str	r4, [r2, #0]
 8005380:	4628      	mov	r0, r5
 8005382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005386:	f000 b8cc 	b.w	8005522 <__malloc_unlock>
 800538a:	42a3      	cmp	r3, r4
 800538c:	d90c      	bls.n	80053a8 <_free_r+0x4c>
 800538e:	6821      	ldr	r1, [r4, #0]
 8005390:	1862      	adds	r2, r4, r1
 8005392:	4293      	cmp	r3, r2
 8005394:	bf04      	itt	eq
 8005396:	681a      	ldreq	r2, [r3, #0]
 8005398:	685b      	ldreq	r3, [r3, #4]
 800539a:	6063      	str	r3, [r4, #4]
 800539c:	bf04      	itt	eq
 800539e:	1852      	addeq	r2, r2, r1
 80053a0:	6022      	streq	r2, [r4, #0]
 80053a2:	6004      	str	r4, [r0, #0]
 80053a4:	e7ec      	b.n	8005380 <_free_r+0x24>
 80053a6:	4613      	mov	r3, r2
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	b10a      	cbz	r2, 80053b0 <_free_r+0x54>
 80053ac:	42a2      	cmp	r2, r4
 80053ae:	d9fa      	bls.n	80053a6 <_free_r+0x4a>
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	1858      	adds	r0, r3, r1
 80053b4:	42a0      	cmp	r0, r4
 80053b6:	d10b      	bne.n	80053d0 <_free_r+0x74>
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	4401      	add	r1, r0
 80053bc:	1858      	adds	r0, r3, r1
 80053be:	4282      	cmp	r2, r0
 80053c0:	6019      	str	r1, [r3, #0]
 80053c2:	d1dd      	bne.n	8005380 <_free_r+0x24>
 80053c4:	6810      	ldr	r0, [r2, #0]
 80053c6:	6852      	ldr	r2, [r2, #4]
 80053c8:	605a      	str	r2, [r3, #4]
 80053ca:	4401      	add	r1, r0
 80053cc:	6019      	str	r1, [r3, #0]
 80053ce:	e7d7      	b.n	8005380 <_free_r+0x24>
 80053d0:	d902      	bls.n	80053d8 <_free_r+0x7c>
 80053d2:	230c      	movs	r3, #12
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	e7d3      	b.n	8005380 <_free_r+0x24>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	1821      	adds	r1, r4, r0
 80053dc:	428a      	cmp	r2, r1
 80053de:	bf04      	itt	eq
 80053e0:	6811      	ldreq	r1, [r2, #0]
 80053e2:	6852      	ldreq	r2, [r2, #4]
 80053e4:	6062      	str	r2, [r4, #4]
 80053e6:	bf04      	itt	eq
 80053e8:	1809      	addeq	r1, r1, r0
 80053ea:	6021      	streq	r1, [r4, #0]
 80053ec:	605c      	str	r4, [r3, #4]
 80053ee:	e7c7      	b.n	8005380 <_free_r+0x24>
 80053f0:	bd38      	pop	{r3, r4, r5, pc}
 80053f2:	bf00      	nop
 80053f4:	20004998 	.word	0x20004998

080053f8 <_malloc_r>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	1ccd      	adds	r5, r1, #3
 80053fc:	f025 0503 	bic.w	r5, r5, #3
 8005400:	3508      	adds	r5, #8
 8005402:	2d0c      	cmp	r5, #12
 8005404:	bf38      	it	cc
 8005406:	250c      	movcc	r5, #12
 8005408:	2d00      	cmp	r5, #0
 800540a:	4606      	mov	r6, r0
 800540c:	db01      	blt.n	8005412 <_malloc_r+0x1a>
 800540e:	42a9      	cmp	r1, r5
 8005410:	d903      	bls.n	800541a <_malloc_r+0x22>
 8005412:	230c      	movs	r3, #12
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	2000      	movs	r0, #0
 8005418:	bd70      	pop	{r4, r5, r6, pc}
 800541a:	f000 f881 	bl	8005520 <__malloc_lock>
 800541e:	4a23      	ldr	r2, [pc, #140]	; (80054ac <_malloc_r+0xb4>)
 8005420:	6814      	ldr	r4, [r2, #0]
 8005422:	4621      	mov	r1, r4
 8005424:	b991      	cbnz	r1, 800544c <_malloc_r+0x54>
 8005426:	4c22      	ldr	r4, [pc, #136]	; (80054b0 <_malloc_r+0xb8>)
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	b91b      	cbnz	r3, 8005434 <_malloc_r+0x3c>
 800542c:	4630      	mov	r0, r6
 800542e:	f000 f867 	bl	8005500 <_sbrk_r>
 8005432:	6020      	str	r0, [r4, #0]
 8005434:	4629      	mov	r1, r5
 8005436:	4630      	mov	r0, r6
 8005438:	f000 f862 	bl	8005500 <_sbrk_r>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d126      	bne.n	800548e <_malloc_r+0x96>
 8005440:	230c      	movs	r3, #12
 8005442:	6033      	str	r3, [r6, #0]
 8005444:	4630      	mov	r0, r6
 8005446:	f000 f86c 	bl	8005522 <__malloc_unlock>
 800544a:	e7e4      	b.n	8005416 <_malloc_r+0x1e>
 800544c:	680b      	ldr	r3, [r1, #0]
 800544e:	1b5b      	subs	r3, r3, r5
 8005450:	d41a      	bmi.n	8005488 <_malloc_r+0x90>
 8005452:	2b0b      	cmp	r3, #11
 8005454:	d90f      	bls.n	8005476 <_malloc_r+0x7e>
 8005456:	600b      	str	r3, [r1, #0]
 8005458:	50cd      	str	r5, [r1, r3]
 800545a:	18cc      	adds	r4, r1, r3
 800545c:	4630      	mov	r0, r6
 800545e:	f000 f860 	bl	8005522 <__malloc_unlock>
 8005462:	f104 000b 	add.w	r0, r4, #11
 8005466:	1d23      	adds	r3, r4, #4
 8005468:	f020 0007 	bic.w	r0, r0, #7
 800546c:	1ac3      	subs	r3, r0, r3
 800546e:	d01b      	beq.n	80054a8 <_malloc_r+0xb0>
 8005470:	425a      	negs	r2, r3
 8005472:	50e2      	str	r2, [r4, r3]
 8005474:	bd70      	pop	{r4, r5, r6, pc}
 8005476:	428c      	cmp	r4, r1
 8005478:	bf0d      	iteet	eq
 800547a:	6863      	ldreq	r3, [r4, #4]
 800547c:	684b      	ldrne	r3, [r1, #4]
 800547e:	6063      	strne	r3, [r4, #4]
 8005480:	6013      	streq	r3, [r2, #0]
 8005482:	bf18      	it	ne
 8005484:	460c      	movne	r4, r1
 8005486:	e7e9      	b.n	800545c <_malloc_r+0x64>
 8005488:	460c      	mov	r4, r1
 800548a:	6849      	ldr	r1, [r1, #4]
 800548c:	e7ca      	b.n	8005424 <_malloc_r+0x2c>
 800548e:	1cc4      	adds	r4, r0, #3
 8005490:	f024 0403 	bic.w	r4, r4, #3
 8005494:	42a0      	cmp	r0, r4
 8005496:	d005      	beq.n	80054a4 <_malloc_r+0xac>
 8005498:	1a21      	subs	r1, r4, r0
 800549a:	4630      	mov	r0, r6
 800549c:	f000 f830 	bl	8005500 <_sbrk_r>
 80054a0:	3001      	adds	r0, #1
 80054a2:	d0cd      	beq.n	8005440 <_malloc_r+0x48>
 80054a4:	6025      	str	r5, [r4, #0]
 80054a6:	e7d9      	b.n	800545c <_malloc_r+0x64>
 80054a8:	bd70      	pop	{r4, r5, r6, pc}
 80054aa:	bf00      	nop
 80054ac:	20004998 	.word	0x20004998
 80054b0:	2000499c 	.word	0x2000499c

080054b4 <_realloc_r>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	4607      	mov	r7, r0
 80054b8:	4614      	mov	r4, r2
 80054ba:	460e      	mov	r6, r1
 80054bc:	b921      	cbnz	r1, 80054c8 <_realloc_r+0x14>
 80054be:	4611      	mov	r1, r2
 80054c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054c4:	f7ff bf98 	b.w	80053f8 <_malloc_r>
 80054c8:	b922      	cbnz	r2, 80054d4 <_realloc_r+0x20>
 80054ca:	f7ff ff47 	bl	800535c <_free_r>
 80054ce:	4625      	mov	r5, r4
 80054d0:	4628      	mov	r0, r5
 80054d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d4:	f000 f826 	bl	8005524 <_malloc_usable_size_r>
 80054d8:	4284      	cmp	r4, r0
 80054da:	d90f      	bls.n	80054fc <_realloc_r+0x48>
 80054dc:	4621      	mov	r1, r4
 80054de:	4638      	mov	r0, r7
 80054e0:	f7ff ff8a 	bl	80053f8 <_malloc_r>
 80054e4:	4605      	mov	r5, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d0f2      	beq.n	80054d0 <_realloc_r+0x1c>
 80054ea:	4631      	mov	r1, r6
 80054ec:	4622      	mov	r2, r4
 80054ee:	f7ff fbfd 	bl	8004cec <memcpy>
 80054f2:	4631      	mov	r1, r6
 80054f4:	4638      	mov	r0, r7
 80054f6:	f7ff ff31 	bl	800535c <_free_r>
 80054fa:	e7e9      	b.n	80054d0 <_realloc_r+0x1c>
 80054fc:	4635      	mov	r5, r6
 80054fe:	e7e7      	b.n	80054d0 <_realloc_r+0x1c>

08005500 <_sbrk_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4c06      	ldr	r4, [pc, #24]	; (800551c <_sbrk_r+0x1c>)
 8005504:	2300      	movs	r3, #0
 8005506:	4605      	mov	r5, r0
 8005508:	4608      	mov	r0, r1
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	f7ff fb72 	bl	8004bf4 <_sbrk>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_sbrk_r+0x1a>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	b103      	cbz	r3, 800551a <_sbrk_r+0x1a>
 8005518:	602b      	str	r3, [r5, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	20004d70 	.word	0x20004d70

08005520 <__malloc_lock>:
 8005520:	4770      	bx	lr

08005522 <__malloc_unlock>:
 8005522:	4770      	bx	lr

08005524 <_malloc_usable_size_r>:
 8005524:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005528:	2800      	cmp	r0, #0
 800552a:	f1a0 0004 	sub.w	r0, r0, #4
 800552e:	bfbc      	itt	lt
 8005530:	580b      	ldrlt	r3, [r1, r0]
 8005532:	18c0      	addlt	r0, r0, r3
 8005534:	4770      	bx	lr
	...

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
